<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>明绪</title>
  
  
  <link href="https://miaomiao7.github.io/atom.xml" rel="self"/>
  
  <link href="https://miaomiao7.github.io/"/>
  <updated>2021-04-25T02:44:25.696Z</updated>
  <id>https://miaomiao7.github.io/</id>
  
  <author>
    <name>明绪</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>有道翻译api接口调用</title>
    <link href="https://miaomiao7.github.io/2021/04/25/%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91api/"/>
    <id>https://miaomiao7.github.io/2021/04/25/%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91api/</id>
    <published>2021-04-25T01:52:46.000Z</published>
    <updated>2021-04-25T02:44:25.696Z</updated>
    
    <content type="html"><![CDATA[<p>有道翻译api调用封装</p><p>学会善于处理各种输出</p><span id="more"></span><p><a href="https://ai.youdao.com/?keyfrom=old-openapi#/">有道智云AI开放平台 (youdao.com)</a></p><p>可嫖50</p><p>这里以图片翻译为例</p><p>创建应用</p><blockquote><p>接口说明:</p><p>图片翻译API接口提供有道的图片文字识别翻译服务。您只需要通过调用图片翻译API，传入图片的Base64编码，指定源语言与目标语言，通过POST请求方式，就可以识别图片中的文字并进行翻译。</p><p>图片翻译 API HTTPS地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;openapi.youdao.com&#x2F;ocrtransapi</span><br></pre></td></tr></table></figure></blockquote><p>以Python3为例</p><p><img src="https://i.loli.net/2021/04/25/5xc7A1IkXEvybsf.png" alt="image-20210425103914220"></p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import sys</span><br><span class="line">import uuid</span><br><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line">from imp import reload</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line"></span><br><span class="line">YOUDAO_URL &#x3D; &#39;https:&#x2F;&#x2F;openapi.youdao.com&#x2F;ocrtransapi&#39;</span><br><span class="line">APP_KEY &#x3D; &#39;您的应用ID&#39;</span><br><span class="line">APP_SECRET &#x3D; &#39;您的应用密钥&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def truncate(q):</span><br><span class="line">    if q is None:</span><br><span class="line">        return None</span><br><span class="line">    size &#x3D; len(q)</span><br><span class="line">    return q if size &lt;&#x3D; 20 else q[0:10] + str(size) + q[size - 10:size]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def encrypt(signStr):</span><br><span class="line">    hash_algorithm &#x3D; hashlib.md5()</span><br><span class="line">    hash_algorithm.update(signStr.encode(&#39;utf-8&#39;))</span><br><span class="line">    return hash_algorithm.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def do_request(data):</span><br><span class="line">    headers &#x3D; &#123;&#39;Content-Type&#39;: &#39;application&#x2F;x-www-form-urlencoded&#39;&#125;</span><br><span class="line">    return requests.post(YOUDAO_URL, data&#x3D;data, headers&#x3D;headers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def connect():</span><br><span class="line">    f &#x3D; open(r&#39;图片的路径&#39;, &#39;rb&#39;)  # 二进制方式打开图文件</span><br><span class="line">    q &#x3D; base64.b64encode(f.read()).decode(&#39;utf-8&#39;)  # 读取文件内容，转换为base64编码</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    data &#x3D; &#123;&#125;</span><br><span class="line">    data[&#39;from&#39;] &#x3D; &#39;源语言&#39;</span><br><span class="line">    data[&#39;to&#39;] &#x3D; &#39;目标语言&#39;</span><br><span class="line">    data[&#39;type&#39;] &#x3D; &#39;1&#39;</span><br><span class="line">    data[&#39;q&#39;] &#x3D; q</span><br><span class="line">    salt &#x3D; str(uuid.uuid1())</span><br><span class="line">    signStr &#x3D; APP_KEY + q + salt + APP_SECRET</span><br><span class="line">    sign &#x3D; encrypt(signStr)</span><br><span class="line">    data[&#39;appKey&#39;] &#x3D; APP_KEY</span><br><span class="line">    data[&#39;salt&#39;] &#x3D; salt</span><br><span class="line">    data[&#39;sign&#39;] &#x3D; sign</span><br><span class="line"></span><br><span class="line">    response &#x3D; do_request(data)</span><br><span class="line">    print(response.content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    connect()</span><br></pre></td></tr></table></figure></blockquote><p>源语言，目标语言可在API接入文档里查看</p><p>应用ID，应用密钥要填好</p><p>根据需要输出</p><h6 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import sys</span><br><span class="line">import uuid</span><br><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line">import hashlib</span><br><span class="line">import json</span><br><span class="line">#from imp import reload</span><br><span class="line">import importlib</span><br><span class="line">importlib.reload(sys)</span><br><span class="line"></span><br><span class="line">YOUDAO_URL &#x3D; &#39;https:&#x2F;&#x2F;openapi.youdao.com&#x2F;ocrtransapi&#39;</span><br><span class="line">APP_KEY &#x3D; &#39;2076369e03c3b613&#39;</span><br><span class="line">APP_SECRET &#x3D; &#39;IXTdRCXGsVJrIQJpxioMJZvGtZhl3lg7&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def truncate(q):</span><br><span class="line">    if q is None:</span><br><span class="line">        return None</span><br><span class="line">    size &#x3D; len(q)</span><br><span class="line">    return q if size &lt;&#x3D; 20 else q[0:10] + str(size) + q[size - 10:size]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def encrypt(signStr):</span><br><span class="line">    hash_algorithm &#x3D; hashlib.md5()</span><br><span class="line">    hash_algorithm.update(signStr.encode(&#39;utf-8&#39;))</span><br><span class="line">    return hash_algorithm.hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def do_request(data):</span><br><span class="line">    headers &#x3D; &#123;&#39;Content-Type&#39;: &#39;application&#x2F;x-www-form-urlencoded&#39;&#125;</span><br><span class="line">    return requests.post(YOUDAO_URL, data&#x3D;data, headers&#x3D;headers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def connect():</span><br><span class="line">    with open(&#39;IMG_20210424_202020.jpg&#39;,&#39;rb&#39;) as f:</span><br><span class="line">    #f &#x3D; open(&#39;1.jpg&#39;, &#39;rb&#39;)  # 二进制方式打开图文件</span><br><span class="line">        q &#x3D; base64.b64encode(f.read()).decode(&#39;utf-8&#39;)  # 读取文件内容，转换为base64编码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    data &#x3D; &#123;&#125;</span><br><span class="line">    data[&#39;from&#39;] &#x3D; &#39;en&#39;</span><br><span class="line">    data[&#39;to&#39;] &#x3D; &#39;zh-CHS&#39;</span><br><span class="line">    data[&#39;type&#39;] &#x3D; &#39;1&#39;</span><br><span class="line">    data[&#39;q&#39;] &#x3D; q</span><br><span class="line">    salt &#x3D; str(uuid.uuid1())</span><br><span class="line">    signStr &#x3D; APP_KEY + q + salt + APP_SECRET</span><br><span class="line">    sign &#x3D; encrypt(signStr)</span><br><span class="line">    data[&#39;appKey&#39;] &#x3D; APP_KEY</span><br><span class="line">    data[&#39;salt&#39;] &#x3D; salt</span><br><span class="line">    data[&#39;sign&#39;] &#x3D; sign</span><br><span class="line"></span><br><span class="line">    response &#x3D; do_request(data)</span><br><span class="line">    _map&#x3D;json.loads(response.content)</span><br><span class="line">    #print(_map)</span><br><span class="line">    for key in _map[&quot;resRegions&quot;]:</span><br><span class="line">        print(key[&#39;tranContent&#39;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    connect()</span><br><span class="line">            </span><br></pre></td></tr></table></figure><p>最后列表最好再用字符串存一下</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有道翻译api调用封装&lt;/p&gt;
&lt;p&gt;学会善于处理各种输出&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://miaomiao7.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>百度api接口调用</title>
    <link href="https://miaomiao7.github.io/2021/04/25/%E7%99%BE%E5%BA%A6api%E8%B0%83%E7%94%A8/"/>
    <id>https://miaomiao7.github.io/2021/04/25/%E7%99%BE%E5%BA%A6api%E8%B0%83%E7%94%A8/</id>
    <published>2021-04-25T01:52:46.000Z</published>
    <updated>2021-04-25T02:30:44.297Z</updated>
    
    <content type="html"><![CDATA[<p>百度图像、文字识别等api调用封装</p><p>python内封装</p><span id="more"></span><h2 id="OCR"><a href="#OCR" class="headerlink" title="OCR"></a>OCR</h2><p>登陆百度智能云</p><p>查找产品服务里查找想要调用的api：这里是人工智能-&gt;文字识别</p><p>开通你想要的服务：以通用文字识别（标准版）为例</p><p><img src="https://i.loli.net/2021/04/25/bFUkW5qZy6h9aCd.png" alt="image-20210425100849358"></p><p>创建应用</p><p>管理应用：AppID、API Key、Secret Key，下面会用到</p><p>查看技术文档-&gt;HTTP-SDK文档，这里使用Python</p><p>​    -&gt;查看快速入门：</p><p>​        执行<code>pip install baidu-aip</code>安装</p><p>​        新建AipOcr.py文件，一定要填入正确信息</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from aip import AipOcr</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot; 你的 APPID AK SK &quot;&quot;&quot;</span><br><span class="line">APP_ID = &#x27;你的 App ID&#x27;</span><br><span class="line">API_KEY = &#x27;你的 Api Key&#x27;</span><br><span class="line">SECRET_KEY = &#x27;你的 Secret Key&#x27;</span><br><span class="line"></span><br><span class="line">client = AipOcr(APP_ID, API_KEY, SECRET_KEY)</span><br></pre></td></tr></table></figure><p>​    -&gt;查看接口说明：<a href="https://cloud.baidu.com/doc/OCR/s/7kibizyfm">文字识别OCR (baidu.com)</a></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot; 读取图片 &quot;&quot;&quot;</span><br><span class="line">def get_file_content(filePath):</span><br><span class="line">    with open(filePath, &#x27;rb&#x27;) as fp:</span><br><span class="line">        return fp.read()</span><br><span class="line"></span><br><span class="line">image = get_file_content(&#x27;example.jpg&#x27;)</span><br></pre></td></tr></table></figure><p>从中选取你需要的识别代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot; 调用通用文字识别, 图片参数为本地图片 &quot;&quot;&quot;</span><br><span class="line">client.basicGeneral(image);</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot; 如果有可选参数 &quot;&quot;&quot;</span><br><span class="line">options = &#123;&#125;</span><br><span class="line">options[&quot;language_type&quot;] = &quot;CHN_ENG&quot;</span><br><span class="line">options[&quot;detect_direction&quot;] = &quot;true&quot;</span><br><span class="line">options[&quot;detect_language&quot;] = &quot;true&quot;</span><br><span class="line">options[&quot;probability&quot;] = &quot;true&quot;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot; 带参数调用通用文字识别, 图片参数为本地图片 &quot;&quot;&quot;</span><br><span class="line">client.basicGeneral(image, options)</span><br><span class="line"></span><br><span class="line">url = &quot;https//www.x.com/sample.jpg&quot;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot; 调用通用文字识别, 图片参数为远程url图片 &quot;&quot;&quot;</span><br><span class="line">client.basicGeneralUrl(url);</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot; 如果有可选参数 &quot;&quot;&quot;</span><br><span class="line">options = &#123;&#125;</span><br><span class="line">options[&quot;language_type&quot;] = &quot;CHN_ENG&quot;</span><br><span class="line">options[&quot;detect_direction&quot;] = &quot;true&quot;</span><br><span class="line">options[&quot;detect_language&quot;] = &quot;true&quot;</span><br><span class="line">options[&quot;probability&quot;] = &quot;true&quot;</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot; 带参数调用通用文字识别, 图片参数为远程url图片 &quot;&quot;&quot;</span><br><span class="line">client.basicGeneralUrl(url, options)</span><br></pre></td></tr></table></figure><p>返回如示例的json字符串</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;log_id&quot;</span>: <span class="number">2471272194</span>,</span><br><span class="line"><span class="attr">&quot;words_result_num&quot;</span>: <span class="number">2</span>,</span><br><span class="line"><span class="attr">&quot;words_result&quot;</span>:</span><br><span class="line">    [</span><br><span class="line">        &#123;<span class="attr">&quot;words&quot;</span>: <span class="string">&quot; TSINGTAO&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">&quot;words&quot;</span>: <span class="string">&quot;青島睥酒&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据需要输出</p><h6 id="参考代码："><a href="#参考代码：" class="headerlink" title="参考代码："></a>参考代码：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from aip import AipOcr</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">APP_ID &#x3D; &#39;-&#39;</span><br><span class="line">API_KEY &#x3D; &#39;-&#39;</span><br><span class="line">SECRET_KEY &#x3D; &#39;-&#39;</span><br><span class="line"></span><br><span class="line">client &#x3D; AipOcr(APP_ID, API_KEY, SECRET_KEY)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot; 读取图片 &quot;&quot;&quot;</span><br><span class="line">def get_file_content(filePath):</span><br><span class="line">    with open(filePath, &#39;rb&#39;) as fp:</span><br><span class="line">        return fp.read()</span><br><span class="line"></span><br><span class="line">image &#x3D; get_file_content(&#39;example.jpg&#39;)</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot; 调用通用文字识别, 图片参数为本地图片 &quot;&quot;&quot;</span><br><span class="line">#字典</span><br><span class="line">test&#x3D;client.basicGeneral(image)</span><br><span class="line">_list&#x3D;[]</span><br><span class="line">for i in test[&quot;words_result&quot;]:</span><br><span class="line">    _list.append(i[&quot;words&quot;])</span><br><span class="line">print(_list)</span><br></pre></td></tr></table></figure><h2 id="图像识别"><a href="#图像识别" class="headerlink" title="图像识别"></a>图像识别</h2><p>步骤如上</p><p>参考代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from aip import AipImageClassify</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def ImageClassify(path)</span><br><span class="line">    APP_ID &#x3D; &#39;23562841&#39;</span><br><span class="line">    API_KEY &#x3D; &#39;wetvhDhGk8N8gMhI6tFW5ujI&#39;</span><br><span class="line">    SECRET_KEY &#x3D; &#39;DgSpDQ9sZAgAEDtQLcM4YH2Bdtv7Yya7&#39;</span><br><span class="line">    </span><br><span class="line">    def get_file_content(filePath):</span><br><span class="line">    with open(filePath, &#39;rb&#39;) as fp:</span><br><span class="line">        return fp.read()</span><br><span class="line"></span><br><span class="line">    client &#x3D; AipImageClassify(APP_ID, API_KEY, SECRET_KEY)</span><br><span class="line">    #image &#x3D; get_file_content(&#39;example1.jpg&#39;)</span><br><span class="line">    image &#x3D; get_file_content(path)</span><br><span class="line">    test&#x3D;client.advancedGeneral(image)</span><br><span class="line">    test1&#x3D;test[&quot;result&quot;]</span><br><span class="line">    return test1[0][&quot;keyword&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;百度图像、文字识别等api调用封装&lt;/p&gt;
&lt;p&gt;python内封装&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://miaomiao7.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>Django初学习三</title>
    <link href="https://miaomiao7.github.io/2021/04/23/django%E5%88%9D%E5%AD%A6%E4%B9%A0%E4%BA%8C/"/>
    <id>https://miaomiao7.github.io/2021/04/23/django%E5%88%9D%E5%AD%A6%E4%B9%A0%E4%BA%8C/</id>
    <published>2021-04-23T14:03:46.000Z</published>
    <updated>2021-04-23T14:30:54.818Z</updated>
    
    <content type="html"><![CDATA[<p>一、<br>1.数据库配置文件<br>2.安装pymysql<br>3.启用pymysql</p><p>二、<br>1.创建模块<br>然后在设置(INSTALLED_APPS)中启用app</p><p>2.创建用户模型<br>3.确认，自动建表</p><span id="more"></span><h2 id="一-连接MySQL"><a href="#一-连接MySQL" class="headerlink" title="一 连接MySQL"></a>一 连接MySQL</h2><h4 id="1-安装pymysql"><a href="#1-安装pymysql" class="headerlink" title="1.安装pymysql"></a>1.安装pymysql</h4><p>在django中使用MySQL依赖于pymysql库</p><blockquote><p>在文件目录下<code> pip install pymysql</code></p></blockquote><h4 id="2-配置数据库"><a href="#2-配置数据库" class="headerlink" title="2.配置数据库"></a>2.配置数据库</h4><p>settings.py-&gt;设置</p><p>在mysql-连接信息里查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DATABASES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;HOST&#39;: &#39;主机名&#39;,</span><br><span class="line">        &#39;PORT&#39;: 端口,</span><br><span class="line">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,# 数据库引擎</span><br><span class="line">        &#39;NAME&#39;: &#39;django&#39;,</span><br><span class="line">        &#39;USER&#39;: &#39;root&#39;,</span><br><span class="line">        &#39;PASSWORD&#39;: &#39;---&#39;,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-启用pymysql"><a href="#3-启用pymysql" class="headerlink" title="3.启用pymysql"></a>3.启用pymysql</h4><p>_ init_.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h2 id="二-创建数据库"><a href="#二-创建数据库" class="headerlink" title="二 创建数据库"></a>二 创建数据库</h2><h4 id="1-创建模块"><a href="#1-创建模块" class="headerlink" title="1.创建模块"></a>1.创建模块</h4><blockquote><p><code>python manage.py startapp</code> + 名字</p></blockquote><img src="https://i.loli.net/2021/04/23/VbniXCUfk54Psjg.png" alt="image-20210423222244863" style="zoom:67%;" /><h4 id="2-启用app"><a href="#2-启用app" class="headerlink" title="2.启用app"></a>2.启用app</h4><p>settings.py</p><p>可直接引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS &#x3D; [</span><br><span class="line">    &#39;MainModule&#39;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="3-创建用户模型"><a href="#3-创建用户模型" class="headerlink" title="3.创建用户模型"></a>3.创建用户模型</h4><p>models.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">#建表</span><br><span class="line">class User(models.Model):</span><br><span class="line">#属性</span><br><span class="line">    id &#x3D; models.AutoField(primary_key&#x3D;True)</span><br><span class="line">    username &#x3D; models.CharField(max_length&#x3D;200)</span><br><span class="line">    password &#x3D; models.CharField(max_length&#x3D;200)</span><br><span class="line">    email &#x3D; models.CharField(max_length&#x3D;200, null&#x3D;True)</span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br></pre></td></tr></table></figure><p>django 全部model类型参考：<a href="https://www.cnblogs.com/wt869054461/p/4014271.html">https://www.cnblogs.com/wt869054461/p/4014271.html</a></p><p><code>null=True</code>如果没有null可以为空，不能为空</p><h4 id="4-确认，自动建表"><a href="#4-确认，自动建表" class="headerlink" title="4.确认，自动建表"></a>4.确认，自动建表</h4><blockquote><p><code>python manage.py makemigrations</code><br><code>python manage.py migrate</code></p></blockquote><p>建好了</p><p><img src="https://i.loli.net/2021/04/23/UKwhn4J9idzcYv2.png" alt="image-20210423222936906"></p><p>有些表是django自动建的</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一、&lt;br&gt;1.数据库配置文件&lt;br&gt;2.安装pymysql&lt;br&gt;3.启用pymysql&lt;/p&gt;
&lt;p&gt;二、&lt;br&gt;1.创建模块&lt;br&gt;然后在设置(INSTALLED_APPS)中启用app&lt;/p&gt;
&lt;p&gt;2.创建用户模型&lt;br&gt;3.确认，自动建表&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://miaomiao7.github.io/categories/python/"/>
    
    <category term="Django" scheme="https://miaomiao7.github.io/categories/python/Django/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://miaomiao7.github.io/2021/04/23/andriod%E5%9F%BA%E7%A1%80/"/>
    <id>https://miaomiao7.github.io/2021/04/23/andriod%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-23T11:45:49.702Z</published>
    <updated>2021-04-23T11:45:49.702Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Django初学习二</title>
    <link href="https://miaomiao7.github.io/2021/04/23/django%E5%88%9D%E5%AD%A6%E4%B9%A0/"/>
    <id>https://miaomiao7.github.io/2021/04/23/django%E5%88%9D%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-04-23T05:00:46.000Z</published>
    <updated>2021-04-23T06:08:13.456Z</updated>
    
    <content type="html"><![CDATA[<p>HttpResponse</p><p>JsonResponse</p><p>render</p><span id="more"></span><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>+++</p><p>django是MVC框架，</p><p>用户、路由、函数</p><p>路由-&gt;urls.py</p><p>函数-&gt;view.py</p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20210423130913795.png" alt="image-20210423130913795" style="zoom:50%;" /><p>特点：实时刷新</p><h3 id="二-urls-py"><a href="#二-urls-py" class="headerlink" title="二 urls.py"></a>二 urls.py</h3><p>+++</p><p>引用视图层view.py，</p><p>相对路径，<code>.</code>表示当前文件夹</p><blockquote><p><u><code>/</code>在后</u></p></blockquote><p><code>view.index</code> 引用函数</p><blockquote><p>.index 无（）</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">from . import view</span></span><br><span class="line"></span><br><span class="line"><span class="xml">urlpatterns = [</span></span><br><span class="line"><span class="xml">    path(&quot;test/&quot;, view.index)</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure><h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>+++</p><ul><li><h5 id="HttpResponse"><a href="#HttpResponse" class="headerlink" title="HttpResponse"></a>HttpResponse</h5></li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">from django.http import HttpResponse</span></span><br></pre></td></tr></table></figure><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">def index(request):</span></span><br><span class="line"><span class="xml">     return HttpResponse(&quot;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Django!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&quot;)</span></span><br></pre></td></tr></table></figure><p>返回HTML格式</p><p>结果：</p><p><img src="https://i.loli.net/2021/04/23/oTRWHfnlNGr6JKh.png" alt="image-20210423132620572"></p><ul><li><h5 id="JsonResponse"><a href="#JsonResponse" class="headerlink" title="JsonResponse"></a>JsonResponse</h5></li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">from django.http import HttpResponse, JsonResponse</span></span><br></pre></td></tr></table></figure><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">def index(request):</span></span><br><span class="line"><span class="xml">    # return JsonResponse(&quot;<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Django!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>&quot;,safe=False)</span></span><br></pre></td></tr></table></figure><p>返回json字符串</p><p>如果不是严格的json数据，需要<code>safe=False</code>才能正常运行</p><p>结果：</p><p><img src="https://i.loli.net/2021/04/23/QV9pvoUHTKaFfEP.png" alt="image-20210423132706176"></p><ul><li><h5 id="render"><a href="#render" class="headerlink" title="render"></a>render</h5></li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">from django.shortcuts import render</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def index(request):</span><br><span class="line">    return render(request, &quot;index&#x2F;index.html&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def index(request):</span><br><span class="line">    return render(request, &quot;index&#x2F;index.html&quot;, &#123;&quot;title&quot;: &quot;Django学习&quot;, &quot;date&quot;: &quot;4.23&quot;&#125;)</span><br></pre></td></tr></table></figure><p>第一个参数：函数传入的值request</p><p>第一个参数：函数传入的值request</p><p>第二个参数：模板文件</p><p><img src="https://i.loli.net/2021/04/23/A5DmS8Bwa6TMgCe.png" alt="image-20210423133105929"></p><p>只写入两个参数，是静态网页</p><p>——————</p><p>第三个参数：实现动态填入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- index.html --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; date &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; date &#125;&#125;&lt;&#x2F;p&gt;&lt;p&gt;&#123;&#123; date &#125;&#125;&lt;&#x2F;p&gt;&lt;p&gt;&#123;&#123; date &#125;&#125;&lt;&#x2F;p&gt;&lt;p&gt;&#123;&#123; date &#125;&#125;&lt;&#x2F;p&gt;&lt;p&gt;&#123;&#123; date &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>只是调用字典</p><p><code> &#123;&#123;键&#125;&#125;</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;HttpResponse&lt;/p&gt;
&lt;p&gt;JsonResponse&lt;/p&gt;
&lt;p&gt;render&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://miaomiao7.github.io/categories/python/"/>
    
    <category term="Django" scheme="https://miaomiao7.github.io/categories/python/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL基础知识</title>
    <link href="https://miaomiao7.github.io/2021/04/22/sql%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://miaomiao7.github.io/2021/04/22/sql%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2021-04-22T12:06:46.000Z</published>
    <updated>2021-04-23T02:46:29.058Z</updated>
    
    <content type="html"><![CDATA[<p>根据教学版数据库系统概念</p><span id="more"></span><h3 id="第二章-关系模型介绍"><a href="#第二章-关系模型介绍" class="headerlink" title="第二章 关系模型介绍"></a>第二章 关系模型介绍</h3><p>关系-&gt;表</p><p>元组-&gt;行</p><p>属性-&gt;列</p><p>该属性的域（原子的）</p><p>超码</p><p>候选码</p><p>主码</p><p>外码</p><p>模式图</p><p>在SQL中，谓词就是返回值为真值的函数。</p><h4 id="3-9-数据库的修改"><a href="#3-9-数据库的修改" class="headerlink" title="3.9 数据库的修改"></a>3.9 数据库的修改</h4><h5 id="1-删除"><a href="#1-删除" class="headerlink" title="1. 删除"></a>1. 删除</h5><p>只能删除整个元组，不能删除某些属性的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 关系</span><br><span class="line"><span class="keyword">where</span> 谓词</span><br></pre></td></tr></table></figure><p>无where删除所有元组，关系成空</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> instructor</span><br><span class="line"><span class="keyword">where</span> dept_name<span class="operator">=</span><span class="string">&#x27;Finance&#x27;</span>;</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> instructor</span><br><span class="line"><span class="keyword">where</span> salary <span class="keyword">between</span> <span class="number">13000</span> <span class="keyword">and</span> <span class="number">15000</span>;</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> instructor</span><br><span class="line"><span class="keyword">where</span> dept_name <span class="keyword">in</span>(<span class="keyword">select</span> dept_name</span><br><span class="line">                   <span class="keyword">from</span> department</span><br><span class="line">                   <span class="keyword">where</span> building<span class="operator">=</span><span class="string">&#x27;Watson&#x27;</span>);</span><br><span class="line"><span class="comment">---</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> instructor</span><br><span class="line"><span class="keyword">where</span> salary<span class="operator">&lt;</span>(<span class="keyword">select</span> <span class="built_in">avg</span>(salary)</span><br><span class="line">             <span class="keyword">from</span> instructor);</span><br></pre></td></tr></table></figure><h5 id="2-插入"><a href="#2-插入" class="headerlink" title="2. 插入"></a>2. 插入</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> __values();</span><br></pre></td></tr></table></figure><p>select对应values:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into instructor</span><br><span class="line">select ID,name,dept_name,18000;</span><br><span class="line">from student</span><br><span class="line">where dept_name&#x3D;&#39;Music&#39; and tot_cred&gt;144;</span><br></pre></td></tr></table></figure><p>null</p><h5 id="3-更新"><a href="#3-更新" class="headerlink" title="3. 更新"></a>3. 更新</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update instructor</span><br><span class="line"><span class="keyword">set</span> salary<span class="operator">=</span>salary<span class="operator">*</span><span class="number">1.05</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">update instructor</span><br><span class="line"><span class="keyword">set</span> salary<span class="operator">=</span>salary<span class="operator">*</span><span class="number">1.05</span>;</span><br><span class="line"><span class="keyword">where</span> salary<span class="operator">&lt;</span><span class="number">70000</span>;</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">update instructor</span><br><span class="line"><span class="keyword">set</span> salary<span class="operator">=</span>salary<span class="operator">*</span><span class="number">1.05</span>;</span><br><span class="line"><span class="keyword">where</span> salary<span class="operator">&lt;</span>(<span class="keyword">select</span> <span class="built_in">avg</span>(salary)</span><br><span class="line">             <span class="keyword">from</span> instructor);</span><br><span class="line"><span class="comment">---注意顺序</span></span><br><span class="line">update instructor</span><br><span class="line"><span class="keyword">set</span> salary<span class="operator">=</span>salary<span class="operator">*</span><span class="number">1.03</span>;</span><br><span class="line"><span class="keyword">where</span> salary<span class="operator">&gt;</span><span class="number">10000</span>;</span><br><span class="line">update instructor</span><br><span class="line"><span class="keyword">set</span> salary<span class="operator">=</span>salary<span class="operator">*</span><span class="number">1.05</span>;</span><br><span class="line"><span class="keyword">where</span> salary<span class="operator">&lt;=</span><span class="number">10000</span>;</span><br><span class="line"><span class="comment">---case</span></span><br><span class="line">update instructor</span><br><span class="line"><span class="keyword">set</span> salary<span class="operator">=</span><span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span> salar<span class="operator">&lt;=</span><span class="number">10000</span> <span class="keyword">then</span> salary<span class="operator">*</span><span class="number">1.05</span>;</span><br><span class="line"><span class="keyword">else</span> salary<span class="operator">*</span><span class="number">1.03</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h6 id="case"><a href="#case" class="headerlink" title="case:"></a>case:</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span></span><br><span class="line"><span class="keyword">when</span> pred1 <span class="keyword">then</span> result1</span><br><span class="line"><span class="keyword">when</span> pred2 <span class="keyword">then</span> result2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">when</span> predn <span class="keyword">then</span> resultn</span><br><span class="line"><span class="keyword">else</span> result0;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;根据教学版数据库系统概念&lt;/p&gt;</summary>
    
    
    
    <category term="SQL" scheme="https://miaomiao7.github.io/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Django安装</title>
    <link href="https://miaomiao7.github.io/2021/04/21/Django%E5%AE%89%E8%A3%85/"/>
    <id>https://miaomiao7.github.io/2021/04/21/Django%E5%AE%89%E8%A3%85/</id>
    <published>2021-04-21T15:54:46.000Z</published>
    <updated>2021-04-23T06:03:17.044Z</updated>
    
    <content type="html"><![CDATA[<p>运行第一个Django程序</p><span id="more"></span><h3 id="一、安装Python"><a href="#一、安装Python" class="headerlink" title="一、安装Python"></a>一、安装Python</h3><p><a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a></p><p>建议不要下最新版,这里安装了3.8</p><p>注意要加到Path里</p><p>查看版本号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python </span><br></pre></td></tr></table></figure><h3 id="二、pip换源"><a href="#二、pip换源" class="headerlink" title="二、pip换源"></a>二、pip换源</h3><p>这里使用清华源</p><p>升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pip -U</span><br><span class="line">pip config set global.index-url https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure><p>//如果您到 pip 默认源的网络连接较差，临时使用本镜像站来升级 pip：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple pip -U</span><br></pre></td></tr></table></figure><p>小问题:</p><p><img src="https://i.loli.net/2021/04/23/wTY7VSr16EsjHPd.png" alt="image-20210421233304857"></p><p>加–user就可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pip -U --user</span><br></pre></td></tr></table></figure><h3 id="三：下载对应的版本的Django。"><a href="#三：下载对应的版本的Django。" class="headerlink" title="三：下载对应的版本的Django。"></a>三：下载对应的版本的Django。</h3><p>查看对应的可以安装的Django版本：</p><p><a href="https://docs.djangoproject.com/en/dev/faq/install/#what-python-version-can-i-use-with-django">https://docs.djangoproject.com/en/dev/faq/install/#what-python-version-can-i-use-with-django</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django&#x3D;&#x3D;3.2</span><br></pre></td></tr></table></figure><p>安装参考：<a href="https://www.djangoproject.com/download/">https://www.djangoproject.com/download/</a></p><h3 id="四、下载并配置PyCharm"><a href="#四、下载并配置PyCharm" class="headerlink" title="四、下载并配置PyCharm"></a>四、下载并配置PyCharm</h3><p>安装专业版，学生可白嫖，免费试用30天</p><p>注：专业版和社区版可共存</p><img src="https://i.loli.net/2021/04/23/Gsbd439SURrDJvk.png" alt="image-20210421233947616" style="zoom:50%;" /><p>.py用vscode就可以，杀鸡。。。。。</p><p><img src="https://i.loli.net/2021/04/23/TLwmsCS2WlIuqJv.png" alt="image-20210421234255993"></p><p><strong>关于虚拟环境和系统环境：</strong></p><p>不能共存两个Python版本，这时就要用到虚拟环境</p><p>系统环境用于运行自己的项目</p><p>虚拟环境运行别人的</p><p>如果Interpreter什么都没有：添加：</p><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20210421234649829.png" alt="image-20210421234649829"></p><p>如果No interpreter,就要手动添加路径：</p><p><img src="https://i.loli.net/2021/04/23/p8zBrGW2lTVc3Jy.png" alt="image-20210421234812832"></p><p><strong>添加路径小知识</strong>：</p><p>用cmd运行Python</p><p><img src="https://i.loli.net/2021/04/23/PictnpeIgosz3Fk.png" alt="image-20210421234847738"></p><p>查看任务管理器：</p><p>这里是详细信息，</p><p>可以看到主程序</p><p>找到子程序</p><p>右键打开文件夹所在位置</p><p><img src="https://i.loli.net/2021/04/23/5CwSB6hsYT8RiXg.png" alt="image-20210421235006791"></p><p>复制路径，添加python.exe</p><p><img src="https://i.loli.net/2021/04/23/nbCYgQojTHNRKIp.png" alt="image-20210421235250329"></p><p><img src="https://i.loli.net/2021/04/23/dfhKZuDSvreCLak.png" alt="image-20210421235354962"></p><p>这样一个django项目就打开了！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;运行第一个Django程序&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://miaomiao7.github.io/categories/python/"/>
    
    <category term="Django" scheme="https://miaomiao7.github.io/categories/python/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>数据库作业</title>
    <link href="https://miaomiao7.github.io/2021/04/20/%E5%9B%9B/"/>
    <id>https://miaomiao7.github.io/2021/04/20/%E5%9B%9B/</id>
    <published>2021-04-20T13:33:46.000Z</published>
    <updated>2021-04-22T08:32:09.385Z</updated>
    
    <content type="html"><![CDATA[<p>数据库3-5作业加答案</p><span id="more"></span><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>找出Comp.Sci. 系开设的具有3个学分的课程名称。</p><p>select title</p><p>from course</p><p>where dept_name = ‘Comp. Sci.’</p><p>and credits = 3</p><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>找出名叫Einstein的教师所教的所有学生的ID，保证结果中没有重复。</p><p>select distinct student.ID</p><p>from student,takes,instructor,teaches</p><p>where </p><p>student.ID=takes.ID AND</p><p>instructor.ID=teaches.ID AND</p><p>takes.course_id=teaches.course_id AND</p><p>takes.sec_id=teaches.sec_id AND</p><p>takes.semester=teaches.semester AND</p><p>takes.year=teaches.year AND</p><p>instructor.name = ‘Einstein’;</p><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>找出教师的最高工资。</p><p>select max(salary)</p><p>from instructor;</p><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>找出工资最高的所有教师(可能有不止一位教师具有相同的工资)。</p><p>select ID, name</p><p>from instructor</p><p>where salary = (select max(salary) from instructor);</p><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>找出2019年秋季开设的每个课程段的选课人数。</p><p>select course_id, sec_id, count(ID)</p><p>from section natural join takes</p><p>where semester = ‘Autumn’</p><p>and year = 2019</p><p>group by course_id, sec_id;</p><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>从2019年秋季开设的所有课程段中，找出最多的选课人数。</p><p>select max(enrollment)</p><p>from (select count(ID) as enrollment</p><p>from section natural join takes</p><p>where semester = ‘Autumn’</p><p>and year = 2019</p><p>group by course_id, sec_id);</p><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>找出在2019年秋季拥有最多选课人数的课程段。</p><p>with sec_enrollment as (</p><p>select course_id, sec_id, count(ID) as enrollment</p><p>from section natural join takes</p><p>where semester = ‘Autumn’</p><p>and year = 2019</p><p>group by course_id, sec_id)</p><p>select course_id, sec_id</p><p>from sec_enrollment</p><p>where enrollment = (select max(enrollment) from sec_enrollment);</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>题目：</p><p>根据教材图3-18中的保险公司数据库，其中加下划线的是主码。为这个关系数据库构造出如下SQL查询。</p><p>找出2019年其车辆出过交通事故的人员总数。</p><p>参考答案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select count (distinct name)</span><br><span class="line">from accident, participated, person</span><br><span class="line">where accident.report_number &#x3D; participated.report_number</span><br><span class="line">and participated.driver_id &#x3D; person.driver_id</span><br><span class="line">and date between date ’2019-00-00’ and date ’2019-12-31’</span><br></pre></td></tr></table></figure><p>题目：</p><p>根据教材图3-18中的保险公司数据库，其中加下划线的是主码。为这个关系数据库构造出如下SQL查询。</p><p>找出和”John Smith” 的车有关的交通事故数量</p><p>参考答案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select count (*)</span><br><span class="line">from owns, participated, person</span><br><span class="line">where owns.license &#x3D; participated.license</span><br><span class="line">and owns.driver_id &#x3D; person.driver_id</span><br><span class="line">and person.name &#x3D; ’John Smith’</span><br></pre></td></tr></table></figure><p>根据教材图3-18中的保险公司数据库，其中加下划线的是主码。为这个关系数据库构造出如下SQL查询。</p><p>向数据库中增加一个新的事故，对每个必需的属性可以设定任意值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">insert into accident</span><br><span class="line">values (4007, ’2001-09-01’, ’Berkeley’);</span><br><span class="line"></span><br><span class="line">insert into participated</span><br><span class="line">select o.driver_id, c.license, 4007, 3000</span><br><span class="line">from person p, owns o, car c</span><br><span class="line">where p.name &#x3D; ’Jones’ and p.driver_id &#x3D; o.driver_id and</span><br><span class="line">o.license &#x3D; c.license and c.model &#x3D; ’Toyota’</span><br></pre></td></tr></table></figure><p>根据教材图3-18中的保险公司数据库，其中加下划线的是主码。为这个关系数据库构造出如下SQL查询。</p><p>对事故报告编号为”AR2197”中的车牌是”AABB2000”的车辆损坏保险费用更新到3000美元。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update participated</span><br><span class="line">set damage_amount&#x3D;3000</span><br><span class="line">where report_number&#x3D;&#39;AR2197&#39; and license&#x3D;&#39;AABB2000&#39;</span><br></pre></td></tr></table></figure><p>根据教材图3-18中的保险公司数据库，其中加下划线的是主码。为这个关系数据库构造出如下SQL查询。</p><p>删除“John Smith”拥有的马自达车(Mazda)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">delete car</span><br><span class="line">where model &#x3D; ’Mazda’ and license in</span><br><span class="line">(select license</span><br><span class="line">from person p, owns o</span><br><span class="line">where p.name &#x3D; ’John Smith’ and p.driver_id &#x3D; o.driver_id)</span><br></pre></td></tr></table></figure><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>找出所有至少选修了一门Comp.Sci.课程的学生姓名，保证结果中没有重复的姓名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select distinct name</span><br><span class="line">from  course ,takes,student</span><br><span class="line">where course.dept_name &#x3D; &#39;Comp. Sci.&#39;</span><br><span class="line">and course.course_id&#x3D;takes.course_id</span><br><span class="line">and student.id&#x3D;takes.id</span><br></pre></td></tr></table></figure><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>找出所有没有选修在2019年春季之前开设的任何课程的学生的ID和姓名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select id,name</span><br><span class="line">from  student</span><br><span class="line">where  not exists</span><br><span class="line">  (select *</span><br><span class="line">  from  takes</span><br><span class="line">  where year &lt;2019</span><br><span class="line">  and student.id&#x3D;takes.id)</span><br></pre></td></tr></table></figure><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>找出每个系教师的最高工资值。可以假设每个系至少有一位教师。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select dept_name,max(salary)</span><br><span class="line">from  instructor</span><br><span class="line">group by dept_name</span><br></pre></td></tr></table></figure><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>从前述查询所计算出的每个系最高工资中选出最低值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select min(max_salary)  </span><br><span class="line">from (select dept_name,max(salary) max_salary</span><br><span class="line">      from  instructor</span><br><span class="line">      group by dept_name)</span><br></pre></td></tr></table></figure><h2 id="五"><a href="#五" class="headerlink" title="五"></a>五</h2><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>显示所有教师的列表，列出他们的ID、姓名以及所讲授课程段的编号。</p><p>对于没有讲授任何课程段的<br>教师， 确保结果中出现他们的ID与姓名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ID, name,sec_id</span><br><span class="line">from instructor natural left outer join teaches；</span><br></pre></td></tr></table></figure><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>显示所有教师的列表，列出他们的ID、姓名以及所讲授课程段的数量。<br>对于没有讲授任何课程段的<br>教师，确保将课程段数量显示为0。<br>在你的查询中应该使用外连接，不能使用标量子查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select ID,name, count(sec_id) as Numberofsetions</span><br><span class="line">from instructor natural left outer join teaches</span><br><span class="line">group by ID,name</span><br></pre></td></tr></table></figure><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>使用标量子查询，不使用外连接写出上述查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select  ID,name,</span><br><span class="line">(select count(*) a from teaches T where T.id &#x3D; I.id) Numberofsetions</span><br><span class="line">from instructor I;</span><br></pre></td></tr></table></figure><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>显示2020年春季开设的所有课程的列表，包括讲授课程段的教师的姓名。如果一个课程段有不止一位教师讲授，那么有多少位教师，此课程段在结果中就出现多少次。如果一个课程段没有任何教师，它也要出现在结果中，相应的教师名置为“-“。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select course_id, seC_id, ID,decode(name, null, &#39;-&#39;, name) as name</span><br><span class="line">from (section natural left outer join teaches)</span><br><span class="line">natural left outer join instructor</span><br><span class="line">where semester&#x3D;&#39;Spring&#39; and year&#x3D; 2020;</span><br></pre></td></tr></table></figure><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>显示所有系的名称，以及该系中教师的总数，不能使用标量子查询。确保正确处理没有教师的系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select dept_name, count(ID)</span><br><span class="line">from department natural left outer join instructor</span><br><span class="line">group by dept_name;</span><br></pre></td></tr></table></figure><p>使用大学模式（参见教材第6版第2章），用SQL写出如下查询。</p><p>使用标量子查询，不使用外连接写出上述查询。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select dept_name, </span><br><span class="line">(select count(*) a from instructor i where i.dept_name&#x3D;d.dept_name ) Numberofinstructors</span><br><span class="line">from department d;</span><br></pre></td></tr></table></figure><p>假设给你一个关系grade_poins(grad_e,points)，它提供从takes关系中用字母表示的成绩等级到数字表示的得分之间的转换。例如，“A”等级可指定为对应于4分，“A-“对应于3.7分，“B+”对应于3.3分，“B”对应于3分，等等。学生在某门课程(课程段)上所获得的等级分值被定义为该课程段的学分乘以该生得到的成绩等级所对应的数字表示的得分。<br>给定上述关系和我们的大学模式，用SQL写出下面的每个查询。为简单起见，可以假设没有任何takes元组在grade上取null值。</p><p>根据ID为12345的学生所选修的所有课程，找出该生所获得的等级分值的总和。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(select sum(credits * points)</span><br><span class="line">from (takes natural join course) natural join grade_points</span><br><span class="line">whereID &#x3D; &#39;12345&#39;)</span><br><span class="line">union</span><br><span class="line">(select 0</span><br><span class="line">from student</span><br><span class="line">where takes.ID &#x3D; &#39;12345&#39; and</span><br><span class="line">not exists ( select * from takes where takes.ID &#x3D; &#39;12345&#39;))</span><br></pre></td></tr></table></figure><p>假设给你一个关系grade_poins(grad_e,points)，它提供从takes关系中用字母表示的成绩等级到数字表示的得分之间的转换。例如，“A”等级可指定为对应于4分，“A-“对应于3.7分，“B+”对应于3.3分，“B”对应于3分，等等。学生在某门课程(课程段)上所获得的等级分值被定义为该课程段的学分乘以该生得到的成绩等级所对应的数字表示的得分。<br>给定上述关系和我们的大学模式，用SQL写出下面的每个查询。为简单起见，可以假设没有任何takes元组在grade上取null值。</p><p>找出ID为12345的学生等级分值的平均值(GPA)，即用等级分值的总和除以相关课程学分的总和。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(select sum(credits * points)&#x2F;sum(credits) as GPA</span><br><span class="line">from (takes natural join course) natural join grade points</span><br><span class="line">where ID &#x3D; &#39;12345&#39;)</span><br><span class="line">union</span><br><span class="line">(select null as GPA</span><br><span class="line">from student</span><br><span class="line">where takes.ID &#x3D; &#39;12345&#39; and</span><br><span class="line">not exists ( select * from takes where takes.ID &#x3D; &#39;12345&#39;))</span><br></pre></td></tr></table></figure><p>假设给你一个关系grade_poins(grad_e,points)，它提供从takes关系中用字母表示的成绩等级到数字表示的得分之间的转换。例如，“A”等级可指定为对应于4分，“A-“对应于3.7分，“B+”对应于3.3分，“B”对应于3分，等等。学生在某门课程(课程段)上所获得的等级分值被定义为该课程段的学分乘以该生得到的成绩等级所对应的数字表示的得分。<br>给定上述关系和我们的大学模式，用SQL写出下面的每个查询。为简单起见，可以假设没有任何takes元组在grade上取null值。</p><p>找出每个学生的ID和等级分值的平均值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(select ID, sum(credits * points)&#x2F;sum(credits) as GPA</span><br><span class="line">from (takes natural join course) natural join grade points</span><br><span class="line">group by ID)</span><br><span class="line">union</span><br><span class="line">(select ID, null as GPA</span><br><span class="line">from student</span><br><span class="line">where not exists ( select * from takes where takes.ID &#x3D; student.ID))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据库3-5作业加答案&lt;/p&gt;</summary>
    
    
    
    <category term="SQL" scheme="https://miaomiao7.github.io/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>《阿加莎·克里斯蒂自传》</title>
    <link href="https://miaomiao7.github.io/2021/04/20/%E3%80%8A%E9%98%BF%E5%8A%A0%E8%8E%8E%C2%B7%E5%85%8B%E9%87%8C%E6%96%AF%E8%92%82%E8%87%AA%E4%BC%A0%E3%80%8B/"/>
    <id>https://miaomiao7.github.io/2021/04/20/%E3%80%8A%E9%98%BF%E5%8A%A0%E8%8E%8E%C2%B7%E5%85%8B%E9%87%8C%E6%96%AF%E8%92%82%E8%87%AA%E4%BC%A0%E3%80%8B/</id>
    <published>2021-04-20T06:15:07.000Z</published>
    <updated>2021-04-21T08:33:35.587Z</updated>
    
    <content type="html"><![CDATA[<p>02</p><span id="more"></span><p>《阿加莎·克里斯蒂自传》</p><p>​        书粉看阿婆自传要看杀人桥段的灵感来源、八卦、真相，但我想对阿婆一知半解，甚至只闻其名的人，看那些鲜活的旧时代风貌也会津津有味。</p><p>​        她记性真是好得惊人，自传到60岁才写，但写得都像刚发生的事。童年的家长里短就写了几百页；又是讲故事的天才，细节生动又有刻薄好笑的闲笔：比如写女生在公共海滩要穿羊毛衣和丝袜（当时露腿是下流的）；但丝袜一下水就滑，就算没冲跑，上岸时也像拖着两条海带。</p><p>​        不提那几百本著作，她这辈子的经历也刺激我生出“啊！想成为她那样的人”的妄想；她年纪轻轻环游世界、坐飞机，往来无白丁，一部分当然也和烂船尚有三根钉的中产家世有关，但有些话依然适用于任何女性：</p><ul><li> 拥有始终热爱的兴趣。阿婆说自己从来没有为“无所事事”苦恼过；她把爱胡思乱想的“毛病”很具体地变成创造力，写诗、剧本，都是后来写小说的基础。</li></ul><p>  ​        她不觉得女人工作就是光荣，劳动本身和光荣没半毛钱关系，就是辛苦谋生而已。但人不能闲着，就算家庭妇女依然能因为饱读诗书、通晓乐理、做出艺术品般的手工活值得敬仰。</p><ul><li><p> 保持好奇，一直学习。她奉行活到老学到老，数学、声乐玩到职业水平，战时学会护理和药理（她最爱写下毒杀人，还被科学界夸过专业）、中年跟着丈夫学会考古，车也开得很猛。</p></li><li><p>和能互相尊重的人相爱。她生在欧洲战前的黄金时代，那是教养被严肃对待、仆人都不会被看轻的时代；父母恩爱又很开明，“尊重”是爱的基础：</p><p>“婚姻的意义不仅仅是拥有一个爱人。尊重是必要的，却不能和赞赏混为一谈。”</p></li><li><p> 买房！阿婆一家三代女性都超爱买房，一方面是理财一方面她就是喜欢搬家，也倒是因此在战后生活水平基本完全没受影响。</p></li></ul><p>​        阿婆说“人生中最大的错误莫过于所见所闻不得时”。深以为然，刻板的教育可能会耽误一个人错过莎士比亚或数学的趣味。她很幸运有个很在乎教育质量的母亲。</p><p>​        母亲就是那种旧时代的坚韧女性，聪明，心思清明，家道中落依然坚持到处找师资和氛围最适合她的学校进修；战时她曾经百无聊赖，母亲把本子硬塞她手里鼓励她写小说，后来才有了波洛和马普尔小姐。</p><p>​       我状态消沉时会一遍一遍看《大侦探波洛》，阿婆有部纪录片里一个老读者说当年二战她躲在防空洞时，看“波洛”是唯一的解压良药。我想大概因为她除了给予读者悬念、刺激，还有“一切问题皆有答案”、公义终会到来的希望。</p><p>​       这本书终了讲的也是，即时经历至亲过世、家道中落、丈夫出轨、两次世界大战，一个女人始终可以保持活力和自洽的精神自由，并且无条件相信活着是美好的。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;02&lt;/p&gt;</summary>
    
    
    
    <category term="碎" scheme="https://miaomiao7.github.io/categories/%E7%A2%8E/"/>
    
    <category term="摘录" scheme="https://miaomiao7.github.io/categories/%E7%A2%8E/%E6%91%98%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>蓝桥杯真题</title>
    <link href="https://miaomiao7.github.io/2021/04/18/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    <id>https://miaomiao7.github.io/2021/04/18/%E8%93%9D%E6%A1%A5%E6%9D%AF/</id>
    <published>2021-04-18T13:56:11.000Z</published>
    <updated>2021-04-23T06:07:03.508Z</updated>
    
    <content type="html"><![CDATA[<p>2017-2020部分真题</p><span id="more"></span><h2 id="2020年第十一届C-C-B组第一场"><a href="#2020年第十一届C-C-B组第一场" class="headerlink" title="2020年第十一届C/C++ B组第一场"></a>2020年第十一届C/C++ B组第一场</h2><h3 id="×第一题：跑步训练（5分）"><a href="#×第一题：跑步训练（5分）" class="headerlink" title="×第一题：跑步训练（5分）"></a>×第一题：跑步训练（5分）</h3><p>题目描述<br>小明要做一个跑步训练。 初始时，小明充满体力，体力值计为 10000。如果小明跑步，每分钟损耗600的体力。如果小明休息，每分钟增加 300 的体力。体力的损耗和增加都是均匀变化的。<br>小明打算跑一分钟、休息一分钟、再跑一分钟、再休息一分钟……如此循环。如果某个时刻小明的体力到达0，他就停止锻炼。 请问小明在多久后停止锻炼。<br>为了使答案为整数，请以秒为单位输出答案。 答案中只填写数，不填写单位。</p><p>以秒为单位输出答案</p><p>如果小明跑步，每分钟损耗600的体力。10/s</p><p>如果小明休息，每分钟增加 300 的体力。5/s</p><blockquote><p>× 思路：</p><p>10000/300=33···100</p><p>100/10=10s</p><p>33*60 *2=3960+10=3970</p><p>错！</p></blockquote><p>√ 思路：</p><p>32*300=9600</p><p>400/10=40</p><p>32*120+40=3880</p><p>不够600</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">int n&#x3D;10000,time&#x3D;0;</span><br><span class="line">while(n)&#123;</span><br><span class="line">if(n&lt;600)&#123;</span><br><span class="line">time&#x3D;time+n&#x2F;10;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">n-&#x3D;300;</span><br><span class="line">time+&#x3D;120;       </span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;time;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>答案：3880</p></blockquote><h3 id="×第二题：纪念日（5分）"><a href="#×第二题：纪念日（5分）" class="headerlink" title="×第二题：纪念日（5分）"></a>×第二题：纪念日（5分）</h3><p>题目描述<br>2020 年 7 月 1 日是中国 共 产 党 成立 99 周年纪念日。<br>中国 共 产 党 成立于 1921 年 7 月 23 日。<br>请问从 1921 年 7 月 23 日中午 12 时到 2020 年 7 月 1 日中午 12 时一共包含多少分钟？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> day=<span class="number">30</span>*<span class="number">2</span>+<span class="number">31</span>*<span class="number">3</span>+<span class="number">8</span>+<span class="number">182</span>;</span><br><span class="line"><span class="comment">//135 31 46 30 2 29 2月平年28，闰年29天 ，2020闰年 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">1922</span>;y&lt;<span class="number">2020</span>;y++)&#123;</span><br><span class="line"><span class="comment">//if((y%4==0&amp;&amp;y&amp;100!=0)||(y%400==0))</span></span><br><span class="line"><span class="keyword">if</span>((y%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;y%<span class="number">100</span>!=<span class="number">0</span>)||(y%<span class="number">400</span>==<span class="number">0</span>))<span class="comment">//一步错 </span></span><br><span class="line">day+=<span class="number">366</span>;</span><br><span class="line"><span class="keyword">else</span> day+=<span class="number">365</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> hour=day*<span class="number">24</span>+<span class="number">24</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> min=hour*<span class="number">60</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>,day,hour,min);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种,减去多余天数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int yearDay(int year)</span><br><span class="line">&#123;</span><br><span class="line">if ((year%4&#x3D;&#x3D;0&amp;&amp;year%100!&#x3D;0) || (year%400&#x3D;&#x3D;0))</span><br><span class="line">&#123;</span><br><span class="line">return 366;</span><br><span class="line">&#125;</span><br><span class="line">return 365;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int time &#x3D; 0;</span><br><span class="line">for(int i &#x3D; 1922; i &lt;&#x3D; 2020; i++)</span><br><span class="line">&#123;</span><br><span class="line">time +&#x3D; yearDay(i);</span><br><span class="line">&#125;</span><br><span class="line">time -&#x3D; 22; &#x2F;&#x2F;覆盖，7月23日中午12时到7月1日中午12时 共23天，2020年2月多一天，-23+1 </span><br><span class="line">cout &lt;&lt; time*24*60 &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ol start="3"><li>EXCEL</li></ol><p><img src="https://i.loli.net/2021/04/23/rLNzQgU3oaHeV6s.png" alt="image-20210408154846049"></p><p>4.</p><img src="https://i.loli.net/2021/04/23/LFeqP2zgHBk8UQi.png" alt="image-20210409161323221" style="zoom:50%;" /><h3 id="第三题：合并检测（10分）"><a href="#第三题：合并检测（10分）" class="headerlink" title="-第三题：合并检测（10分）"></a>-第三题：合并检测（10分）</h3><p>题目描述<br>新冠疫情由新冠病毒引起，最近在 A 国蔓延，为了尽快控制疫情， A 国准备给大量民众进病毒核酸检测。<br>然而，用于检测的试剂盒紧缺。<br>为了解决这一困难，科学家想了一个办法：合并检测。即将从多个人（ k 个）采集的标本放到同一个试剂盒中进行检测。如果结果为阴性，则说明这 k 个人都是阴性，用一个试剂盒完成了 k 个人的检测。如果结果为阳性，则说明至少有一个人为阳性，需要将这 k 个人的样本全部重新独立检测（从理论上看，如果检测前 k−1 个人都是阴性可以推断出第 k 个人是阳性，但是在实际操作中不会利用此推断，而是将 k 个人独立检测），加上最开始的合并检测，一共使用了 k+1 个试剂盒完成了 k 个人的检测。<br>A 国估计被测的民众的感染率大概是  1%，呈均匀分布。请问 k 取多少能最节省试剂盒？</p><blockquote><p>答案：10</p></blockquote><p><img src="https://i.loli.net/2021/04/23/rstg4mM687ecBXo.png" alt="image-20210408162025482"></p><p>程序不会写/(ㄒoㄒ)/</p><h3 id="第四题：REPEAT-程序（10分）"><a href="#第四题：REPEAT-程序（10分）" class="headerlink" title="-第四题：REPEAT 程序（10分）"></a>-第四题：REPEAT 程序（10分）</h3><p><strong>【题目描述】</strong></p><p>附件 prog.txt 中是一个用某种语言写的程序。<br>其中 REPEAT k 表示一个次数为 k 的循环。循环控制的范围由缩进表达，从次行开始连续的缩进比该行多的（前面的空白更长的）为循环包含的内容。<br>例如如下片段：</p><blockquote><p>REPEAT 2:<br> A = A + 4<br> REPEAT 5:<br>  REPEAT 6:<br>   A = A + 5<br>  A = A + 7<br> A = A + 8<br>A = A + 9</p></blockquote><p>该片段中从 A = A + 4 所在的行到 A = A + 8 所在的行都在第一行的循环两次中。</p><p>REPEAT 6: 所在的行到 A = A + 7 所在的行都在 REPEAT 5: 循环中。</p><p>A = A + 5 实际总共的循环次数是 2 × 5 × 6 = 60 次。</p><p>请问该程序执行完毕之后，A 的值是多少？</p><p><strong>【答案提交】</strong></p><p>这是一道结果填空题，你只需要算出结果后提交即可。本题的结果为一个 整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">int a&#x3D;0;</span><br><span class="line">for(int i&#x3D;0;i&lt;2;i++)&#123;</span><br><span class="line">a+&#x3D;4;</span><br><span class="line">for(int j&#x3D;0;j&lt;5;j++)&#123;</span><br><span class="line">for(int k&#x3D;0;k&lt;6;k++)&#123;</span><br><span class="line">a+&#x3D;5;</span><br><span class="line">&#125;</span><br><span class="line">a+&#x3D;7;</span><br><span class="line">&#125;</span><br><span class="line">a+&#x3D;8;</span><br><span class="line">&#125;</span><br><span class="line">a+&#x3D;9;</span><br><span class="line">cout&lt;&lt;a;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>即 4* 2+5* 6×5×2+7* 5×2+8* 2+9</p><p>然而，附件：</p><blockquote><p>A = 0<br>REPEAT 2:<br>    A = A + 4<br>    REPEAT 5:<br>        REPEAT 6:<br>    ·······</p><p>略去，1001行</p><p>具体参考：<a href="https://qiguanjie.blog.csdn.net/article/details/107188059">https://qiguanjie.blog.csdn.net/article/details/107188059</a></p></blockquote><p>文件处理问题</p><h6 id="打开文件：freopen-quot-prog-txt-quot-quot-r-quot-stdin"><a href="#打开文件：freopen-quot-prog-txt-quot-quot-r-quot-stdin" class="headerlink" title="打开文件：freopen(&quot;prog.txt&quot;, &quot;r&quot;, stdin);"></a>打开文件：<code>freopen(&quot;prog.txt&quot;, &quot;r&quot;, stdin);</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ofstream ofile;               &#x2F;&#x2F;定义输出文件</span><br><span class="line">ofile.open(&quot;d:\\myfile.txt&quot;);     &#x2F;&#x2F;作为输出文件打开</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">2020</span>];<span class="comment">//每行的字符串 </span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2020</span>], b[<span class="number">2020</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;prog.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);<span class="comment">//打开文件 </span></span><br><span class="line">    <span class="keyword">int</span> line = <span class="number">0</span>, a_value = <span class="number">0</span>, mult = <span class="number">1</span>;<span class="comment">//line是层数，a_value是当前A值，mult是倍数 </span></span><br><span class="line">    <span class="built_in">gets</span>(s); <span class="comment">// 读走第一行的 A = 0</span></span><br><span class="line">    a[line] = <span class="number">-1</span>, b[line] = <span class="number">1</span>; <span class="comment">// a是所在层数的空格数，b保存循环总数 </span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">gets</span>(s)) &#123;       <span class="comment">//接下来一行一行读取 </span></span><br><span class="line">        <span class="keyword">int</span> s_length = <span class="built_in">strlen</span>(s), space = <span class="number">0</span>;       <span class="comment">//n字符串长度，p空格数 </span></span><br><span class="line">        <span class="keyword">while</span> (s[space] == <span class="string">&#x27; &#x27;</span>) <span class="comment">// 计算空格数 </span></span><br><span class="line">        &#123;</span><br><span class="line">         space++;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (a[line] &gt;= space)<span class="comment">//上一行的空格比这行多 </span></span><br><span class="line"> &#123;</span><br><span class="line">   mult /= b[line--];</span><br><span class="line"> &#125;</span><br><span class="line">        <span class="keyword">if</span> (s[s_length - <span class="number">1</span>] == <span class="string">&#x27;:&#x27;</span>) &#123; <span class="comment">// 当前是REPEAT 行</span></span><br><span class="line">            <span class="keyword">int</span> num = s[s_length - <span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>;<span class="comment">//获取当前行倒数第二位</span></span><br><span class="line">            line = line + <span class="number">1</span>;     <span class="comment">//层数加一 </span></span><br><span class="line">            mult *= num;</span><br><span class="line">            a[line] = space, b[line] = num;</span><br><span class="line">           </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;                           <span class="comment">//当前是A行 </span></span><br><span class="line">            <span class="keyword">int</span> number= s[s_length - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;<span class="comment">//获取当前行最后一位 </span></span><br><span class="line">            a_value += number * mult;    <span class="comment">//给A赋值     </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;a_value&lt;&lt;endl;<span class="comment">//输出A值 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="试题-E-矩阵"><a href="#试题-E-矩阵" class="headerlink" title="-试题 E: 矩阵"></a>-试题 E: 矩阵</h3><p>【问题描述】</p><p>把 1 ∼ 2020 放在 2 × 1010 的矩阵里。要求同一行中右边的比左边大，同一 列中下边的比上边的大。一共有多少种方案？</p><p>答案很大，你只需要给出方案数除以 2020 的余数即可。</p><p><strong>【答案提交】</strong></p><p>这是一道结果填空题，你只需要算出结果后提交即可。本题的结果为一个 整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p><p>+++</p><p><a href="https://blog.csdn.net/subcqfq/article/details/108109306">https://blog.csdn.net/subcqfq/article/details/108109306</a></p><p>动态规划，状态转移方程</p><p>DP[i] [j]表示第一层有i个数，第二层有j个数有多少种方案</p><p>题目要求同一行中右边比左边大， 同一列中下边比上边的大，所以 j &lt;= i</p><p>1.当j &lt; i时， DP[i] [j]可以用此时少一个数的方案来表示，少一个数可以是DP[i - 1] [j]，也可以是DP[i] [j - 1]，</p><p>DP[i] [j] = DP[i - 1] [j] + DP[i] [j - 1]</p><p>2.当j = i时， 因为要求，所以</p><p>DP[i] [j] = DP[i] [j - 1]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int DP[1011][1011];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int i, j;</span><br><span class="line">DP[1][0] &#x3D; 1;</span><br><span class="line">for (i &#x3D; 1; i &lt;&#x3D; 1010; i++) DP[i][0] &#x3D; 1;&#x2F;&#x2F;初始化</span><br><span class="line">for (i &#x3D; 1; i &lt;&#x3D; 1010; i++) &#123;</span><br><span class="line">for (j &#x3D; 1; j &lt;&#x3D; i; j++) &#123;</span><br><span class="line">if (i &#x3D;&#x3D; j) DP[i][j] &#x3D; DP[i][j - 1];</span><br><span class="line">else DP[i][j] &#x3D; (DP[i - 1][j] + DP[i][j - 1]) % 2020;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d&quot;, DP[1010][1010]);</span><br><span class="line">return 0;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="试题-F-整除序列"><a href="#试题-F-整除序列" class="headerlink" title="试题 F: 整除序列"></a>试题 F: 整除序列</h3><p>【问题描述】</p><p>有一个序列，序列的第一个数是 n，后面的每个数是前一个数整除 2，请输 出这个序列中值为正数的项。</p><p>【输入格式】</p><p>输入一行包含一个整数 n。</p><p>【输出格式】</p><p>输出一行，包含多个整数，相邻的整数之间用一个空格分隔，表示答案。</p><p>【样例输入】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span> </span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">20</span> <span class="number">10</span> <span class="number">5</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>【评测用例规模与约定】 对于 80% 的评测用例，1≤n≤1091≤n≤109。 对于所有评测用例，1≤n≤10181≤n≤1018。</p><blockquote><p>看到5 2 整除</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">long long n;</span><br><span class="line">scanf(&quot;%lld&quot;,&amp;n);</span><br><span class="line">printf(&quot;%lld&quot;,n);</span><br><span class="line">while(n&gt;1)&#123;</span><br><span class="line">n&#x2F;&#x3D;2;</span><br><span class="line">printf(&quot; %lld&quot;,n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="试题-G-解码"><a href="#试题-G-解码" class="headerlink" title="试题 G: 解码"></a>试题 G: 解码</h3><p>【问题描述】</p><p>小明有一串很长的英文字母，可能包含大写和小写。 在这串字母中，有很多连续的是重复的。小明想了一个办法将这串字母表 达得更短：将连续的几个相同字母写成字母 + 出现次数的形式。 例如，连续的 5 个 a，即 aaaaa，小明可以简写成 a5（也可能简写成 a4a、 aa3a 等）。对于这个例子：HHHellllloo，小明可以简写成 H3el5o2。为了方便表 达，小明不会将连续的超过 9 个相同的字符写成简写的形式。 现在给出简写后的字符串，请帮助小明还原成原来的串。</p><p>【输入格式】</p><p>输入一行包含一个字符串。</p><p>【输出格式】</p><p>输出一个字符串，表示还原后的串。</p><p>【样例输入】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">H3el5o2</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HHHellllloo</span><br></pre></td></tr></table></figure><p>【评测用例规模与约定】</p><p>对于所有评测用例，字符串由大小写英文字母和数字组成，长度不超过 100。</p><p>请注意原来的串长度可能超过 100。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">string s;</span><br><span class="line">vector&lt;char&gt; res;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">for(int i&#x3D;0;i&lt;s.length();i++)&#123;</span><br><span class="line">int t&#x3D;s[i]-&#39;0&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;if(1&lt;t&lt;10)&#123;</span><br><span class="line">if(1&lt;t&amp;&amp;t&lt;10)&#123;</span><br><span class="line">for(int j&#x3D;0;j&lt;t-1;j++)&#123;</span><br><span class="line">res.push_back(s[i-1]);</span><br><span class="line">&#x2F;&#x2F;cout&lt;&lt;t&lt;&lt;&quot;-&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">res.push_back(s[i]);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;0;i&lt;res.size();i++)&#123;</span><br><span class="line">cout&lt;&lt;res[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="错误：if-1-lt-t-lt-1）"><a href="#错误：if-1-lt-t-lt-1）" class="headerlink" title="错误：if(1&lt;t&lt;1）"></a>错误：if(1&lt;t&lt;1）</h6><h3 id="试题-H-走方格"><a href="#试题-H-走方格" class="headerlink" title="-试题 H: 走方格"></a>-试题 H: 走方格</h3><p>【问题描述】</p><p>在平面上有一些二维的点阵。 这些点的编号就像二维数组的编号一样，从上到下依次为第 1 至第 n 行， 从左到右依次为第 1 至第 m 列，每一个点可以用行号和列号来表示。 现在有个人站在第 1 行第 1 列，要走到第 n 行第 m 列。只能向右或者向下 走。 注意，如果行号和列数都是偶数，不能走入这一格中。 问有多少种方案。</p><p>【输入格式】</p><p>输入一行包含两个整数 n, m。</p><p>【输出格式】</p><p>输出一个整数，表示答案。</p><p>【样例输入】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> </span><br></pre></td></tr></table></figure><p>【样例输入】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 6</span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> </span><br></pre></td></tr></table></figure><p>【评测用例规模与约定】</p><p>对于所有评测用例，1 ≤ n ≤ 30, 1 ≤ m ≤ 30。</p><blockquote><p>如果行号和列数都是偶数，不能走入这一格中。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int endn,endm;</span><br><span class="line">int cnt&#x3D;0;</span><br><span class="line">void dfs(int n,int m)&#123;</span><br><span class="line">if(n&#x3D;&#x3D;endn&amp;&amp;m&#x3D;&#x3D;endm)&#123;</span><br><span class="line">cnt++;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if(n%2&#x3D;&#x3D;0&amp;&amp;m%2&#x3D;&#x3D;0) return;</span><br><span class="line">if(n&gt;endn||m&gt;endm) return;</span><br><span class="line">dfs(n,m+1);</span><br><span class="line">dfs(n+1,m);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">&#x2F;&#x2F;scanf(&quot;%d %d&quot;,endn,endm);</span><br><span class="line">scanf(&quot;%d %d&quot;,&amp;endn,&amp;endm);</span><br><span class="line">if(endn%2&#x3D;&#x3D;0&amp;&amp;endm%2&#x3D;&#x3D;0)&#123;&#x2F;&#x2F;</span><br><span class="line">cout&lt;&lt;0;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">dfs(1,1);</span><br><span class="line">cout&lt;&lt;cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动规：</p><h3 id="试题I：整数拼接"><a href="#试题I：整数拼接" class="headerlink" title="试题I：整数拼接"></a>试题I：整数拼接</h3><p>【题目描述】<br>给定一个长度为 n 的数组 A1,A2,⋅⋅⋅,An。你可以从中选出两个数 Ai 和 Aj(i 不等于 j)，然后将 Ai 和 Aj 一前一后拼成一个新的整数。例如 12 和 345 可以拼成 12345 或 34512。注意交换 Ai 和 Aj 的顺序总是被视为 2 种拼法，即便是 Ai=Aj 时。请你计算有多少种拼法满足拼出的整数是 K 的倍数。</p><p>【输入格式】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行包含 2 个整数 n 和 K。</span><br><span class="line">第二行包含 n 个整数 A1,A2,⋅⋅⋅,An。</span><br></pre></td></tr></table></figure><p>【输出格式】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个整数代表答案。</span><br></pre></td></tr></table></figure><p>【数据范围】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1≤n≤10^5,1≤K≤10^5,1≤Ai≤10^9</span><br></pre></td></tr></table></figure><p>【输入样例】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 2</span><br><span class="line">1 2 3 4</span><br></pre></td></tr></table></figure><p>【输出样例】</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><p>1.暴力</p><p>int long 最大10位,long long 19</p><p>2.不懂</p><h3 id="试题-J-网络分析"><a href="#试题-J-网络分析" class="headerlink" title="试题 J: 网络分析"></a>试题 J: 网络分析</h3><p>小明正在做一个网络实验。他设置了 n 台电脑，称为节点，用于收发和存储数据。</p><p>初始时，所有节点都是独立的，不存在任何连接。小明可以通过网线将两个节点连接起来，连接后两个节点就可以互相通信了。两个节点如果存在网线连接，称为相邻。小明有时会测试当时的网络，他会在某个节点发送一条信息，信息会发送到每个相邻的节点，之后这些节点又会转发到自己相邻的节点，直到所有直接或间接相邻的节点都收到了信息。所有发送和接收的节点都会将信息存储下来。一条信息只存储一次。给出小明连接和测试的过程，请计算出每个节点存储信息的大小。</p><p><strong>输入格式</strong></p><p>输入的第一行包含两个整数 n,m，分别表示节点数量和操作数量。</p><p>节点从 1 至 n 编号。</p><p>接下来 m 行，每行三个整数，表示一个操作。</p><p>如果操作为 1 a b，表示将节点 a 和节点 b 通过网线连接起来。当 a = b 时，表示连接了一个自环，对网络没有实质影响。<br>如果操作为 2 p t，表示在节点 p 上发送一条大小为 t 的信息。</p><p><strong>输出格式</strong></p><p>输出一行，包含 n 个整数，相邻整数之间用一个空格分割，依次表示进行完上述操作后节点 1 至节点 n 上存储信息的大小。</p><p><strong>数据范围</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1≤n≤10000,1≤m≤105,1≤t≤100</span><br></pre></td></tr></table></figure><p><strong>输入样例</strong>1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">4 8</span><br><span class="line">1 1 2</span><br><span class="line">2 1 10</span><br><span class="line">2 3 5</span><br><span class="line">1 4 1</span><br><span class="line">2 2 2</span><br><span class="line">1 1 2</span><br><span class="line">1 2 4</span><br><span class="line">2 2 1</span><br></pre></td></tr></table></figure><p><strong>输出样例1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13 13 5 3</span><br></pre></td></tr></table></figure><p>1.暴力</p><p>2.并查集</p><blockquote><p>观察性质可以知道，我们只需要维护当前点p及其当前点p的root的差值就可以了。那就好办了啊，<strong>带权并查集直接上啊</strong>，所以每个点最后的结果就是它与它祖先root的差值+root自身的值就可以了。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn], d[maxn], now[maxn], n, m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x != fa[x]) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = fa[x];</span><br><span class="line">        fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">        d[x] += d[temp];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) fa[i] = i;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> op; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;op);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> a, b; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">            <span class="keyword">int</span> eu = <span class="built_in">find</span>(a), ev = <span class="built_in">find</span>(b);</span><br><span class="line">            <span class="keyword">if</span> (eu != ev) &#123;<span class="comment">//如果不处于一个根结点，链接</span></span><br><span class="line">                fa[ev] = eu;</span><br><span class="line">                d[ev] = now[ev] - now[eu];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> p, t; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;p, &amp;t);</span><br><span class="line">            <span class="keyword">int</span> rt = <span class="built_in">find</span>(p);</span><br><span class="line">            now[rt] += t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">1</span>;i &lt;= n;++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, now[<span class="built_in">find</span>(i)] + d[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2020年第十一届C-C-B组第二场蓝桥杯省赛真题"><a href="#2020年第十一届C-C-B组第二场蓝桥杯省赛真题" class="headerlink" title="2020年第十一届C/C++ B组第二场蓝桥杯省赛真题"></a>2020年第十一届C/C++ B组第二场蓝桥杯省赛真题</h1><h3 id="×第一题：门牌制作"><a href="#×第一题：门牌制作" class="headerlink" title="×第一题：门牌制作"></a>×第一题：门牌制作</h3><p>题目描述<br>小蓝要为一条街的住户制作门牌号。这条街一共有2020位住户，门牌号从1到2020编号。小蓝制作门牌的方法是先制作0到9这几个数字字符，最后根据需要将字符粘贴到门牌上，例如门牌1017需要依次粘贴字符1、0、1、7，即需要1个字符0，2个字符1，1个字符7。请问要制作所有的1到2020号门牌，<strong>总共需要多少个字符2？</strong></p><blockquote><p>624</p><p>622错 少算了1 3，2020</p><p>562×  不是有2的数，是有多少个2</p></blockquote><ul><li>程序出来624，想着写程序，不要算，容易漏</li><li>看清题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">int cnt&#x3D;0;</span><br><span class="line">for(int i&#x3D;1;i&lt;2021;i++)&#123;</span><br><span class="line">int k&#x3D;i;</span><br><span class="line">while(k)&#123;</span><br><span class="line">int c&#x3D;k%10;</span><br><span class="line">if(c&#x3D;&#x3D;2)&#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#x2F;&#x2F;break;</span><br><span class="line">&#125;</span><br><span class="line">k&#x2F;&#x3D;10;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;cnt;</span><br><span class="line">return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="√第二题：既约分数"><a href="#√第二题：既约分数" class="headerlink" title="√第二题：既约分数"></a>√第二题：既约分数</h3><p><strong>题目描述</strong><br>如果一个分数的分子和分母的最大公约数是1，这个分数称为既约分数。例如，3/4,5/2,1/8,7/1都是既约分数。请问，有多少个既约分数，分子和分母都是1到2020之间的整数（包括1和2020）</p><p>2481215</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">int cnt&#x3D;0;</span><br><span class="line">for(int i&#x3D;1;i&lt;2021;i++)&#123;</span><br><span class="line">for(int j&#x3D;1;j&lt;2021;j++)&#123;</span><br><span class="line">int t&#x3D;__gcd(i,j);</span><br><span class="line">if(t&#x3D;&#x3D;1) cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;cnt;</span><br><span class="line">return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="—第三题：蛇形填数"><a href="#—第三题：蛇形填数" class="headerlink" title="—第三题：蛇形填数"></a>—第三题：蛇形填数</h3><p><strong>题目描述</strong><br>如下图所示，小明用从1开始的正整数“蛇形”填充无限大的矩阵。容易看出矩阵第二行第二列中的数是5。请你计算矩阵中第20行第20列的数是多少？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">6</span> <span class="number">7</span> <span class="number">15</span> …</span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">14</span> …</span><br><span class="line"><span class="number">4</span> <span class="number">9</span> <span class="number">13</span> …</span><br><span class="line"><span class="number">10</span> <span class="number">12</span> …</span><br><span class="line"><span class="number">11</span> …</span><br></pre></td></tr></table></figure><blockquote><p>将图形顺时针旋转45度，</p><p>在2n-1，</p><p>20行20列位于第39层的中间一个，算出第38行最后一个+n</p><p>因为是中间一个，所以每行正序还是逆序不用管</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1行1列       1</span><br><span class="line">         3 2</span><br><span class="line">2行2列     4 5 6</span><br><span class="line">        10 9 8 7</span><br><span class="line">3行3列 11 12 13 14 15</span><br><span class="line">.................</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">int res&#x3D;0;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;38;i++)&#123;</span><br><span class="line">res+&#x3D;i;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;res+19+1; </span><br><span class="line">return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以暴力跑</p><p><code>for (int x = 1, y = 1, k = 1;; k++)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">int main() &#123;</span><br><span class="line">    &#x2F;&#x2F; freopen(&quot;in.txt&quot;,&quot;r&quot;,stdin);</span><br><span class="line">    ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);</span><br><span class="line">    bool flag &#x3D; true;</span><br><span class="line">    for (int x &#x3D; 1, y &#x3D; 1, k &#x3D; 1;; k++) &#123;</span><br><span class="line">        if (x &#x3D;&#x3D; 20 &amp;&amp; y &#x3D;&#x3D; 20) &#123;</span><br><span class="line">            cout &lt;&lt; k &lt;&lt; endl;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        if (flag)</span><br><span class="line">            if (x - 1)  --x, ++y;</span><br><span class="line">            else  ++y, flag &#x3D; false;</span><br><span class="line">        else if (y - 1)  ++x, --y;</span><br><span class="line">        else ++x, flag &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第四题：跑步锻炼"><a href="#第四题：跑步锻炼" class="headerlink" title="第四题：跑步锻炼"></a>第四题：跑步锻炼</h3><p>题目描述<br>小蓝每天都锻炼身体。正常情况下，小蓝每天跑1千米。如果某天是周一或者月初（1日），为了激励自己，小蓝要跑2千米。如果同时是周一或月初，小蓝也是跑2千米。小蓝跑步已经坚持了很长时间，从2000年1月1日周六（含）到2020年10月1日周四（含）。请问这段时间小蓝总共跑步多少千米？</p><p>20 年, 9 月  249个月</p><p>7579 天</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> weekday=<span class="number">6</span>,year=<span class="number">2000</span>,month=<span class="number">1</span>,day=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> monthday[<span class="number">13</span>]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(weekday==<span class="number">1</span>||day==<span class="number">1</span>) cnt++;</span><br><span class="line">t++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(year==<span class="number">2000</span>&amp;&amp;month==<span class="number">1</span>&amp;&amp;day==<span class="number">2</span>)  </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout&lt;&lt;year&lt;&lt;&quot; &quot;&lt;&lt;month&lt;&lt;&quot; &quot;&lt;&lt;day&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((year%<span class="number">4</span>==<span class="number">0</span>&amp;&amp;year%<span class="number">100</span>!=<span class="number">0</span>)||year%<span class="number">400</span>==<span class="number">0</span>)&#123;</span><br><span class="line">monthday[<span class="number">2</span>]=<span class="number">29</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> monthday[<span class="number">2</span>]=<span class="number">28</span>;</span><br><span class="line"></span><br><span class="line">day++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(day&gt;monthday[month])&#123;</span><br><span class="line">day=<span class="number">1</span>;</span><br><span class="line">month++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(month&gt;<span class="number">12</span>)&#123;</span><br><span class="line">month=<span class="number">1</span>;</span><br><span class="line">year++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">weekday=(weekday+<span class="number">1</span>)%<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout&lt;&lt;t;</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;(t-cnt)+cnt*<span class="number">2</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第五题：七段码"><a href="#第五题：七段码" class="headerlink" title="第五题：七段码"></a>第五题：七段码</h3><p>题目描述<br>小蓝要用七段码数码管来表示一种特殊的文字。<br>七段码上图给出了七段码数码管的一个图示，数码管中一共有 7 段可以发光的二极管，分别标记为 a, b, c, d, e, f, g。小蓝要选择一部分二极管（至少要有一个）发光来表达字符。在设计字符的表达时，要求所有发光的二极管是连成一片的。<br>例如：b 发光，其他二极管不发光可以用来表达一种字符。<br>例如：c 发光，其他二极管不发光可以用来表达一种字符。这种方案与上一行的方案可以用来表示不同的字符，尽管看上去比较相似。<br>例如：a, b, c, d, e 发光，f, g 不发光可以用来表达一种字符。<br>例如：b, f 发光，其他二极管不发光则不能用来表达一种字符，因为发光的二极管没有连成一片。<br>请问，小蓝可以用七段码数码管表达多少种不同的字符？</p><img src="https://i.loli.net/2021/04/23/Uh7lSz6vOiMkNRB.png" alt="image-20210412081024947" style="zoom:50%;" /><blockquote><p>80</p></blockquote><p>7+10+16+20+19+7+1=80</p><p>数，5删去2个管加</p><p>一共七个灯管，枚举所有状态，然后dfs搜一下是否连通。</p><h3 id="√第六题：成绩统计"><a href="#√第六题：成绩统计" class="headerlink" title="√第六题：成绩统计"></a>√第六题：成绩统计</h3><p>题目描述<br>小蓝给学生们组织了一场考试，卷面总分为100分，每个学生的得分都是一个0到100的整数。如果得分至少是60分，则称为及格。如果得分至少为85分，则称为优秀。请计算及格率和优秀率，用百分数表示，百分号前的部分四舍五入保留整数。<br>【输入格式】 输入的第一行包含一个整数n，表示考试人数。接下来n行，每行包含一个0至100的整数，表示一个学生的得分。<br>【输出格式】 输出两行，每行一个百分数，分别表示及格率和优秀率。百分号前的部分<strong>四舍五入</strong>保留整数。<br>【样例输入】</p><p>【样例输出】<br>71%<br>43%</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">80</span><br><span class="line">92</span><br><span class="line">56</span><br><span class="line">74</span><br><span class="line">88</span><br><span class="line">100</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>【样例输出】<br>71%<br>43%</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">double n,a&#x3D;0,b&#x3D;0;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">int score;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;score;</span><br><span class="line">if(score&gt;&#x3D;85)&#123;</span><br><span class="line">a++;</span><br><span class="line">&#125;</span><br><span class="line">if(score&gt;&#x3D;60)</span><br><span class="line">b++;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">printf(&quot;%d%\n%d%\n&quot;,(int)(100*(b&#x2F;n)+0.5),(int)(100*(a&#x2F;n)+0.5));</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第七题：回文日期"><a href="#第七题：回文日期" class="headerlink" title="第七题：回文日期"></a>第七题：回文日期</h3><p>题目描述<br>2020年春节期间，有一个特殊的日期引起了大家的注意：2020年2月2日。因为如果将这个日期按“yyyymmdd”的格式写成一个8位数是20200202，恰好是一个回文数。我们称这样的日期是回文日期。有人表示20200202是“千年一遇”的特殊日子。对此小明很不认同，因为不到2年之后就是下一个回文日期：20211202即2021年12月2日。也有人表示20200202并不仅仅是一个回文日期，还是一个ABABBABA型的回文日期。对此小明也不认同，因为大约100年后就能遇到下一个ABABBABA型的回文日期：21211212即2121年12月12日。算不上“千年一遇”，顶多算“千年两遇”。给定一个8位数的日期，请你计算该日期之后下一个回文日期和下一个ABABBABA型的回文日期各是哪一天。<br>【输入格式】<br>输入包含一个八位整数N，表示日期。<br>【输出格式】<br>输出两行，每行1个八位数。第一行表示下一个回文日期，第二行表示下一个ABABBABA型的回文日期。<br>【样例输入】<br>20200202<br>【样例输出】<br>20211202<br>21211212<br>【评测用例规模与约定】<br>对于所有评测用例，10000101 &lt;= N &lt;= 89991231，保证N是一个合法日期的8位数表示。</p><blockquote><p>日期模拟</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">char s[10];</span><br><span class="line">bool repeat(int y,int m,int d)&#123;</span><br><span class="line">sprintf(s,&quot;%04d%02d%02d&quot;,y,m,d);</span><br><span class="line">if(s[0]&#x3D;&#x3D;s[7]&amp;&amp;s[1]&#x3D;&#x3D;s[6]&amp;&amp;s[2]&#x3D;&#x3D;s[5]&amp;&amp;s[3]&#x3D;&#x3D;s[4])&#123;</span><br><span class="line">&#x2F;&#x2F;sscanf(s,&quot;%4d%2d%2d&quot;,&amp;y,&amp;m,&amp;d);&#x2F;&#x2F;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">bool special(int y,int m,int d)&#123;</span><br><span class="line">sprintf(s,&quot;%04d%02d%02d&quot;,y,m,d);</span><br><span class="line">if(s[0]&#x3D;&#x3D;s[2]&amp;&amp;s[2]&#x3D;&#x3D;s[5]&amp;&amp;s[5]&#x3D;&#x3D;s[7]&amp;&amp;s[1]&#x3D;&#x3D;s[3]&amp;&amp;s[3]&#x3D;&#x3D;s[4]&amp;&amp;s[4]&#x3D;&#x3D;s[6])&#123;</span><br><span class="line">&#x2F;&#x2F;sscanf(s,&quot;%4d%2d%2d&quot;,&amp;y,&amp;m,&amp;d);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int year,month,day;</span><br><span class="line">scanf(&quot;%4d%2d%2d&quot;,&amp;year,&amp;month,&amp;day);</span><br><span class="line">int m[13]&#x3D;&#123;0,31,28,31,30,31,30,31,31,30,31,30,31&#125;;</span><br><span class="line">int flag&#x3D;0;</span><br><span class="line">while(1)&#123;</span><br><span class="line">day++;</span><br><span class="line">if(day&gt;m[month])&#123;</span><br><span class="line">day&#x3D;1;</span><br><span class="line">month++;</span><br><span class="line">&#125;</span><br><span class="line">if(month&gt;12)&#123;</span><br><span class="line">month&#x3D;1;</span><br><span class="line">year++; </span><br><span class="line">&#125; </span><br><span class="line">if((year%4&#x3D;&#x3D;0&amp;&amp;year%100!&#x3D;0)||year%400&#x3D;&#x3D;0)&#123;</span><br><span class="line">m[2]&#x3D;29;</span><br><span class="line">&#125;</span><br><span class="line">else m[2]&#x3D;28;</span><br><span class="line">if(repeat(year,month,day)&amp;&amp;flag&#x3D;&#x3D;0)&#123;</span><br><span class="line">flag++;</span><br><span class="line">printf(&quot;%s\n&quot;,s);&#x2F;&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">if(special(year,month,day))&#123;</span><br><span class="line">flag++;</span><br><span class="line">printf(&quot;%s\n&quot;,s);</span><br><span class="line">&#125;</span><br><span class="line">if(flag&#x3D;&#x3D;2) break; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li><p><strong>掌握利用sprintf(char*,format,…)将数字格式化为字符串</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sprintf(s,&quot;%04d%02d%02d&quot;,year,month,day);</span><br></pre></td></tr></table></figure><p>就是把字符输出到第一个参数，第一个参数的类型必须为char</p><p><strong>扩展 sscanf()</strong> 将字符串转为整数 注意 &amp;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sscanf(s,&quot;%4d%2d%2d&quot;,&amp;year,&amp;month,&amp;day);</span><br></pre></td></tr></table></figure></li><li><p>将有固定格式的字符串输入进整数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scanf(&quot;%4d%2d%2d&quot;,&amp;year,&amp;month,&amp;day);</span><br></pre></td></tr></table></figure></li></ul><p>第八题：子串分值和<br>题目描述<br>对于一个字符串 S，我们定义 S 的分值 f (S ) 为 S 中出现的不同的字符个<br>数。例如 f (”aba”) = 2， f (”abc”) = 3, f (”aaa”) = 1。<br>现在给定一个字符串 S [0::n − 1]（长度为 n），请你计算对于所有 S 的非空<br>子串 S [i:: j](0 ≤ i ≤ j &lt; n)， f (S [i:: j]) 的和是多少。<br>【输入格式】<br>输入一行包含一个由小写字母组成的字符串S。<br>【输出格式】<br>输出一个整数表示答案。<br>【样例输入】<br>ababc<br>【样例输出】<br>28<br>【样例说明】<br>子串 f值<br>a 1<br>ab 2<br>ab<strong>a</strong> 2<br>ab<strong>a</strong>b 2<br>ab<strong>a</strong>bc 3<br>b 1<br>b<strong>a</strong> 2<br>b<strong>a</strong>b 2<br>b<strong>a</strong>bc 3<br><strong>a</strong> 1<br><strong>a</strong>b 2<br><strong>a</strong>bc 3<br>b 1<br>bc 2<br>c 1</p><blockquote><p>题稍微有点思维吧，我们定义，对于一个字符串我们只记录这个字母在这个字符中出现的第一次有贡献，</p><p>接下来就是统计，以某个字符为第一次出现的字母的字串数量了，</p><p>我们定义l a s t [ i ] last[i]last[i]表示字符i ii在当前枚举点之前最后一次出现的位置，显然这个字符的左端点就可以落在[ l a s t [ i ] + 1 , n o w ] [last[i] + 1, now][last[i]+1,now]</p><p>这个区间了，然后右端点可以在n o w , n now, nnow,n区间，所有的字串就是这两个长度的乘积，然后就是非常简短的代码了。</p><p>原文链接：<a href="https://blog.csdn.net/weixin_45483201/article/details/109137296">https://blog.csdn.net/weixin_45483201/article/details/109137296</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef long long ll;</span><br><span class="line"></span><br><span class="line">const int N &#x3D; 1e5 + 10;</span><br><span class="line"></span><br><span class="line">int last[30], n;</span><br><span class="line"></span><br><span class="line">char str[N];</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    &#x2F;&#x2F; freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span><br><span class="line">    &#x2F;&#x2F; freopen(&quot;out.txt&quot;, &quot;w&quot;, stdout);</span><br><span class="line">    &#x2F;&#x2F; ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);</span><br><span class="line">    scanf(&quot;%s&quot;, str + 1);</span><br><span class="line">    n &#x3D; strlen(str + 1);</span><br><span class="line">    ll ans &#x3D; 0;</span><br><span class="line">    for(int i &#x3D; 1; i &lt;&#x3D; n; i++) &#123;</span><br><span class="line">        ans +&#x3D; 1ll * (i - last[str[i] - &#39;a&#39;]) * (n - i + 1);</span><br><span class="line">        last[str[i] - &#39;a&#39;] &#x3D; i;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%lld\n&quot;, ans);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1<br>第九题：平面切分<br>题目描述<br>平面上有N 条直线，其中第i条直线是y = Ai x+Bi<br>请计算这些直线将平面分成了几个部分。<br>【输入格式】<br>输入的第一行包含一个整数N, 以下N行，包含两个证书 Ai，Bi<br>【输出格式】 一个整数代表答案<br>【样例输入】<br>31<br>1<br>2 2<br>3 3<br>【样例输出】<br>6</p><blockquote><p>考数学素养，必须知道：新增的面积块的个数=这一条线与前面线的交点个数+1.<br>知道这个公式的话，就有了思路。需要考虑线平行，线重合以及点重合，可利用bool和set，又因为是判断点重合，有x,y两个参数，所以要用结构set.</p><p>#include&lt;bits/stdc++.h&gt;<br>using namespace std;<br>double s[1010][2];<br>bool st[1010];<br>long ans=1;//开始有一面<br>struct parameter<br>{<br>    double first;<br>    double second;<br>};<br>bool operator&lt;(const parameter&amp; x,const parameter&amp; y){//因为要使用结构set，所以要重载&lt;<br>    if(x.first &lt; y.first||x.second &lt; y.second)<br>        return true;<br>        return false;<br>    }<br>int main()<br>{<br>    int n;<br>    cin &gt;&gt; n;<br>    for(int i=0;i&lt;n;i++)<br>    {<br>        cin &gt;&gt; s[i][0] &gt;&gt; s[i][1];<br>        parameter p;<br>        set<parameter> point;//解决点重合<br>        for(int j=0;j&lt;i;j++)<br>        {<br>            if(st[j]) continue;<br>            if(s[i][0]==s[j][0])<br>            {<br>                if(s[i][1]==s[j][1])<br>                {<br>                    st[j]=true;//解决线重合<br>                    break;<br>                }<br>                else {<br>                    continue;<br>                }<br>            }<br>            //计算交点<br>            p.first=(s[j][1]-s[i][1])/(s[i][0]-s[j][0]);<br>            p.second=(s[i][1]*s[j][0]-s[j][1]*s[i][0])/(s[j][0]-s[i][0]);<br>            point.insert(p);<br>        }<br>        if(!st[i])ans+=point.size()+1;<br>    }<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    return 0;<br>}</p></blockquote><p>1<br>第十题：字串排序<br>题目描述<br>小蓝最近学习了一些排序算法，其中冒泡排序让他印象深刻。<br>在冒泡排序中，每次只能交换相邻的两个元素。小蓝发现，如果对一个字符串中的字符排序，只允许交换相邻的两个字符，则在所有可能的排序方案中，冒泡排序的总交换次数是最少的。<br>例如，对于字符串 lan 排序，只需要 1 次交换。对于字符串 qiao 排序，总共需要 4 次交换。<br>小蓝找到了很多字符串试图排序，他恰巧碰到一个字符串，需要 V 次交换，可是他忘了把这个字符串记下来，现在找不到了。<br>请帮助小蓝找一个只包含小写英文字母且没有字母重复出现的字符串，对该串的字符排序，正好需要 V 次交换。如果可能找到多个，请告诉小蓝最短的那个。如果最短的仍然有多个，请告诉小蓝字典序最小的那个。请注意字符串中可以包含相同的字符。<br>【输入格式】<br>输入的第一行包含一个整数V，小蓝的幸运数字。<br>【输出格式】<br>题面要求的一行字符串。<br>【样例输入】<br>4<br>【样例输出】<br>bbaa<br>【样例输入】<br>100<br>【样例输出】<br>jihgfeeddccbbaa</p><blockquote><p>【代码解析】<br>本题的关键就是正确理解“交换两个相邻的字符”，这表明有一对需要交换的字符，就有一个逆序数(线性代数概念)，所以问题就转化成求满足指定逆序数的最短字符，如果有多个最短字符，就找出字典序最小的。<br>可以说这是这套题里最难的一道了，困扰了我好几天，在反复查阅相关资料和博客后才有所感悟。<br>难点在于：<br>1.确定长度<br>2.考虑到逆序数<br>3.保证字典序最小的处理</p><p>#include&lt;bits/stdc++.h&gt;<br>using namespace std;<br>const int N = (int)1e4+5;<br>int num[N];//存放每个字母对应输出个数<br>int main()<br>{<br>    int n, m;<br>    int _max, id, len, sum;//_max最大字母序号，sum是逆序数<br>    scanf(“%d”, &amp;n);<br>    sum = 0; len = 0;//len为给定逆序数所需的最小字符长度<br>    while (sum &lt; n)//拿逆序数sum来卡循环<br>    {<br>        id = 1;<br>        for (int i = 2; i &lt;= 26; i++)<br>        {<br>           if (num[i] &lt; num[id])<br>           {<br>                id = i;<br>           }<br>        }<br>        sum = sum + len - num[id];<br>        len ++;//确定长度<br>        num[id] ++;<br>    }<br>    for (int i = 1; i &lt;= 26; i++)//找到_max,即最大字母序号<br>    {<br>        if (num[i]) {<br>            _max = i;<br>        }<br>    }<br>    m = sum - n; //逆序数差值,即需要剪掉的部分(最大逆序数是sum，而指定的是n，说明还待处理的有m)<br>    /*具体处理m的方式：若m为0，则不需要处理，若不为0，因为在字符最短的情况下求字典序最小的序列，<br>    那么就从字典序大的开始，和字典序小的进行转换*/<br>    for (int i = 1; i &lt;= m; i++)//成功处理m次<br>    {<br>        for (int j = _max; j &gt;= 1; j–)<br>        {<br>            id = 0;<br>            while(num[++id]!= num[j]);//从最小的开始找输出个数和_max一样的，具体原因可以自行思考一下(每次成功处理一次)<br>            if (id != j)//具体处理操作<br>            {<br>                num[id] ++;<br>                num[j] –;<br>                break;<br>            }<br>        }<br>        if (!num[_max])<br>        {<br>            _max–;<br>        }<br>    }<br>    //正确输出<br>    for (int i = _max; i &gt;= 1; i–)//字母<br>    {<br>        for (int j = 0; j &lt; num[i]; j++)//个数<br>        {<br>            printf(“%c”, ‘a’+i-1);<br>        }<br>    }<br>    printf(“\n”);<br>  return 0;<br>}</p></blockquote><h1 id="2019年第十届C-C-B组蓝桥杯省赛真题"><a href="#2019年第十届C-C-B组蓝桥杯省赛真题" class="headerlink" title="2019年第十届C/C++ B组蓝桥杯省赛真题"></a>2019年第十届C/C++ B组蓝桥杯省赛真题</h1><h3 id="√第一题：组队-5分"><a href="#√第一题：组队-5分" class="headerlink" title="√第一题：组队(5分)"></a>√第一题：组队(5分)</h3><p>题目描述<br>作为篮球队教练，你需要从以下名单中选出 1号位至 5号位各一名球员，<br>组成球队的首发阵容。<br>每位球员担任 1号位至 5号位时的评分如下表所示。请你计算首发阵容 1<br>号位至5号位的评分之和最大可能是多少？</p><p><img src="https://i.loli.net/2021/04/23/kiTecXgbrUBshQV.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1 97 90 0 0 0</span><br><span class="line">2 92 85 96 0 0</span><br><span class="line">3 0 0 0 0 93</span><br><span class="line">4 0 0 0 80 86</span><br><span class="line">5 89 83 97 0 0</span><br><span class="line">6 82 86 0 0 0</span><br><span class="line">7 0 0 0 87 90</span><br><span class="line">8 0 97 96 0 0</span><br><span class="line">9 0 0 89 0 0</span><br><span class="line">10 95 99 0 0 0</span><br><span class="line">11 0 0 96 97 0</span><br><span class="line">12 0 0 0 93 98</span><br><span class="line">13 94 91 0 0 0</span><br><span class="line">14 0 83 87 0 0</span><br><span class="line">15 0 0 98 97 98</span><br><span class="line">16 0 0 0 93 86</span><br><span class="line">17 98 83 99 98 81</span><br><span class="line">18 93 87 92 96 98</span><br><span class="line">19 0 0 0 89 92</span><br><span class="line">20 0 99 96 95 81</span><br></pre></td></tr></table></figure><p>+++</p><p>直接手算，490</p><p><img src="https://i.loli.net/2021/04/23/Cegb8vKy7HLSuGj.png" alt="image-20210416205035155"></p><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20210416205113168.png" alt="image-20210416205113168"></p><p><img src="https://i.loli.net/2021/04/23/zVYOrmAQyJ4j3nC.png" alt="image-20210416205131861"></p><h3 id="√第二题：年号字符-5分"><a href="#√第二题：年号字符-5分" class="headerlink" title="√第二题：年号字符(5分)"></a>√第二题：年号字符(5分)</h3><p><strong>题目描述</strong><br>小明用字母 A对应数字 1，B对应 2，以此类推，用 Z对应 26。对于 27以上的数字，小明用两位或更长位的字符串来对应，例如 AA对应27，AB对<br>应28，AZ对应52，LQ对应329。<br>请问2019对应的字符串是什么？</p><p>+++</p><p>也直接算了 BYQ</p><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20210415160321868.png" alt="image-20210415160321868"></p><h3 id="×第三题：数列求值（10分）"><a href="#×第三题：数列求值（10分）" class="headerlink" title="×第三题：数列求值（10分）"></a>×第三题：数列求值（10分）</h3><p><strong>题目描述</strong><br>给定数列1,1,1,3,5,9,17,…，从第4项开始，每项都是前3项的和。求<br>第20190324项的最后4位数字。</p><p>第六题：特别数的和（15分）<br>题目描述<br>小明对数位中含有 2、0、1、9 的数字很感兴趣（不包括前导 0） ，在 1 到<br>40 中这样的数包括 1、2、9、10 至 32、39 和 40，共 28 个，他们的和是 574。<br>请问，在 1 到 n 中，所有这样的数的和是多少？<br>【输入格式】<br>输入一行包含两个整数 n。<br>【输出格式】<br>输出一行，包含一个整数，表示满足条件的数的和。<br>【样例输入】<br>40<br>【样例输出】<br>574<br>【评测用例规模与约定】<br>对于 20% 的评测用例，1 ≤ n ≤ 10。<br>对于 50% 的评测用例，1 ≤ n ≤ 100。<br>对于 80% 的评测用例，1 ≤ n ≤ 1000。<br>对于所有评测用例，1 ≤ n ≤ 10000。<br>【输出格式】<br>输出一个整数代表答案。<br>【样例输入】<br>7<br>1 6 5 4 3 2 1</p><p>+++</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N &#x3D; 20190330;&#x2F;&#x2F;</span><br><span class="line">int a[N];&#x2F;&#x2F;</span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">a[1] &#x3D; a[2] &#x3D; a[3] &#x3D; 1;</span><br><span class="line">for (int i &#x3D; 4; i &lt;&#x3D; 20190324; ++i)</span><br><span class="line">a[i] &#x3D; (a[i - 1] + a[i - 2] + a[i - 3]) % 10000;</span><br><span class="line">cout &lt;&lt; a[20190324] ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="把大数做全局变量，不然输不出"><a href="#把大数做全局变量，不然输不出" class="headerlink" title="把大数做全局变量，不然输不出"></a>把大数做全局变量，不然输不出</h6><h3 id="×试题-D-数的分解-10分"><a href="#×试题-D-数的分解-10分" class="headerlink" title="×试题 D:数的分解(10分)"></a>×试题 D:数的分解(10分)</h3><p>本题总分：10分<br>【问题描述】<br>把 2019分解成 3个各不相同的正整数之和，并且要求每个正整数都不包含数字2和4，一共有多少种不同的分解方法？<br>注意交换 3个整数的顺序被视为同一种方法，例如 1000+1001+18和<br>1001+1000+18被视为同一种。</p><p>1506447</p><p>+++</p><h6 id="不能把f-i-f-j-f-k-的判断写进循环里-一旦包含数字2和4，循环直接跳出"><a href="#不能把f-i-f-j-f-k-的判断写进循环里-一旦包含数字2和4，循环直接跳出" class="headerlink" title="不能把f(i)f(j)f(k)的判断写进循环里,一旦包含数字2和4，循环直接跳出"></a>不能把f(i)f(j)f(k)的判断写进循环里,一旦包含数字2和4，循环直接跳出</h6><h6 id="用函数f写条件，逻辑清晰也方便好写"><a href="#用函数f写条件，逻辑清晰也方便好写" class="headerlink" title="用函数f写条件，逻辑清晰也方便好写"></a>用函数f写条件，逻辑清晰也方便好写</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">bool f(int x)&#123;</span><br><span class="line">while(x)&#123;</span><br><span class="line">if(x%10&#x3D;&#x3D;2||x%10&#x3D;&#x3D;4) return false;</span><br><span class="line">else x&#x2F;&#x3D;10;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int cnt&#x3D;0;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;1008;i++)&#123;</span><br><span class="line">for(int j&#x3D;i+1;j&lt;&#x3D;1999;j++)&#123;</span><br><span class="line">for(int k&#x3D;j+1;k&lt;&#x3D;1999;k++)&#123;</span><br><span class="line">if(i+j+k&#x3D;&#x3D;2019&amp;&amp;f(i)&amp;&amp;f(j)&amp;&amp;f(k))&#123;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="试题-E：迷宫（15）"><a href="#试题-E：迷宫（15）" class="headerlink" title="试题 E：迷宫（15）"></a>试题 E：迷宫（15）</h3><p>本题总分：10 分</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">【问题描述】</span><br><span class="line">下图给出了一个迷宫的平面图，其中标记为 <span class="number">1</span> 的为障碍，标记为 <span class="number">0</span> 的为可以通行的地方。</span><br><span class="line"></span><br><span class="line"><span class="number">010000</span></span><br><span class="line"><span class="number">000100</span></span><br><span class="line"><span class="number">001001</span></span><br><span class="line"><span class="number">110000</span></span><br><span class="line"></span><br><span class="line">迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到这 个它的上、下、左、右四个方向之一。</span><br><span class="line">对于上面的迷宫，从入口开始，可以按DRRURRDDDR 的顺序通过迷宫， 一共 <span class="number">10</span> 步。其中 D、U、L、R 分别表示向下、向上、向左、向右走。</span><br><span class="line">对于下面这个更复杂的迷宫（<span class="number">30</span> 行 <span class="number">50</span> 列），请找出一种通过迷宫的方式，其使用的步数最少，在步数最少的前提下，请找出字典序最小的一个作为答案。请注意在字典序中D&lt;L&lt;R&lt;U。</span><br><span class="line">    下&lt;左&lt;右&lt;上</span><br><span class="line">    （如果你把以下文字复制到文本文件中，请务 必检查复制的内容是否与文档中的一致。在试题目录下有一个文件 maze.txt， 内容与下面的文本相同）</span><br><span class="line"></span><br><span class="line"><span class="number">01010101001011001001010110010110100100001000101010</span></span><br><span class="line"><span class="number">00001000100000101010010000100000001001100110100101</span></span><br><span class="line"><span class="number">01111011010010001000001101001011100011000000010000</span></span><br><span class="line"><span class="number">01000000001010100011010000101000001010101011001011</span></span><br><span class="line"><span class="number">00011111000000101000010010100010100000101100000000</span></span><br><span class="line"><span class="number">11001000110101000010101100011010011010101011110111</span></span><br><span class="line"><span class="number">00011011010101001001001010000001000101001110000000</span></span><br><span class="line"></span><br><span class="line"><span class="number">10100000101000100110101010111110011000010000111010</span></span><br><span class="line"><span class="number">00111000001010100001100010000001000101001100001001</span></span><br><span class="line"><span class="number">11000110100001110010001001010101010101010001101000</span></span><br><span class="line"><span class="number">00010000100100000101001010101110100010101010000101</span></span><br><span class="line"><span class="number">11100100101001001000010000010101010100100100010100</span></span><br><span class="line"><span class="number">00000010000000101011001111010001100000101010100011</span></span><br><span class="line"><span class="number">10101010011100001000011000010110011110110100001000</span></span><br><span class="line"><span class="number">10101010100001101010100101000010100000111011101001</span></span><br><span class="line"><span class="number">10000000101100010000101100101101001011100000000100</span></span><br><span class="line"><span class="number">10101001000000010100100001000100000100011110101001</span></span><br><span class="line"><span class="number">00101001010101101001010100011010101101110000110101</span></span><br><span class="line"><span class="number">11001010000100001100000010100101000001000111000010</span></span><br><span class="line"><span class="number">00001000110000110101101000000100101001001000011101</span></span><br><span class="line"><span class="number">10100101000101000000001110110010110101101010100001</span></span><br><span class="line"><span class="number">00101000010000110101010000100010001001000100010101</span></span><br><span class="line"><span class="number">10100001000110010001000010101001010101011111010010</span></span><br><span class="line"><span class="number">00000100101000000110010100101001000001000000000010</span></span><br><span class="line"><span class="number">11010000001001110111001001000011101001011011101000</span></span><br><span class="line"><span class="number">00000110100010001000100000001000011101000000110011</span></span><br><span class="line"><span class="number">10101000101000100010001111100010101001010000001000</span></span><br><span class="line"><span class="number">10000010100101001010110000000100101010001011101000</span></span><br><span class="line"><span class="number">00111100001000010000000110111000000001000000001011</span></span><br><span class="line"><span class="number">10000001100111010111010001000110111010101101111000</span></span><br><span class="line"></span><br><span class="line">【答案提交】</span><br><span class="line">这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一 个字符串，包含四种字母 D、U、L、R，在提交答案时只填写这个字符串，填写多余的内容将无法得分。</span><br></pre></td></tr></table></figure><p>看到有大神直接画，画到一半开始怀疑人生</p><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20210416220059574.png" alt="image-20210416220059574"></p><h3 id="√试题-F-特别数的和"><a href="#√试题-F-特别数的和" class="headerlink" title="√试题 F:特别数的和"></a>√试题 F:特别数的和</h3><p>时间限制: 1.0s内存限制: 256.0MB本题总分：15分<br>【问题描述】<br>小明对数位中含有 2、0、1、9的数字很感兴趣（不包括前导 0），在1到<br>40中这样的数包括1、2、9、10至32、39和40，共28个，他们的和是574。<br>请问，在1到n中，所有这样的数的和是多少？<br>【输入格式】<br>输入一行包含两个整数n。<br>【输出格式】<br>输出一行，包含一个整数，表示满足条件的数的和。<br>【样例输入】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">40</span></span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">574</span></span><br></pre></td></tr></table></figure><p>【评测用例规模与约定】<br>对于20%的评测用例，1≤n≤10。<br>对于50%的评测用例，1≤n≤100。<br>对于80%的评测用例，1≤n≤1000。<br>对于所有评测用例，1≤n≤10000。</p><p>+++</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">bool f(int x)&#123;</span><br><span class="line">while(x)&#123;</span><br><span class="line">if(x%10&#x3D;&#x3D;0||x%10&#x3D;&#x3D;1||x%10&#x3D;&#x3D;2||x%10&#x3D;&#x3D;9) return true;</span><br><span class="line">x&#x2F;&#x3D;10;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int n,sum&#x3D;0;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">if(f(i))&#123;</span><br><span class="line">sum+&#x3D;i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d&quot;,sum);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0-8√试题G：完全二叉树的权值"><a href="#0-8√试题G：完全二叉树的权值" class="headerlink" title="0.8√试题G：完全二叉树的权值"></a>0.8√试题G：完全二叉树的权值</h3><p>给定一棵包含N 个节点的完全二叉树，树上每个节点都有一个权值，按从上到下、从左到右的顺序依次是A1, A2, AN，如下图所示：<br><img src="http://oj.ecustacm.cn/upload/image/20200122/20200122135350_24902.png" alt="img"></p><p>现在小明要把相同深度的节点的权值加在一起，他想知道哪个深度的节点权值之和最大？如果有多个深度的权值和同为最大，请你输出其中最小的深度。<br>注：根的深度是1。</p><p>输入</p><p>第一行包含一个整数N。<br>第二行包含N 个整数A1, A2, AN<br>对于所有评测用例，1&lt;=N&lt;=100000, -100000&lt;=Ai&lt;=100000。</p><p>输出</p><p>输出一个整数代表答案。</p><p>样例输入 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">1 6 5 4 3 2 1</span><br></pre></td></tr></table></figure><p>样例输出 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><p>+++</p><p>在线处理只能得80%，放弃</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">int layer&#x3D;1,num&#x3D;1,p&#x3D;1,res&#x3D;0;</span><br><span class="line">long long maxsum&#x3D;0,sum&#x3D;0;</span><br><span class="line">int t;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">sum+&#x3D;t;</span><br><span class="line">num--;</span><br><span class="line">if(num&#x3D;&#x3D;0)</span><br><span class="line">&#123;</span><br><span class="line">if(sum&gt;maxsum)&#123;</span><br><span class="line">res&#x3D;layer;</span><br><span class="line">maxsum&#x3D;sum;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;cout&lt;&lt;layer&lt;&lt;&quot; &quot;&lt;&lt;sum&lt;&lt;&quot; &quot;&lt;&lt;res&lt;&lt;&quot; &quot;&lt;&lt;maxsum&lt;&lt;endl;</span><br><span class="line">layer++;</span><br><span class="line">sum&#x3D;0;</span><br><span class="line">p*&#x3D;2;</span><br><span class="line">num&#x3D;p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d&quot;,res);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0-9√试题-H-等差数列"><a href="#0-9√试题-H-等差数列" class="headerlink" title="0.9√试题 H:等差数列"></a>0.9√试题 H:等差数列</h3><p>时间限制: 1.0s内存限制: 256.0MB本题总分：20分<br>【问题描述】<br>数学老师给小明出了一道等差数列求和的题目。但是粗心的小明忘记了一部分的数列，只记得其中N个整数。<br>现在给出这 N个整数，小明想知道包含这 N个整数的最短的等差数列有几项？<br>【输入格式】<br>输入的第一行包含一个整数N。<br>第二行包含 N个整数 A1,A2,···,AN。(注意 A1 ∼AN并不一定是按等差数<br>列中的顺序给出)<br>【输出格式】<br>输出一个整数表示答案。<br>【样例输入】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">4</span> <span class="number">10</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>【样例说明】<br>包含2、6、4、10、20的最短的等差数列是2、4、6、8、10、12、14、16、<br>18、20。<br>【评测用例规模与约定】<br>对于所有评测用例，2≤N≤100000</p><p>+++</p><p>运行错误90%</p><h6 id="没有考虑当差为0的情况"><a href="#没有考虑当差为0的情况" class="headerlink" title="没有考虑当差为0的情况"></a>没有考虑当差为0的情况</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> minq=<span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,f=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a,a+n);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">t=a[i]-a[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(t==<span class="number">0</span>) f=<span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">minq=<span class="built_in">min</span>(minq,t);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f) res=n;<span class="comment">//</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">res=(a[n<span class="number">-1</span>]-a[<span class="number">0</span>])/minq+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,res);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不懂</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">long long a[1000000];</span><br><span class="line">int main()&#123;</span><br><span class="line">long long n,m,sum&#x3D;0;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">for(long long i&#x3D;0;i&lt;n+m+1;i++)cin&gt;&gt;a[i];</span><br><span class="line">sort(a,a+m+n+1);</span><br><span class="line">if(m&#x3D;&#x3D;0)&#123;</span><br><span class="line">for(long long i&#x3D;0;i&lt;n+m+1;i++)sum+&#x3D;a[i];</span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F; 根节点（符号）左右子树都要有节点，于是可以让根节点为- </span><br><span class="line">&#x2F;&#x2F; A-(B-C-D)</span><br><span class="line">&#x2F;&#x2F; 于是找出来唯一减去的B（最小值）和初始的A（最大值） </span><br><span class="line">&#x2F;&#x2F; 对于负数可以使用+放在右子树，+用完还可以使用-放在左子树，最终效果是把负数全转化为正数相加 </span><br><span class="line">&#x2F;&#x2F; 但是可能全是正数或者全是负数,这样不能全部放在一边要取出来一个于是有了以下操作。 </span><br><span class="line">&#x2F;&#x2F; 只有左子树最左边符号还有右子树最左边符号需要根据贪心的根节点是负号进行特判 </span><br><span class="line">else&#123;</span><br><span class="line">sum+&#x3D;a[n+m]-a[0];</span><br><span class="line">for(long long i&#x3D;1;i&lt;n+m;i++)sum+&#x3D;abs(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">return 0; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="0-3√试题-I-后缀表达式"><a href="#0-3√试题-I-后缀表达式" class="headerlink" title="0.3√试题 I:后缀表达式"></a>0.3√试题 I:后缀表达式</h3><p>时间限制: 1.0s内存限制: 256.0MB本题总分：25分<br>【问题描述】<br>给定 N个加号、M 个减号以及 N+M+1个整数 A1,A2,⋅⋅⋅,AN+M+1，小明想知道在所有由这N个加号、M个减号以及N+M+1个整数凑出的合法的后缀表达式中，结果最大的是哪一个？<br>请你输出这个最大的结果。<br>例如使用 123+−123+−，则“ 23+1− ”这个后缀表达式结果是4，是最大的。<br>【输入格式】<br>第一行包含两个整数 N和 M 。<br>第二行包含N+M+1个整数A1,A2,⋅⋅⋅,AN+M+1。<br>【输出格式】<br>输出一个整数，代表答案。<br>【样例输入】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>【样例输出】</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>【评测用例规模与约定】<br>对于所有评测用例，0≤N,M≤100000，−10e9≤Ai≤10e9。</p><p>+++</p><h6 id="−10e9≤Ai≤10e9-考虑负数"><a href="#−10e9≤Ai≤10e9-考虑负数" class="headerlink" title="−10e9≤Ai≤10e9  考虑负数"></a><code>−10e9≤Ai≤10e9</code>  考虑负数</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 1</span><br><span class="line">-1 -2 -3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><p>还是30，不懂</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">long long a[100005];</span><br><span class="line">int main()&#123;</span><br><span class="line">ios::sync_with_stdio(false);</span><br><span class="line">int n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">int x&#x3D;n+m+1;</span><br><span class="line"></span><br><span class="line">for(int i&#x3D;0;i&lt;x;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+x);</span><br><span class="line">long long sum&#x3D;0;</span><br><span class="line">if(a[0]&gt;&#x3D;0)&#123;</span><br><span class="line">for(int i&#x3D;n+m;i&gt;&#x3D;m;i--)&#123;</span><br><span class="line">sum+&#x3D;a[i];</span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;m-1;i&gt;&#x3D;0;i--)&#123;</span><br><span class="line">sum-&#x3D;a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">int k&#x3D;x-1,i&#x3D;0;</span><br><span class="line">while(1)&#123;</span><br><span class="line">if(abs(a[i])&gt;a[k]&amp;&amp;m)&#123;</span><br><span class="line">sum+&#x3D;abs(a[i]);</span><br><span class="line">m--;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">else if(abs(a[i])&lt;a[k-1]&amp;&amp;n)&#123;</span><br><span class="line">sum+&#x3D;a[i];</span><br><span class="line">n--;</span><br><span class="line">k--; </span><br><span class="line">&#125;</span><br><span class="line">else if(m&#x3D;&#x3D;0||n&#x3D;&#x3D;0)&#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int j&#x3D;i;j&lt;&#x3D;k;j++)&#123;</span><br><span class="line">if(n)&#123;</span><br><span class="line">sum+&#x3D;a[j];</span><br><span class="line">&#125;</span><br><span class="line">else if(m)&#123;</span><br><span class="line">sum-&#x3D;a[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;sum;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;return 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;for(long long i&#x3D;0;i&lt;m;i++)&#123;</span><br><span class="line">&#x2F;&#x2F;cin&gt;&gt;a;</span><br><span class="line">&#x2F;&#x2F;sum-&#x3D;a;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line">&#x2F;&#x2F;for(long long i&#x3D;0;i&lt;n+1;i++)&#123;</span><br><span class="line">&#x2F;&#x2F;cin&gt;&gt;a;</span><br><span class="line">&#x2F;&#x2F;sum+&#x3D;a;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line">&#x2F;&#x2F;cout&lt;&lt;sum;</span><br></pre></td></tr></table></figure><h3 id="试题-J：灵能传输"><a href="#试题-J：灵能传输" class="headerlink" title="试题 J：灵能传输"></a>试题 J：灵能传输</h3><p><img src="https://gitee.com//riotian/blogimage/raw/master/img/20201009202501.png" alt="img"></p><p><strong>【输出格式】</strong><br>　　输出 T 行。每行一个整数依次表示每组询问的答案。</p><p><strong>【样例输入】</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">-2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>【样例输出】</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>【样例说明】</strong><br>　　对于第一组询问：<br>　　对 2 号高阶圣堂武士进行传输操作后 a1=3，a2=2，a3=1a1=3，a2=2，a3=1。答案为 3。<br>　　对于第二组询问：<br>　　这一组高阶圣堂武士拥有的灵能都正好可以让他们达到最佳战斗状态。</p><p><strong>【样例输入】</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-2</span> <span class="number">-3</span> <span class="number">7</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">-8</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">-1</span> <span class="number">-1</span> <span class="number">6</span> <span class="number">-1</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p><strong>【样例输出】</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>【样例输入】</strong><br><a href="http://见文件trans3.in/">见文件trans3.in</a>。</p><p><strong>【样例输出】</strong><br>见文件trans3.ans。</p><p><strong>【数据规模与约定】</strong><br>对于所有评测用例，T≤3，3≤n≤300000T≤3，3≤n≤300000，|ai|≤109|ai|≤109。<br>评测时将使用 25 个评测用例测试你的程序，每个评测用例的限制如下：</p><table><thead><tr><th>评测用例编号</th><th>n</th><th>| ai _i<em>i</em>|</th><th>特殊性质</th></tr></thead><tbody><tr><td>1</td><td>= 3</td><td>≤ 1000</td><td>无</td></tr><tr><td>2,3</td><td>≤ 5</td><td>≤ 1000</td><td>无</td></tr><tr><td>4,5,6,7</td><td>≤ 10</td><td>≤ 1000</td><td>无</td></tr><tr><td>8,9,10</td><td>≤ 20</td><td>≤ 1000</td><td>无</td></tr><tr><td>11</td><td>≤ 100</td><td>≤ 109109</td><td>所有 aiai非负</td></tr><tr><td>12,13,14</td><td>≤ 100</td><td>≤ 109109</td><td>无</td></tr><tr><td>15,16</td><td>≤ 500</td><td>≤ 109109</td><td>无</td></tr><tr><td>17,18,19</td><td>≤ 5000</td><td>≤ 109109</td><td>无</td></tr><tr><td>20</td><td>≤ 5000</td><td>≤ 109109</td><td>所有 aiai非负</td></tr><tr><td>21</td><td>≤ 100000</td><td>≤ 109109</td><td>所有 aiai非负</td></tr><tr><td>22,23</td><td>≤ 100000</td><td>≤ 109109</td><td>无</td></tr><tr><td>24,25</td><td>≤ 300000</td><td>≤ 109109</td><td>无</td></tr></tbody></table><p>注意：本题输入量较大请使用快速的读入方式。</p><h2 id="2018年第九届C-C-B组蓝桥杯省赛真题"><a href="#2018年第九届C-C-B组蓝桥杯省赛真题" class="headerlink" title="2018年第九届C/C++ B组蓝桥杯省赛真题"></a>2018年第九届C/C++ B组蓝桥杯省赛真题</h2><h3 id="第一题：第几天"><a href="#第一题：第几天" class="headerlink" title="第一题：第几天"></a>第一题：第几天</h3><p>2000年的1月1日，是那一年的第1天。<br>那么，2000年的5月4日，是那一年的第几天？</p><p>注意：需要提交的是一个整数，不要填写任何多余内容。</p><p>+++</p><p>156多算了5月，简单题千万不要错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">156</span><br></pre></td></tr></table></figure><h3 id="√第二题：明码"><a href="#√第二题：明码" class="headerlink" title="√第二题：明码"></a>√第二题：明码</h3><p>汉字的字形存在于字库中，即便在今天，16点阵的字库也仍然使用广泛。<br>16点阵的字库把每个汉字看成是16x16个像素信息。并把这些信息记录在字节中。</p><p>一个字节可以存储8位信息，用32个字节就可以存一个汉字的字形了。<br>把每个字节转为2进制表示，1表示墨迹，0表示底色。每行2个字节，<br>一共16行，布局是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第1字节，第2字节</span><br><span class="line">第3字节，第4字节</span><br><span class="line">....</span><br><span class="line">第31字节, 第32字节</span><br></pre></td></tr></table></figure><p>这道题目是给你一段多个汉字组成的信息，每个汉字用32个字节表示，这里给出了字节作为有符号整数的值。</p><p>题目的要求隐藏在这些信息中。你的任务是复原这些汉字的字形，从中看出题目的要求，并根据要求填写答案。</p><p>这段信息是（一共10个汉字）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">4</span> <span class="number">32</span> <span class="number">-1</span> <span class="number">-16</span> <span class="number">4</span> <span class="number">32</span> <span class="number">4</span> <span class="number">32</span> <span class="number">4</span> <span class="number">32</span> <span class="number">4</span> <span class="number">32</span> <span class="number">4</span> <span class="number">32</span> <span class="number">8</span> <span class="number">32</span> <span class="number">8</span> <span class="number">32</span> <span class="number">16</span> <span class="number">34</span> <span class="number">16</span> <span class="number">34</span> <span class="number">32</span> <span class="number">30</span> <span class="number">-64</span> <span class="number">0</span> </span><br><span class="line"><span class="number">16</span> <span class="number">64</span> <span class="number">16</span> <span class="number">64</span> <span class="number">34</span> <span class="number">68</span> <span class="number">127</span> <span class="number">126</span> <span class="number">66</span> <span class="number">-124</span> <span class="number">67</span> <span class="number">4</span> <span class="number">66</span> <span class="number">4</span> <span class="number">66</span> <span class="number">-124</span> <span class="number">126</span> <span class="number">100</span> <span class="number">66</span> <span class="number">36</span> <span class="number">66</span> <span class="number">4</span> <span class="number">66</span> <span class="number">4</span> <span class="number">66</span> <span class="number">4</span> <span class="number">126</span> <span class="number">4</span> <span class="number">66</span> <span class="number">40</span> <span class="number">0</span> <span class="number">16</span> </span><br><span class="line"><span class="number">4</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">4</span> <span class="number">32</span> <span class="number">-1</span> <span class="number">-16</span> <span class="number">4</span> <span class="number">32</span> <span class="number">4</span> <span class="number">32</span> <span class="number">4</span> <span class="number">32</span> <span class="number">4</span> <span class="number">32</span> <span class="number">4</span> <span class="number">32</span> <span class="number">8</span> <span class="number">32</span> <span class="number">8</span> <span class="number">32</span> <span class="number">16</span> <span class="number">34</span> <span class="number">16</span> <span class="number">34</span> <span class="number">32</span> <span class="number">30</span> <span class="number">-64</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">-128</span> <span class="number">64</span> <span class="number">-128</span> <span class="number">48</span> <span class="number">-128</span> <span class="number">17</span> <span class="number">8</span> <span class="number">1</span> <span class="number">-4</span> <span class="number">2</span> <span class="number">8</span> <span class="number">8</span> <span class="number">80</span> <span class="number">16</span> <span class="number">64</span> <span class="number">32</span> <span class="number">64</span> <span class="number">-32</span> <span class="number">64</span> <span class="number">32</span> <span class="number">-96</span> <span class="number">32</span> <span class="number">-96</span> <span class="number">33</span> <span class="number">16</span> <span class="number">34</span> <span class="number">8</span> <span class="number">36</span> <span class="number">14</span> <span class="number">40</span> <span class="number">4</span> </span><br><span class="line"><span class="number">4</span> <span class="number">0</span> <span class="number">3</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">4</span> <span class="number">-1</span> <span class="number">-2</span> <span class="number">4</span> <span class="number">0</span> <span class="number">4</span> <span class="number">16</span> <span class="number">7</span> <span class="number">-8</span> <span class="number">4</span> <span class="number">16</span> <span class="number">4</span> <span class="number">16</span> <span class="number">4</span> <span class="number">16</span> <span class="number">8</span> <span class="number">16</span> <span class="number">8</span> <span class="number">16</span> <span class="number">16</span> <span class="number">16</span> <span class="number">32</span> <span class="number">-96</span> <span class="number">64</span> <span class="number">64</span> </span><br><span class="line"><span class="number">16</span> <span class="number">64</span> <span class="number">20</span> <span class="number">72</span> <span class="number">62</span> <span class="number">-4</span> <span class="number">73</span> <span class="number">32</span> <span class="number">5</span> <span class="number">16</span> <span class="number">1</span> <span class="number">0</span> <span class="number">63</span> <span class="number">-8</span> <span class="number">1</span> <span class="number">0</span> <span class="number">-1</span> <span class="number">-2</span> <span class="number">0</span> <span class="number">64</span> <span class="number">0</span> <span class="number">80</span> <span class="number">63</span> <span class="number">-8</span> <span class="number">8</span> <span class="number">64</span> <span class="number">4</span> <span class="number">64</span> <span class="number">1</span> <span class="number">64</span> <span class="number">0</span> <span class="number">-128</span> </span><br><span class="line"><span class="number">0</span> <span class="number">16</span> <span class="number">63</span> <span class="number">-8</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">4</span> <span class="number">-1</span> <span class="number">-2</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">5</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> </span><br><span class="line"><span class="number">2</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">7</span> <span class="number">-16</span> <span class="number">8</span> <span class="number">32</span> <span class="number">24</span> <span class="number">64</span> <span class="number">37</span> <span class="number">-128</span> <span class="number">2</span> <span class="number">-128</span> <span class="number">12</span> <span class="number">-128</span> <span class="number">113</span> <span class="number">-4</span> <span class="number">2</span> <span class="number">8</span> <span class="number">12</span> <span class="number">16</span> <span class="number">18</span> <span class="number">32</span> <span class="number">33</span> <span class="number">-64</span> <span class="number">1</span> <span class="number">0</span> <span class="number">14</span> <span class="number">0</span> <span class="number">112</span> <span class="number">0</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">9</span> <span class="number">32</span> <span class="number">9</span> <span class="number">16</span> <span class="number">17</span> <span class="number">12</span> <span class="number">17</span> <span class="number">4</span> <span class="number">33</span> <span class="number">16</span> <span class="number">65</span> <span class="number">16</span> <span class="number">1</span> <span class="number">32</span> <span class="number">1</span> <span class="number">64</span> <span class="number">0</span> <span class="number">-128</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">12</span> <span class="number">0</span> <span class="number">112</span> <span class="number">0</span> </span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">7</span> <span class="number">-16</span> <span class="number">24</span> <span class="number">24</span> <span class="number">48</span> <span class="number">12</span> <span class="number">56</span> <span class="number">12</span> <span class="number">0</span> <span class="number">56</span> <span class="number">0</span> <span class="number">-32</span> <span class="number">0</span> <span class="number">-64</span> <span class="number">0</span> <span class="number">-128</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">-128</span> <span class="number">3</span> <span class="number">-64</span> <span class="number">1</span> <span class="number">-128</span> <span class="number">0</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure><p>注意：需要提交的是一个整数，不要填写任何多余内容。</p><p>+++</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">387420489</span><br></pre></td></tr></table></figure><p>进制转的不对，待改,</p><h6 id="负数不是我想的那样，是移码，改了"><a href="#负数不是我想的那样，是移码，改了" class="headerlink" title="负数不是我想的那样，是移码，改了"></a>负数不是我想的那样，是移码，改了</h6><p>![img](file:///C:\Users\1\Documents\Tencent Files\2357977645\Image\C2C\T1YF2G%CJ9P4Q]Q%[K8{1TX.png)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int b[7];</span><br><span class="line"></span><br><span class="line">void turn(int x)&#123;</span><br><span class="line">if(x&gt;&#x3D;0)&#123;</span><br><span class="line">b[0]&#x3D;0;</span><br><span class="line">int k&#x3D;7;</span><br><span class="line">while(x)&#123;</span><br><span class="line">b[k--]&#x3D;x%2;</span><br><span class="line">x&#x2F;&#x3D;2;</span><br><span class="line">&#125;</span><br><span class="line">for(int j&#x3D;k;j&gt;0;j--)&#123;</span><br><span class="line">b[j]&#x3D;0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">b[0]&#x3D;1;</span><br><span class="line">x&#x3D;abs(x);</span><br><span class="line">int k&#x3D;7;</span><br><span class="line">while(x)&#123;</span><br><span class="line">b[k--]&#x3D;x%2;</span><br><span class="line">x&#x2F;&#x3D;2;</span><br><span class="line">&#125;</span><br><span class="line">for(int j&#x3D;k;j&gt;0;j--)&#123;</span><br><span class="line">b[j]&#x3D;1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int n&#x3D;10;</span><br><span class="line">while(n--)&#123;</span><br><span class="line">int a[256];</span><br><span class="line">int x,k&#x3D;1;</span><br><span class="line">for(int i&#x3D;0;i&lt;32;i++)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">turn(x);</span><br><span class="line">for(int i&#x3D;0;i&lt;8;i++)&#123;</span><br><span class="line">a[k++]&#x3D;b[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;256;i++)&#123;</span><br><span class="line">&#x2F;&#x2F;cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">if(a[i]&#x3D;&#x3D;0) cout&lt;&lt;&quot;  &quot;;</span><br><span class="line">else cout&lt;&lt;&quot;.&quot;&lt;&lt;&quot; &quot;;</span><br><span class="line">if(i%16&#x3D;&#x3D;0) cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;void turn(int x)&#123;</span><br><span class="line">&#x2F;&#x2F;if(x&gt;&#x3D;0)&#123;</span><br><span class="line">&#x2F;&#x2F;b[0]&#x3D;0;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line">&#x2F;&#x2F;else&#123;</span><br><span class="line">&#x2F;&#x2F;b[0]&#x3D;1;</span><br><span class="line">&#x2F;&#x2F;x&#x3D;abs(x);</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line">&#x2F;&#x2F;int k&#x3D;7;</span><br><span class="line">&#x2F;&#x2F;while(x)&#123;</span><br><span class="line">&#x2F;&#x2F;b[k--]&#x3D;x%2;</span><br><span class="line">&#x2F;&#x2F;x&#x2F;&#x3D;2;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line">&#x2F;&#x2F;for(int j&#x3D;k;j&gt;0;j--)&#123;</span><br><span class="line">&#x2F;&#x2F;b[j]&#x3D;0;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br></pre></td></tr></table></figure><p>只能出1个字，待改</p><h6 id="转换2进制"><a href="#转换2进制" class="headerlink" title="转换2进制"></a>转换2进制</h6><h6 id="bitset-lt-8-gt-xx-x"><a href="#bitset-lt-8-gt-xx-x" class="headerlink" title="bitset&lt;8&gt; xx(x);"></a><code>bitset&lt;8&gt; xx(x);</code></h6><h6 id="string-b-xx-to-string"><a href="#string-b-xx-to-string" class="headerlink" title="string b=xx.to_string();"></a><code>string b=xx.to_string();</code></h6><h6 id="printf-quot-04o-n-quot-35-按八进制格式输出，保留5位高位补零"><a href="#printf-quot-04o-n-quot-35-按八进制格式输出，保留5位高位补零" class="headerlink" title="printf(&quot;%04o\n&quot;,35);//按八进制格式输出，保留5位高位补零"></a><code>printf(&quot;%04o\n&quot;,35);//按八进制格式输出，保留5位高位补零</code></h6><h6 id="printf-quot-03d-n-quot-35-按十进制格式输出，保留3位高位补零"><a href="#printf-quot-03d-n-quot-35-按十进制格式输出，保留3位高位补零" class="headerlink" title="printf(&quot;%03d\n&quot;,35);//按十进制格式输出，保留3位高位补零"></a><code>printf(&quot;%03d\n&quot;,35);//按十进制格式输出，保留3位高位补零</code></h6><h6 id="printf-quot-08x-n-quot-35-按十六进制格式输出，保留5位高位补零"><a href="#printf-quot-08x-n-quot-35-按十六进制格式输出，保留5位高位补零" class="headerlink" title="printf(&quot;%08x\n&quot;,-35);//按十六进制格式输出，保留5位高位补零"></a><code>printf(&quot;%08x\n&quot;,-35);//按十六进制格式输出，保留5位高位补零</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">&#x2F;&#x2F;int b[7];</span><br><span class="line">&#x2F;&#x2F;void turn(int x)&#123;</span><br><span class="line">&#x2F;&#x2F;if(x&gt;&#x3D;0)&#123;</span><br><span class="line">&#x2F;&#x2F;b[0]&#x3D;0;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line">&#x2F;&#x2F;else&#123;</span><br><span class="line">&#x2F;&#x2F;b[0]&#x3D;1;</span><br><span class="line">&#x2F;&#x2F;x&#x3D;abs(x);</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line">&#x2F;&#x2F;int k&#x3D;7;</span><br><span class="line">&#x2F;&#x2F;while(x)&#123;</span><br><span class="line">&#x2F;&#x2F;b[k--]&#x3D;x%2;</span><br><span class="line">&#x2F;&#x2F;x&#x2F;&#x3D;2;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line">&#x2F;&#x2F;for(int j&#x3D;k;j&gt;0;j--)&#123;</span><br><span class="line">&#x2F;&#x2F;b[j]&#x3D;0;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line">&#x2F;&#x2F;&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">for(int n&#x3D;0;n&lt;10;n++)&#123;</span><br><span class="line">&#x2F;&#x2F;int a[256];</span><br><span class="line">char a[256];;</span><br><span class="line">int x,k&#x3D;1;</span><br><span class="line">for(int i&#x3D;0;i&lt;32;i++)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">bitset&lt;8&gt; xx(x);</span><br><span class="line">&#x2F;&#x2F;turn(x);</span><br><span class="line">&#x2F;&#x2F;cout&lt;&lt;xx;</span><br><span class="line">string b&#x3D;xx.to_string();</span><br><span class="line"></span><br><span class="line">for(int i&#x3D;0;i&lt;8;i++)&#123;</span><br><span class="line">a[k++]&#x3D;b[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;256;i++)&#123;</span><br><span class="line">&#x2F;&#x2F;cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span><br><span class="line">if(a[i]&#x3D;&#x3D;&#39;0&#39;) cout&lt;&lt;&quot;  &quot;;</span><br><span class="line">else cout&lt;&lt;&quot;.&quot;&lt;&lt;&quot; &quot;;</span><br><span class="line">if(i%16&#x3D;&#x3D;0) cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m;</span><br><span class="line">    string str1,str2;</span><br><span class="line">    while(cin&gt;&gt;n&gt;&gt;m)&#123;&#x2F;&#x2F;</span><br><span class="line">        bitset&lt;8&gt; b(n);</span><br><span class="line">        str1 &#x3D; b.to_string();</span><br><span class="line">        int len1 &#x3D; str1.length();</span><br><span class="line">        for(int i&#x3D;0;i&lt;len1;i++)&#123;</span><br><span class="line">          if(str1[i] &#x3D;&#x3D; &#39;0&#39;)printf(&quot;  &quot;);</span><br><span class="line">          else printf(&quot;* &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        bitset&lt;8&gt; c(m);</span><br><span class="line">        str2 &#x3D; c.to_string();</span><br><span class="line">        int len2 &#x3D; str2.length();</span><br><span class="line">        for(int i&#x3D;0;i&lt;len2;i++)&#123;</span><br><span class="line">          if(str2[i] &#x3D;&#x3D; &#39;0&#39;)printf(&quot;  &quot;);</span><br><span class="line">          else printf(&quot;* &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三题：乘积尾零"><a href="#第三题：乘积尾零" class="headerlink" title="第三题：乘积尾零"></a>第三题：乘积尾零</h3><p>如下的10行数据，每行有10个整数，请你求出它们的乘积的末尾有多少个零？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5650</span> <span class="number">4542</span> <span class="number">3554</span> <span class="number">473</span> <span class="number">946</span> <span class="number">4114</span> <span class="number">3871</span> <span class="number">9073</span> <span class="number">90</span> <span class="number">4329</span> </span><br><span class="line"><span class="number">2758</span> <span class="number">7949</span> <span class="number">6113</span> <span class="number">5659</span> <span class="number">5245</span> <span class="number">7432</span> <span class="number">3051</span> <span class="number">4434</span> <span class="number">6704</span> <span class="number">3594</span> </span><br><span class="line"><span class="number">9937</span> <span class="number">1173</span> <span class="number">6866</span> <span class="number">3397</span> <span class="number">4759</span> <span class="number">7557</span> <span class="number">3070</span> <span class="number">2287</span> <span class="number">1453</span> <span class="number">9899</span> </span><br><span class="line"><span class="number">1486</span> <span class="number">5722</span> <span class="number">3135</span> <span class="number">1170</span> <span class="number">4014</span> <span class="number">5510</span> <span class="number">5120</span> <span class="number">729</span> <span class="number">2880</span> <span class="number">9019</span> </span><br><span class="line"><span class="number">2049</span> <span class="number">698</span> <span class="number">4582</span> <span class="number">4346</span> <span class="number">4427</span> <span class="number">646</span> <span class="number">9742</span> <span class="number">7340</span> <span class="number">1230</span> <span class="number">7683</span> </span><br><span class="line"><span class="number">5693</span> <span class="number">7015</span> <span class="number">6887</span> <span class="number">7381</span> <span class="number">4172</span> <span class="number">4341</span> <span class="number">2909</span> <span class="number">2027</span> <span class="number">7355</span> <span class="number">5649</span> </span><br><span class="line"><span class="number">6701</span> <span class="number">6645</span> <span class="number">1671</span> <span class="number">5978</span> <span class="number">2704</span> <span class="number">9926</span> <span class="number">295</span> <span class="number">3125</span> <span class="number">3878</span> <span class="number">6785</span> </span><br><span class="line"><span class="number">2066</span> <span class="number">4247</span> <span class="number">4800</span> <span class="number">1578</span> <span class="number">6652</span> <span class="number">4616</span> <span class="number">1113</span> <span class="number">6205</span> <span class="number">3264</span> <span class="number">2915</span> </span><br><span class="line"><span class="number">3966</span> <span class="number">5291</span> <span class="number">2904</span> <span class="number">1285</span> <span class="number">2193</span> <span class="number">1428</span> <span class="number">2265</span> <span class="number">8730</span> <span class="number">9436</span> <span class="number">7074</span> </span><br><span class="line"><span class="number">689</span> <span class="number">5510</span> <span class="number">8243</span> <span class="number">6114</span> <span class="number">337</span> <span class="number">4096</span> <span class="number">8199</span> <span class="number">7313</span> <span class="number">3685</span> <span class="number">211</span> </span><br></pre></td></tr></table></figure><p>注意：需要提交的是一个整数，表示末尾零的个数。不要填写任何多余内容。</p><p>+++</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">29×，应为31</span><br></pre></td></tr></table></figure><h6 id="计算每个数中有多少个因子2和5，取min-n2-n5"><a href="#计算每个数中有多少个因子2和5，取min-n2-n5" class="headerlink" title="计算每个数中有多少个因子2和5，取min(n2,n5);"></a>计算每个数中有多少个因子2和5，取min(n2,n5);</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">long long sum&#x3D;1;</span><br><span class="line">int main()&#123;</span><br><span class="line">int x;</span><br><span class="line">int n2&#x3D;0,n5&#x3D;0;</span><br><span class="line">for(int i&#x3D;0;i&lt;100;i++)&#123;</span><br><span class="line">&#x2F;&#x2F;while(cin&gt;&gt;x)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">if(x&#x3D;&#x3D;0) cout&lt;&lt;0;</span><br><span class="line">while(1)&#123;</span><br><span class="line">if(x%5&#x3D;&#x3D;0)&#123;</span><br><span class="line">n5++;</span><br><span class="line">x&#x2F;&#x3D;5;</span><br><span class="line">&#125;</span><br><span class="line">else if(x%2&#x3D;&#x3D;0)&#123;</span><br><span class="line">n2++;</span><br><span class="line">x&#x2F;&#x3D;2;</span><br><span class="line">&#125;</span><br><span class="line">else break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;min(n2,n5);</span><br><span class="line">&#x2F;&#x2F;cout&lt;&lt;cnt;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="第四题：测试次数"><a href="#第四题：测试次数" class="headerlink" title="第四题：测试次数"></a>第四题：测试次数</h3><p>x星球的居民脾气不太好，但好在他们生气的时候唯一的异常举动是：摔手机。<br>各大厂商也就纷纷推出各种耐摔型手机。x星球的质监局规定了手机必须经过耐摔测试，并且评定出一个耐摔指数来，之后才允许上市流通。</p><p>x星球有很多高耸入云的高塔，刚好可以用来做耐摔测试。塔的每一层高度都是一样的，与地球上稍有不同的是，他们的第一层不是地面，而是相当于我们的2楼。</p><p>如果手机从第7层扔下去没摔坏，但第8层摔坏了，则手机耐摔指数=7。<br>特别地，如果手机从第1层扔下去就坏了，则耐摔指数=0。<br>如果到了塔的最高层第n层扔没摔坏，则耐摔指数=n</p><p>为了减少测试次数，从每个厂家抽样3部手机参加测试。</p><p>某次测试的塔高为1000层，如果我们总是采用最佳策略，在最坏的运气下最多需要测试多少次才能确定手机的耐摔指数呢？</p><p>请填写这个最多测试次数。</p><p>注意：需要填写的是一个整数，不要填写任何多余内容。</p><p>+++</p><p>采用最佳策略</p><p>二分法 10次？错，考虑手机个数？难，先放着</p><p><a href="https://www.jianshu.com/p/3f56a77ab96e">https://www.jianshu.com/p/3f56a77ab96e</a></p><blockquote><blockquote><p>答案：19</p><p>题目原型是：双蛋模型，经典DP。李永乐老师讲过这道题，建议去B站找视频。</p><p>思路：（题意有个没讲到，只要手机没摔坏就能继续用）</p><p>先使用一个手机一层一层摔。</p><p>接下来DP转移方程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[ind][cnt]&#x3D;min(dp[ind][cnt],max(dp[k−1][cnt−1],dp[ind−k][cnt]))dp[ind][cnt]&#x3D;min(dp[ind][cnt],max(dp[k−1][cnt−1],dp[ind−k][cnt]))</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1010</span>][<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;in.txt&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">ios_base::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">1000</span>, m = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dp[i][<span class="number">1</span>] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cnt = <span class="number">2</span>; cnt &lt;= m; cnt++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ind = <span class="number">1</span>; ind &lt;= n; ind++) &#123;</span><br><span class="line">dp[ind][cnt] = <span class="number">1</span> + dp[ind - <span class="number">1</span>][cnt];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2</span>; k &lt;= ind; k++)</span><br><span class="line">dp[ind][cnt] = <span class="built_in">min</span>(dp[ind][cnt], <span class="number">1</span> + <span class="built_in">max</span>(dp[k - <span class="number">1</span>][cnt - <span class="number">1</span>], dp[ind - k][cnt]));</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; dp[n][m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="第五题：快速排序"><a href="#第五题：快速排序" class="headerlink" title="第五题：快速排序"></a>第五题：快速排序</h2><p>以下代码可以从数组a[]中找出第k小的元素。</p><p>它使用了类似快速排序中的分治算法，期望时间复杂度是O(N)的。</p><p>请仔细阅读分析源码，填写划线部分缺失的内容。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quick_select</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = <span class="built_in">rand</span>() % (r - l + <span class="number">1</span>) + l;</span><br><span class="line"><span class="keyword">int</span> x = a[p];</span><br><span class="line">&#123;<span class="keyword">int</span> t = a[p]; a[p] = a[r]; a[r] = t;&#125;</span><br><span class="line"><span class="keyword">int</span> i = l, j = r;</span><br><span class="line"><span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line"><span class="keyword">while</span>(i &lt; j &amp;&amp; a[i] &lt; x) i++;</span><br><span class="line"><span class="keyword">if</span>(i &lt; j) &#123;</span><br><span class="line">a[j] = a[i];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i &lt; j &amp;&amp; a[j] &gt; x) j--;</span><br><span class="line"><span class="keyword">if</span>(i &lt; j) &#123;</span><br><span class="line">a[i] = a[j];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a[i] = x;</span><br><span class="line">p = i;</span><br><span class="line"><span class="keyword">if</span>(i - l + <span class="number">1</span> == k) <span class="keyword">return</span> a[i];</span><br><span class="line"><span class="keyword">if</span>(i - l + <span class="number">1</span> &lt; k) <span class="keyword">return</span> <span class="built_in">quick_select</span>( _____________________________ ); <span class="comment">//填空</span></span><br><span class="line">    <span class="comment">// a, i + 1, r, k - (i - l + 1)</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">quick_select</span>(a, l, i - <span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">23</span>, <span class="number">58</span>, <span class="number">16</span>, <span class="number">27</span>, <span class="number">55</span>, <span class="number">13</span>, <span class="number">26</span>, <span class="number">24</span>, <span class="number">12</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">quick_select</span>(a, <span class="number">0</span>, <span class="number">14</span>, <span class="number">5</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：只填写划线部分缺少的代码，不要抄写已经存在的代码或符号。</p><h2 id="第六题：递增三元数组"><a href="#第六题：递增三元数组" class="headerlink" title="第六题：递增三元数组"></a>第六题：递增三元数组</h2><p>给定三个整数数组<br>A = [A1, A2, … AN],<br>B = [B1, B2, … BN],<br>C = [C1, C2, … CN]，<br>请你统计有多少个三元组(i, j, k) 满足：</p><ol><li>1 &lt;= i, j, k &lt;= N</li><li>Ai &lt; Bj &lt; Ck</li></ol><p>【输入格式】<br>第一行包含一个整数N。<br>第二行包含N个整数A1, A2, … AN。<br>第三行包含N个整数B1, B2, … BN。<br>第四行包含N个整数C1, C2, … CN。</p><p>对于30%的数据，1 &lt;= N &lt;= 100<br>对于60%的数据，1 &lt;= N &lt;= 1000<br>对于100%的数据，1 &lt;= N &lt;= 100000 0 &lt;= Ai, Bi, Ci &lt;= 100000</p><p>【输出格式】<br>一个整数表示答案</p><p>【样例输入】<br>3<br>1 1 1<br>2 2 2<br>3 3 3</p><p>【样例输出】<br>27</p><p>资源约定：<br>峰值内存消耗（含虚拟机） &lt; 256M<br>CPU消耗 &lt; 1000ms</p><p>请严格按要求输出，不要画蛇添足地打印类似：“请您输入…” 的多余内容。</p><p>+++</p><p>n^3肯定不行</p><p>为什么不考虑1 &lt;= i, j, k &lt;= N这个条件呢？</p><h6 id="lower-bound和upper-bound"><a href="#lower-bound和upper-bound" class="headerlink" title="lower_bound和upper_bound"></a>lower_bound和upper_bound</h6><blockquote><p>lower_bound(起始地址，结束地址，要查找的数值) 返回的是数值 <strong>第一个</strong> 出现的位置。</p><p>upper_bound(起始地址，结束地址，要查找的数值) 返回的是 第一个大于待查找数值 出现的位置。</p><p>binary_search(起始地址，结束地址，要查找的数值)  返回的是是否存在这么一个数，是一个<strong>bool值</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; t;</span><br><span class="line">t.push_back(1);</span><br><span class="line">t.push_back(2);</span><br><span class="line">t.push_back(3);</span><br><span class="line">t.push_back(4);</span><br><span class="line">t.push_back(6);</span><br><span class="line">t.push_back(7);</span><br><span class="line">t.push_back(8);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int low&#x3D;lower_bound(t.begin(),t.end(),5)-t.begin();</span><br><span class="line">int upp&#x3D;upper_bound(t.begin(),t.end(),5)-t.begin();</span><br></pre></td></tr></table></figure><p>减去开始地址</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">int</span> a[MAXN],b[MAXN],c[MAXN];</span><br><span class="line"><span class="keyword">int</span> n,sum;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cin&gt;&gt;n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;c[i]);</span><br><span class="line">  <span class="built_in">sort</span>(a,a+n);</span><br><span class="line">  <span class="built_in">sort</span>(b,b+n);</span><br><span class="line">  <span class="built_in">sort</span>(c,c+n);</span><br><span class="line">  sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;  <span class="comment">//遍历 b[] </span></span><br><span class="line">    <span class="keyword">int</span> x = (<span class="built_in">lower_bound</span>(a,a+n,b[i]) - a);  <span class="comment">//a[]中比 b[i]小的个数 </span></span><br><span class="line">    <span class="keyword">int</span> y = (n - (<span class="built_in">upper_bound</span>(c,c+n,b[i]) - c));  <span class="comment">//c[]中比 b[i]大的个数 </span></span><br><span class="line">    sum += (<span class="keyword">long</span> <span class="keyword">long</span>)x * y;<span class="comment">//需要使用longlong才能通过全部数据</span></span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;sum;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第七题：螺旋折线"><a href="#第七题：螺旋折线" class="headerlink" title="第七题：螺旋折线"></a>第七题：螺旋折线</h2><p>如图p1.png所示的螺旋折线经过平面上所有整点恰好一次。<br>对于整点(X, Y)，我们定义它到原点的距离dis(X, Y)是从原点到(X, Y)的螺旋折线段的长度。</p><p>例如dis(0, 1)=3, dis(-2, -1)=9</p><p>给出整点坐标(X, Y)，你能计算出dis(X, Y)吗？</p><p>【输入格式】<br>X和Y</p><p>对于40%的数据，-1000 &lt;= X, Y &lt;= 1000<br>对于70%的数据，-100000 &lt;= X， Y &lt;= 100000<br>对于100%的数据, -1000000000 &lt;= X, Y &lt;= 1000000000</p><p>【输出格式】<br>输出dis(X, Y)</p><p>【样例输入】<br>0 1</p><p>【样例输出】<br>3</p><p><img src="https://gitee.com//riotian/blogimage/raw/master/img/20201004113554.png" alt="p1"></p><ul><li><a href="https://codechina.csdn.net/?utm_source=csdn_toolbar">码</a></li><li><a href="https://live.csdn.net/?utm_source=csdn_toolbar">直播</a></li><li><a href="https://ac.csdn.net/">能力认证</a></li><li><a href="https://studentclub.csdn.net/">高校</a></li></ul><p><a href="https://blog.csdn.net/weixin_45586698"><img src="https://profile.csdnimg.cn/D/F/2/2_weixin_45586698" alt="img"></a></p><p><a href="https://mall.csdn.net/vip">会员中心</a></p><p><a href="https://i.csdn.net/#/user-center/collection-list?type=1">收藏</a></p><p><a href="https://blog.csdn.net/nav/watchers">动态</a></p><p><a href="https://i.csdn.net/#/msg/index">消息</a></p><p><a href="https://mp.csdn.net/">创作中心</a></p><h1 id="2017年第八届C-C-B组蓝桥杯省赛真题"><a href="#2017年第八届C-C-B组蓝桥杯省赛真题" class="headerlink" title="2017年第八届C/C++ B组蓝桥杯省赛真题"></a>2017年第八届C/C++ B组蓝桥杯省赛真题</h1><h3 id="第一题：购物单-5分"><a href="#第一题：购物单-5分" class="headerlink" title="第一题：购物单(5分)"></a>第一题：购物单(5分)</h3><p><strong>题目描述</strong><br>小明刚刚找到工作，老板人很好，只是老板夫人很爱购物。老板忙的时候经常让小明帮忙到商场代为购物。小明很厌烦，但又不好推辞。<br>这不，XX大促销又来了！老板夫人开出了长长的购物单，都是有打折优惠的。小明也有个怪癖，不到万不得已，从不刷卡，直接现金搞定。现在小明很心烦，请你帮他计算一下，需要从取款机上取多少现金，才能搞定这次购物。<br>取款机只能提供100元面额的纸币。小明想尽可能少取些现金，够用就行了。 你的任务是计算出，小明最少需要取多少现金。以下是让人头疼的购物单，为了保护隐私，物品名称被隐藏了。</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">****     180.90       88 </span><br><span class="line">****      10.25       65</span><br><span class="line">****      56.14       90</span><br><span class="line">****     104.65       90</span><br><span class="line">****     100.30       80</span><br><span class="line">****     297.15       50</span><br><span class="line">****      26.75       65</span><br><span class="line">****     130.62       50</span><br><span class="line">****     240.28       58</span><br><span class="line">****     270.62       80</span><br><span class="line">****     115.87       88</span><br><span class="line">****     247.34       95</span><br><span class="line">****      73.21       90</span><br><span class="line">****     101.00       50</span><br><span class="line">****      79.54       50</span><br><span class="line">****     278.44       70</span><br><span class="line">****     199.26       50</span><br><span class="line">****      12.97       90</span><br><span class="line">****     166.30       78</span><br><span class="line">****     125.50       58</span><br><span class="line">****      84.98       90</span><br><span class="line">****     113.35       68</span><br><span class="line">****     166.57       50</span><br><span class="line">****      42.56       90</span><br><span class="line">****      81.90       95</span><br><span class="line">****     131.78       80</span><br><span class="line">****     255.89       78</span><br><span class="line">****     109.17       90</span><br><span class="line">****     146.69       68</span><br><span class="line">****     139.33       65</span><br><span class="line">****     141.16       78</span><br><span class="line">****     154.74       80</span><br><span class="line">****      59.42       80</span><br><span class="line">****      85.44       68</span><br><span class="line">****     293.70       88</span><br><span class="line">****     261.79       65</span><br><span class="line">****      11.30       88</span><br><span class="line">****     268.27       58</span><br><span class="line">****     128.29       88</span><br><span class="line">****     251.03       80</span><br><span class="line">****     208.39       75</span><br><span class="line">****     128.88       75</span><br><span class="line">****      62.06       90</span><br><span class="line">****     225.87       75</span><br><span class="line">****      12.89       75</span><br><span class="line">****      34.28       75</span><br><span class="line">****      62.16       58</span><br><span class="line">****     129.12       50</span><br><span class="line">****     218.37       50</span><br><span class="line">****     289.69       80</span><br></pre></td></tr></table></figure><hr><p>需要说明的是，88折指的是按标价的88%计算，而8折是按80%计算，余者类推。<br>特别地，半价是按50%计算。<br>请提交小明要从取款机上提取的金额，单位是元。<br>答案是一个整数，类似4300的样子，结尾必然是00，不要填写任何多余的内容。<br>特别提醒：不许携带计算器入场，也不能打开手机。</p><p>+++</p><blockquote><p>5200</p></blockquote><p>//一定要输入”\n” </p><h6 id="while-scanf-“-lf-lf-n”-amp-m-amp-n-不能要！-EOF，不知道为什么，因为CTRLZ作结？"><a href="#while-scanf-“-lf-lf-n”-amp-m-amp-n-不能要！-EOF，不知道为什么，因为CTRLZ作结？" class="headerlink" title="while(scanf(“****     %lf%lf\n”,&amp;m,&amp;n)){//不能要！=EOF，不知道为什么，因为CTRLZ作结？"></a>while(scanf(“****     %lf%lf\n”,&amp;m,&amp;n)){//不能要！=EOF，不知道为什么，因为CTRLZ作结？</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()&#123;</span><br><span class="line">double m,n;</span><br><span class="line">double sum&#x3D;0;</span><br><span class="line">&#x2F;&#x2F;一定要输入&quot;\n&quot; </span><br><span class="line">while(scanf(&quot;****     %lf%lf\n&quot;,&amp;m,&amp;n))&#123;&#x2F;&#x2F;不能要！&#x3D;EOF，不知道为什么，因为CTRLZ作结？ </span><br><span class="line">sum&#x3D;sum+m*n&#x2F;100;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%.0lf&quot;,sum);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="第二题：等差素数列（7分）"><a href="#第二题：等差素数列（7分）" class="headerlink" title="第二题：等差素数列（7分）"></a>第二题：等差素数列（7分）</h3><p>题目描述<br>2,3,5,7,11,13,…是素数序列。<br>类似：7,37,67,97,127,157 这样完全由素数组成的等差数列，叫等差素数数列。<br>上边的数列公差为30，长度为6。<br>2004年，格林与华人陶哲轩合作证明了：存在任意长度的素数等差数列。<br>这是数论领域一项惊人的成果！<br>有这一理论为基础，请你借助手中的计算机，满怀信心地搜索：<br>长度为10的等差素数列，其公差最小值是多少？<br>注意：需要提交的是一个整数，不要填写任何多余的内容和说明文字。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2017-2020部分真题&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="https://miaomiao7.github.io/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>《我爱你》</title>
    <link href="https://miaomiao7.github.io/2021/03/24/%E6%88%91%E7%88%B1%E4%BD%A0/"/>
    <id>https://miaomiao7.github.io/2021/03/24/%E6%88%91%E7%88%B1%E4%BD%A0/</id>
    <published>2021-03-24T08:09:07.000Z</published>
    <updated>2021-04-21T00:45:34.087Z</updated>
    
    <content type="html"><![CDATA[<p>余秀华</p><span id="more"></span><p>地活着，每天打水，煮饭，按时吃药 </p><p>阳光好的时候就把自己放进去，像放一块陈皮 </p><p>茶叶轮换着喝：菊花，茉莉，玫瑰，柠檬 </p><p>这些美好的事物仿佛把我往春天的路上带 </p><p>所以我一次次按住内心的雪 </p><p>它们过于洁白过于接近春天 </p><p>在干净的院子里读你的诗歌。这人间情事 </p><p>恍惚如突然飞过的麻雀儿 </p><p>而光阴皎洁。我不适宜肝肠寸断 </p><p>如果给你寄一本书，我不会寄给你诗歌 </p><p>我要给你一本关于植物，关于庄稼的 </p><p>告诉你稻子和稗子的区别 </p><p>告诉你一棵稗子提心吊胆的 </p><p>春天</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;余秀华&lt;/p&gt;</summary>
    
    
    
    <category term="碎" scheme="https://miaomiao7.github.io/categories/%E7%A2%8E/"/>
    
    <category term="摘录" scheme="https://miaomiao7.github.io/categories/%E7%A2%8E/%E6%91%98%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>算法笔记练习</title>
    <link href="https://miaomiao7.github.io/2021/03/12/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E7%BB%83%E4%B9%A0/"/>
    <id>https://miaomiao7.github.io/2021/03/12/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E7%BB%83%E4%B9%A0/</id>
    <published>2021-03-12T13:56:11.000Z</published>
    <updated>2021-04-21T08:12:05.429Z</updated>
    
    <content type="html"><![CDATA[<p>算法笔记学习</p><span id="more"></span><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="2-7-指针"><a href="#2-7-指针" class="headerlink" title="2.7 指针"></a>2.7 指针</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void swap(int* a,int* b)&#123;</span><br><span class="line">int temp;</span><br><span class="line">temp&#x3D;*a;</span><br><span class="line">*a&#x3D;*b;</span><br><span class="line">*b&#x3D;temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能int* temp; *temp= *a;因为指针变量存放是随机的</p><p>可以int x; int* temp=&x;赋初值</p><h6 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h6><p>函数的参数是作为局部变量的，对局部变量的操作不会影响外部变量。</p><p>不使用指针，使用C++的“引用”（别名）</p><p>只需要在函数参数类型后面加个&amp;就可以了</p><p>和取地址运算符区分开，<strong>引用不是取地址的意思</strong></p><h3 id="2-8-结构体"><a href="#2-8-结构体" class="headerlink" title="2.8 结构体"></a>2.8 结构体</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sruct stu&#123;</span><br><span class="line">int id;</span><br><span class="line">stu* next;</span><br><span class="line">&#125;s,*P;</span><br><span class="line"></span><br><span class="line">(*p).id</span><br><span class="line">(*p).next</span><br><span class="line"></span><br><span class="line">p-&gt;id;</span><br><span class="line">p-&gt;next;</span><br></pre></td></tr></table></figure><p>初始化结构体：构造函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sruct stu&#123;</span><br><span class="line">int id;</span><br><span class="line">stu(int id)&#123;</span><br><span class="line">id&#x3D;x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-9-浮点数比较"><a href="#2-9-浮点数比较" class="headerlink" title="2.9 浮点数比较"></a>2.9 浮点数比较</h3><p>修正</p><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="3-1-简单模拟"><a href="#3-1-简单模拟" class="headerlink" title="3.1.简单模拟"></a>3.1.简单模拟</h3><h4 id="☆1032-挖掘机技术哪家强-20-分"><a href="#☆1032-挖掘机技术哪家强-20-分" class="headerlink" title="☆1032 挖掘机技术哪家强 (20 分)"></a>☆1032 挖掘机技术哪家强 (20 分)</h4><p>为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。</p><p><strong>输入格式：</strong></p><p>输入在第 1 行给出不超过 105 的正整数 <em>N</em>，即参赛人数。随后 <em>N</em> 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。</p><p><strong>输出格式</strong>：</p><p>在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。</p><p><strong>输入样例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3 65</span><br><span class="line">2 80</span><br><span class="line">1 100</span><br><span class="line">2 70</span><br><span class="line">3 40</span><br><span class="line">3 0</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 150</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,id,score,max=<span class="number">0</span>,key=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> sum[<span class="number">100010</span>];<span class="comment">//=&#123;0&#125; </span></span><br><span class="line"><span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(sum));</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;<span class="comment">//while不可取</span></span><br><span class="line"><span class="comment">//cin&gt;&gt;id&gt;&gt;a[id];</span></span><br><span class="line">cin&gt;&gt;id&gt;&gt;score;</span><br><span class="line">sum[id]+=score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="comment">//从1开始写外面 </span></span><br><span class="line"><span class="keyword">if</span>(sum[i]&gt;max)&#123;</span><br><span class="line">max=sum[i];</span><br><span class="line">key=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;key&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;max;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2查找元素"><a href="#3-2查找元素" class="headerlink" title="3.2查找元素"></a>3.2查找元素</h3><h3 id="3-3图形输出"><a href="#3-3图形输出" class="headerlink" title="3.3图形输出"></a>3.3图形输出</h3><h4 id="☆1036-跟奥巴马一起编程-15-分"><a href="#☆1036-跟奥巴马一起编程-15-分" class="headerlink" title="☆1036 跟奥巴马一起编程 (15 分)"></a>☆1036 跟奥巴马一起编程 (15 分)</h4><p>美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！</p><p><strong>输入格式</strong>：</p><p>输入在一行中给出正方形边长 <em>N</em>（3≤<em>N</em>≤20）和组成正方形边的某种字符 C，间隔一个空格。</p><p><strong>输出格式</strong>：</p><p>输出由给定字符 C 画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。</p><p><strong>输入样例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 a</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaa</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">aaaaaaaaaa</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> x=(<span class="keyword">double</span>)n/<span class="number">2</span>;<span class="comment">//(double)</span></span><br><span class="line">t=x&gt;(<span class="keyword">int</span>)x?(<span class="keyword">int</span>)x+<span class="number">1</span>:(<span class="keyword">int</span>)x;</span><br><span class="line"><span class="comment">//if(n%2==1)</span></span><br><span class="line"><span class="comment">//t=n/2+1;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//t=n/2;</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=t<span class="number">-1</span>;i++)&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n<span class="number">-2</span>;j++)</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,c);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="总结：四舍五入、转换类型"><a href="#总结：四舍五入、转换类型" class="headerlink" title="总结：四舍五入、转换类型"></a>总结：四舍五入、转换类型</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int 舍弃小数点后</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=<span class="number">11</span>;</span><br><span class="line"><span class="keyword">double</span> a=(<span class="keyword">double</span>)n/<span class="number">2</span>;<span class="comment">//把（int）n转换为 （double）n,否则x还是int型</span></span><br><span class="line">    cout&lt;&lt;(<span class="keyword">int</span>)a&lt;&lt;endl;  <span class="comment">//向下取整</span></span><br><span class="line">    cout&lt;&lt;(a&gt;(<span class="keyword">int</span>)a?(<span class="keyword">int</span>)a+<span class="number">1</span>:(<span class="keyword">int</span>)a)&lt;&lt;endl;   <span class="comment">//向上取整</span></span><br><span class="line">    cout&lt;&lt;(<span class="keyword">int</span>)(a+<span class="number">0.5</span>)&lt;&lt;endl;<span class="comment">//四舍五入  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1022-D进制的A-B-20-分"><a href="#1022-D进制的A-B-20-分" class="headerlink" title="1022 D进制的A+B (20 分)"></a>1022 D进制的A+B (20 分)</h4><p>输入两个非负 10 进制整数 <em>A</em> 和 <em>B</em> (≤230−1)，输出 <em>A</em>+<em>B</em> 的 <em>D</em> (1&lt;<em>D</em>≤10)进制数。</p><p><strong>输入格式</strong>：</p><p>输入在一行中依次给出 3 个整数 <em>A</em>、<em>B</em> 和 <em>D</em>。</p><p><strong>输出格式</strong>：</p><p>输出 <em>A</em>+<em>B</em> 的 <em>D</em> 进制数。</p><p><strong>输入样例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 456 8</span><br></pre></td></tr></table></figure><p><strong>输出样例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1103</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,d;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;d;</span><br><span class="line"><span class="keyword">int</span> sum=a+b;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">31</span>];</span><br><span class="line"><span class="keyword">if</span>(sum==<span class="number">0</span>)</span><br><span class="line">cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(sum)&#123;</span><br><span class="line">ans[k++]=sum%d;</span><br><span class="line">sum/=d;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=k<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">cout&lt;&lt;ans[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-4-日期处理"><a href="#3-4-日期处理" class="headerlink" title="3.4 日期处理"></a>3.4 日期处理</h3><p>判断闰年</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(year%4&#x3D;&#x3D;0&amp;&amp;year%100!&#x3D;0)||(year%400&#x3D;&#x3D;0)</span><br></pre></td></tr></table></figure><h3 id="3-6字符串处理"><a href="#3-6字符串处理" class="headerlink" title="3.6字符串处理"></a>3.6字符串处理</h3><h4 id="☆1009-说反话-20-分"><a href="#☆1009-说反话-20-分" class="headerlink" title="☆1009 说反话 (20 分)"></a>☆1009 说反话 (20 分)</h4><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p><p>输入格式：</p><p>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p><p>输出格式：</p><p>每个测试用例的输出占一行，输出倒序后的句子。</p><p>输入样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World Here I Come</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Come I Here World Hello</span><br></pre></td></tr></table></figure><p>读入带空格的整个句子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int num&#x3D;0;</span><br><span class="line">char words[100];</span><br><span class="line">while(scanf(&quot;%c&quot;,&amp;words[num])!&#x3D;EOF)&#123;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;0;i&lt;num-1;i++)&#123;</span><br><span class="line">cout&lt;&lt;words[i];</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int num&#x3D;0;</span><br><span class="line">char words[100][100];</span><br><span class="line">while(scanf(&quot;%s&quot;,&amp;words[num])!&#x3D;EOF)&#123;&#x2F;&#x2F;%s </span><br><span class="line">num++;&#x2F;&#x2F;单词数 </span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;num-1;i&gt;&#x3D;0;i--)&#123;</span><br><span class="line">cout&lt;&lt;words[i];&#x2F;&#x2F;&lt;&lt;&#39; &#39;;</span><br><span class="line">if(i&gt;0)</span><br><span class="line">cout&lt;&lt;&#39; &#39;;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;cout&lt;&lt;3;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gets读入空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char words[500];</span><br><span class="line">gets(words);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fanshou</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> words[<span class="number">500</span>];</span><br><span class="line"><span class="built_in">gets</span>(words);</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(words)<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(words[i]==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;t;j--)</span><br><span class="line"> cout&lt;&lt;words[j];</span><br><span class="line">cout&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">t=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="built_in">strlen</span>(words)<span class="number">-1</span>;j&gt;t;j--)</span><br><span class="line"> cout&lt;&lt;words[j];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strlen可以获得字符串真实长度,数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strlen(words)</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a+b</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line">string m,n;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;m&gt;&gt;b&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> suma=<span class="number">0</span>,sumb=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line"><span class="keyword">int</span> t=m[i]-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//-&#x27;0&#x27;</span></span><br><span class="line">suma=(suma+t)*a;</span><br><span class="line">&#125;</span><br><span class="line">suma/=a;<span class="comment">// </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line"><span class="keyword">int</span> t=n[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">sumb=(sumb+t)*b;</span><br><span class="line">&#125;</span><br><span class="line">sumb/=b;</span><br><span class="line">cout&lt;&lt;suma+sumb;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>string下标对单个字符进行访问，使用数字运算注意转换，m.length()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(int i&#x3D;0;i&lt;m.length();i++)&#123;</span><br><span class="line">int t&#x3D;m[i]-&#39;0&#39;;&#x2F;&#x2F;-&#39;0&#39;</span><br><span class="line">suma&#x3D;(suma+t)*a;</span><br><span class="line">&#125;</span><br><span class="line">suma&#x2F;&#x3D;a;&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p>getchar()识别换行符</p><p>另一种+</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">char a[100];</span><br><span class="line">gets(a);</span><br><span class="line">char words[100][100];&#x2F;&#x2F;存单词 </span><br><span class="line">int r&#x3D;0,h&#x3D;0;</span><br><span class="line">for(int i&#x3D;0;i&lt;strlen(a);i++)&#123;</span><br><span class="line">if(a[i]!&#x3D;&#39; &#39;)&#123;</span><br><span class="line">words[r][h++]&#x3D;a[i];</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">words[r][h]&#x3D;&#39;\0&#39;;&#x2F;&#x2F;末尾添加结束符&#39;\0&#39; </span><br><span class="line">r++;</span><br><span class="line">h&#x3D;0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;r;i&gt;&#x3D;0;i--)&#123;&#x2F;&#x2F;最后一个单词无空格，所以不是r-1 </span><br><span class="line">printf(&quot;%s&quot;,words[i]);</span><br><span class="line">if(i&gt;0) printf(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="4-1排序"><a href="#4-1排序" class="headerlink" title="4.1排序"></a>4.1排序</h3><p>sort</p><h6 id="比较字典序：strcmp函数"><a href="#比较字典序：strcmp函数" class="headerlink" title="比较字典序：strcmp函数"></a>比较字典序：strcmp函数</h6><p>return strcmp(a.name,b.name)&lt;0即a.name字典序&lt;b.name</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct Student&#123;</span><br><span class="line">char name[10];</span><br><span class="line">char id[10];</span><br><span class="line">int score;</span><br><span class="line">int r;</span><br><span class="line">&#125;stu[100];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;分数高，字典序小</span><br><span class="line">bool cmp(Student a,Student b)&#123;</span><br><span class="line">if(a.score!&#x3D;b.score)</span><br><span class="line">return a.score&gt;b.score;</span><br><span class="line">else</span><br><span class="line">return strcmp(a.name,b.name)&lt;0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排名的实现,基于上述排序 1,2,2,2,5</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">stu[<span class="number">0</span>].r=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(stu[i].score==stu[i<span class="number">-1</span>].score)</span><br><span class="line">        stu[i].r=stu[i<span class="number">-1</span>].r;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        stu[i].r=i+<span class="number">1</span>;<span class="comment">//错！！！stu[i-1].r+1;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1025 PAT Ranking (25 分)</p><p>Programming Ability Test (PAT) is organized by the College of Computer Science and Technology of Zhejiang University. Each test is supposed to run simultaneously in several places, and the ranklists will be merged immediately after the test. Now it is your job to write a program to correctly merge all the ranklists and generate the final rank.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive number <em>N</em> (≤100), the number of test locations. Then <em>N</em> ranklists follow, each starts with a line containing a positive integer <em>K</em> (≤300), the number of testees, and then <em>K</em> lines containing the registration number (a 13-digit number) and the total score of each testee. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print in one line the total number of testees. Then print the final ranklist in the following format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registration_number final_rank location_number local_rank</span><br></pre></td></tr></table></figure><p>The locations are numbered from 1 to <em>N</em>. The output must be sorted in nondecreasing order of the final ranks. The testees with the same score must have the same rank, and the output must be sorted in nondecreasing order of their registration numbers.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br><span class="line">1234567890001 95</span><br><span class="line">1234567890005 100</span><br><span class="line">1234567890003 95</span><br><span class="line">1234567890002 77</span><br><span class="line">1234567890004 85</span><br><span class="line">4</span><br><span class="line">1234567890013 65</span><br><span class="line">1234567890011 25</span><br><span class="line">1234567890014 100</span><br><span class="line">1234567890012 85</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">1234567890005 1 1 1</span><br><span class="line">1234567890014 1 2 1</span><br><span class="line">1234567890001 3 1 2</span><br><span class="line">1234567890003 3 1 2</span><br><span class="line">1234567890004 5 1 4</span><br><span class="line">1234567890012 5 2 2</span><br><span class="line">1234567890002 7 1 5</span><br><span class="line">1234567890013 8 2 3</span><br><span class="line">1234567890011 9 2 4</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-2散列"><a href="#4-2散列" class="headerlink" title="4.2散列"></a>4.2散列</h3><blockquote><p><strong>散列查找1</strong> <strong>电话聊天狂人</strong></p><p>给定大量手机用户通话记录，找出其中通话次数最多的聊天狂人。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入首先给出正整数<em>N</em>（≤105），为通话记录条数。随后<em>N</em>行，每行给出一条通话记录。简单起见，这里只列出拨出方和接收方的11位数字构成的手机号码，其中以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中给出聊天狂人的手机号码及其通话次数，其间以空格分隔。如果这样的人不唯一，则输出狂人中最小的号码及其通话次数，并且附加给出并列狂人的人数。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">13005711862 13588625832</span><br><span class="line">13505711862 13088625832</span><br><span class="line">13588625832 18087925832</span><br><span class="line">15005713862 13588625832</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13588625832 3</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">map&lt;string,int&gt; mp;</span><br><span class="line">string number,num;</span><br><span class="line">int max&#x3D;0;</span><br><span class="line">for(int i&#x3D;0;i&lt;2*n;i++)&#123;</span><br><span class="line">cin&gt;&gt;number;</span><br><span class="line">mp[number]++;</span><br><span class="line">if(mp[number]&gt;max)&#123;</span><br><span class="line">max&#x3D;mp[number];</span><br><span class="line">num&#x3D;number;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int count&#x3D;0;&#x2F;&#x2F;1;肯定会和自己相同 </span><br><span class="line">for(map&lt;string,int&gt;::vector it&#x3D;mp.begin();it!&#x3D;mp.end();it++)&#123;</span><br><span class="line">if(it-&gt;second&#x3D;&#x3D;max)&#123;</span><br><span class="line">count++;</span><br><span class="line">if(it-&gt;first&lt;num)&#123;</span><br><span class="line">num&#x3D;it-&gt;first;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(count&#x3D;&#x3D;1)</span><br><span class="line">cout&lt;&lt;num&lt;&lt;&#39; &#39;&lt;&lt;max;</span><br><span class="line">else</span><br><span class="line">cout&lt;&lt;num&lt;&lt;&#39; &#39;&lt;&lt;max&lt;&lt;&#39; &#39;&lt;&lt;count;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3递归"><a href="#4-3递归" class="headerlink" title="4.3递归"></a>4.3递归</h3><h6 id="⭐斐波那契数列"><a href="#⭐斐波那契数列" class="headerlink" title="⭐斐波那契数列"></a>⭐斐波那契数列</h6><p>1，1，2，3，5，8，13，21，···</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int F(int n)&#123;</span><br><span class="line">if(n&#x3D;&#x3D;0||n&#x3D;&#x3D;1) return 1;&#x2F;&#x2F;递归边界</span><br><span class="line">else return F(n-1)+F(n-2);&#x2F;&#x2F;递归式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">10</span>],hash[<span class="number">10</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">P</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;<span class="comment">//从[1]开始</span></span><br><span class="line"><span class="keyword">if</span>(index=n+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            cout&lt;&lt;num[i];            </span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hash[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            num[index]=i;</span><br><span class="line">            hash[i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">P</span>(index+<span class="number">1</span>);</span><br><span class="line">            hash[i]=flaes;<span class="comment">//例：n=3;1,2,3;[3]解决后释放[2]1,_,_ —&gt;1,3,_</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">P</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="n皇后问题"><a href="#n皇后问题" class="headerlink" title="n皇后问题"></a>n皇后问题</h6><p>枚举1~n所有排列，判断排列是不是在同一对角线</p><p>暴力，先列出全排列，再从所有排列里找出合法的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> pnum[<span class="number">10</span>],hash[<span class="number">10</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">P</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index==n+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(i-j)==<span class="built_in">abs</span>(pnum[i]-pnum[j]))&#123;<span class="comment">//判断</span></span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="literal">true</span>) count++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hash[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            pnum[index]=i;</span><br><span class="line">            hash[i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">P</span>(index+<span class="number">1</span>);</span><br><span class="line">            hash[i]=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="回溯n皇后"><a href="#回溯n皇后" class="headerlink" title="回溯n皇后"></a>回溯n皇后</h6><p>产生排列时只产生合法的排列，</p><p>现有列出已不合法不继续往下递归，直接返回上层</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> pnum[<span class="number">10</span>],hash[<span class="number">10</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">P</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index==n+<span class="number">1</span>)&#123;</span><br><span class="line">         count++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(hash[i]==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> pre=<span class="number">1</span>;per&lt;index;per++)&#123;<span class="comment">//遍历之前的皇后</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">abs</span>(index-per)==<span class="built_in">abs</span>(pnum[index]-pnum[per]))&#123;</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;        </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                pnum[index]=i;</span><br><span class="line">                hash[i]=<span class="literal">true</span>;     </span><br><span class="line">                <span class="built_in">P</span>(index+<span class="number">1</span>);</span><br><span class="line">                hash[i]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4贪心"><a href="#4-4贪心" class="headerlink" title="4.4贪心"></a>4.4贪心</h3><blockquote><p>1020 月饼 (25 分)</p><p>月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。</p><p>注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 <em>N</em> 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 <em>D</em> 表示市场最大需求量。随后一行给出 <em>N</em> 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 <em>N</em> 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 20</span><br><span class="line">18 15 10</span><br><span class="line">75 72 45</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">94.50</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct MT &#123;</span><br><span class="line">float store;</span><br><span class="line">float totle;</span><br><span class="line">float price;</span><br><span class="line">&#125;;</span><br><span class="line">bool cmp(MT a,MT b)&#123;</span><br><span class="line">return a.price&gt;b.price;</span><br><span class="line">&#125; </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n,d;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;d;</span><br><span class="line">MT mt[1010];</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;mt[i].store;</span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;mt[i].totle;</span><br><span class="line">float t&#x3D;mt[i].totle;</span><br><span class="line">mt[i].price&#x3D;t&#x2F;mt[i].store;</span><br><span class="line">&#125;</span><br><span class="line">sort(mt,mt+n,cmp);</span><br><span class="line">float sum&#x3D;0;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">if(d&gt;&#x3D;mt[i].store)&#123;</span><br><span class="line">sum+&#x3D;mt[i].totle;</span><br><span class="line">d-&#x3D;mt[i].store;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">sum+&#x3D;mt[i].price*d;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%.2f&quot;,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1023 组个最小数 (20 分)</p><p>给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。</p><p>现给定数字，请编写程序输出能够组成的最小的数。</p><h3 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。</p><h3 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出能够组成的最小的数。</p><h3 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 2 0 0 0 3 0 0 1 0</span><br></pre></td></tr></table></figure><h3 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10015558</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">60</span>],num,count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">cin&gt;&gt;num;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)&#123;</span><br><span class="line">a[count++]=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;count;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">a[<span class="number">0</span>]=a[i];<span class="comment">//swap(num[0],num[i]);</span></span><br><span class="line">a[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">cout&lt;&lt;a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5二分"><a href="#4-5二分" class="headerlink" title="4.5二分"></a>4.5二分</h3><h4 id="•-二分查找（未理解）"><a href="#•-二分查找（未理解）" class="headerlink" title="• 二分查找（未理解）"></a>• 二分查找（未理解）</h4><p>a[]     <code>int binarySearch(int a[],int right,int left,int x)&#123;&#125;</code></p><p>a       <code>binarySearch(a,0,n-1,6)</code></p><p>a[]严格递增序列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid;</span><br><span class="line"><span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">mid=(right+left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(x==a[mid]) <span class="keyword">return</span> mid;</span><br><span class="line"><span class="keyword">if</span>(x&gt;a[mid]) left=mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> right=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> n=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> a[n]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">15</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="built_in">binarySearch</span>(a,<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">6</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>严格递减序列<code> x&lt;a[mid]</code></p><p><code>mid=left+(right-left)/2</code>避免溢出</p><p>若a中元素可能重复：</p><p>求序列中第一个&gt;=x元素L的位置以及第一个&gt;x的元素R位置，存在区间左闭右开[L,R)</p><p>a取到n</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lower_bound</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;&quot;low:left=&quot;&lt;&lt;left&lt;&lt;&quot; right=&quot;&lt;&lt;right&lt;&lt;&quot; mid=&quot;&lt;&lt;mid&lt;&lt;&quot;  a[mid]=&quot;&lt;&lt;a[mid]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">        <span class="keyword">if</span>(x&lt;=a[mid]) right=mid;</span><br><span class="line">        <span class="keyword">else</span> left=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">upper_bound</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">       <span class="comment">//cout&lt;&lt;&quot;up:left=&quot;&lt;&lt;left&lt;&lt;&quot; right=&quot;&lt;&lt;right&lt;&lt;&quot; mid=&quot;&lt;&lt;mid&lt;&lt;&quot;  a[mid]=&quot;&lt;&lt;a[mid]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">        <span class="keyword">if</span>(x&lt;a[mid]) right=mid;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">else</span> left=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> n=<span class="number">13</span>;</span><br><span class="line">    <span class="keyword">int</span> a[n]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">15</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,<span class="built_in">lower_bound</span>(a,<span class="number">0</span>,n,<span class="number">6</span>),<span class="built_in">upper_bound</span>(a,<span class="number">0</span>,n,<span class="number">6</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="固定模板"><a href="#固定模板" class="headerlink" title="固定模板"></a>固定模板</h6><h4 id="•-二分拓展"><a href="#•-二分拓展" class="headerlink" title="• 二分拓展"></a>• 二分拓展</h4><p>计算根号2的近似值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=le<span class="number">-5</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">calSqrt</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> left=<span class="number">1</span>,right=<span class="number">2</span>,mid;</span><br><span class="line">    <span class="keyword">while</span>(right-left&gt;eps)&#123; <span class="comment">//       </span></span><br><span class="line">        mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">f</span>(mid)&gt;<span class="number">2</span>) right=mid;</span><br><span class="line">        <span class="keyword">else</span> left=mid;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> mid;<span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求方程f(x)的根</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=le<span class="number">-5</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">solve</span><span class="params">(<span class="keyword">double</span> L,<span class="keyword">double</span> R)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> left=L,right=R,mid;</span><br><span class="line">    <span class="keyword">while</span>(right-left&gt;eps)&#123; <span class="comment">//       </span></span><br><span class="line">        mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">f</span>(mid)&gt;<span class="number">0</span>) right=mid;</span><br><span class="line">        <span class="keyword">else</span> left=mid;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> mid;<span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果f(x)递减，只把需把<code> if(f(mid)&gt;0)</code>改为<code> if(f(mid)&lt;0)</code></p><p>装水问题</p><p>木棒切割问题</p><p>？</p><h3 id="4-6-two-pointers"><a href="#4-6-two-pointers" class="headerlink" title="4.6 two pointers"></a>4.6 two pointers</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">while(i&lt;j)&#123;</span><br><span class="line">if(a[i]+a[j]&#x3D;&#x3D;M)&#123;</span><br><span class="line">i&#x3D;i+1;</span><br><span class="line">j&#x3D;j-1;</span><br><span class="line">&#125;</span><br><span class="line">else if(a[i]+a[j]&gt;M)&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">else if(a[i]+a[j]&lt;M)&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列合并问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int merge(int a[],int b[],int c[],int n,int m)&#123;</span><br><span class="line">int index&#x3D;0,i&#x3D;0,j&#x3D;0;</span><br><span class="line">while(i&lt;n&amp;&amp;j&lt;m)&#123;</span><br><span class="line">if(a[i]&lt;&#x3D;b[j])&#123;</span><br><span class="line">c[index++]&#x3D;a[i++];</span><br><span class="line">&#x2F;&#x2F;c[index++]&#x3D;a[i];</span><br><span class="line">&#x2F;&#x2F;i++;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">c[index++]&#x3D;b[j];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">while(i&lt;n) c[index++]&#x3D;a[i++];</span><br><span class="line">while(j&lt;m) c[index++]&#x3D;b[j++];</span><br><span class="line">return index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="•-归并序列"><a href="#•-归并序列" class="headerlink" title="• 归并序列"></a>• 归并序列</h4><p>2-路归并排序</p><p>递归实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">void mergeSort(int a[],int left,int right)&#123;</span><br><span class="line">if(left&lt;right)&#123;</span><br><span class="line">int mid&#x3D;(left+right)&#x2F;2;</span><br><span class="line">mergeSort(a,left,mid);</span><br><span class="line">mergeSort(a,mid+1,right);</span><br><span class="line">merge(a,left,mid,mid+1,right)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void merge(int a[],int L1,int R1,int L2,int R2)&#123;</span><br><span class="line">int index&#x3D;0,i&#x3D;L1,j&#x3D;L2;</span><br><span class="line">while(i&lt;R1&amp;&amp;j&lt;R2)&#123;</span><br><span class="line">if(a[i]&lt;&#x3D;b[j])&#123;</span><br><span class="line">c[index++]&#x3D;a[i++];</span><br><span class="line">&#x2F;&#x2F;c[index++]&#x3D;a[i];</span><br><span class="line">&#x2F;&#x2F;i++;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">c[index++]&#x3D;b[j];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">while(i&lt;n) c[index++]&#x3D;a[i++];</span><br><span class="line">while(j&lt;m) c[index++]&#x3D;b[j++];</span><br><span class="line">for(int i&#x3D;0;i&lt;index;i++)&#123;</span><br><span class="line">A[L1+i]&#x3D;c[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非递归实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void mergeSort(int a[])&#123;</span><br><span class="line">for(int step&#x3D;2;step&#x2F;2&lt;&#x3D;n;step*&#x3D;2)&#123;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i+&#x3D;step)&#123;</span><br><span class="line">int mid&#x3D;i+step&#x2F;2-1;</span><br><span class="line">if(mid+1&lt;&#x3D;n)&#123;</span><br><span class="line">merge(a,i,mid,mid+1,min(i+step-1,n));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void mergeSort(int a[])&#123;</span><br><span class="line">for(int step&#x3D;2;step&#x2F;2&lt;&#x3D;n;step*&#x3D;2)&#123;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i+&#x3D;step)&#123;</span><br><span class="line">sort(a+i,a+min(i+step,n+1));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="•-快速排序"><a href="#•-快速排序" class="headerlink" title="• 快速排序"></a>• 快速排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int Partition(int a[],int left,int right)&#123;</span><br><span class="line">int temp&#x3D;a[left];</span><br><span class="line">while(left&lt;right)&#123;</span><br><span class="line">while(left&lt;right&amp;&amp;a[right]&gt;temp)  right--;&#x2F;&#x2F;?</span><br><span class="line">a[left]&#x3D;a[right];</span><br><span class="line">while(left&lt;right&amp;&amp;a[left]&lt;&#x3D;temp)  left++;</span><br><span class="line">a[right]&#x3D;a[left];</span><br><span class="line">&#125;</span><br><span class="line">a[left]&#x3D;temp;</span><br><span class="line">return left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void quickSort(int a[],int left,int right)&#123;</span><br><span class="line">if(left&lt;right)&#123;</span><br><span class="line">int pos&#x3D;Parition(a,left,right);</span><br><span class="line">quickSort(a,left,pos-1);</span><br><span class="line">quickSort(a,pos+1,right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随机数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;time.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">srand((unsigned)time(NULL));</span><br><span class="line">printf(&quot;%d&quot;,rand());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code> rand()%(b-a+1)+a</code>   [a,b]</p><h3 id="4-7-其他高效技巧与算法"><a href="#4-7-其他高效技巧与算法" class="headerlink" title="4.7 其他高效技巧与算法"></a>4.7 其他高效技巧与算法</h3><p>打表</p><p>递推</p><blockquote><p>1040 有几个PAT (25 分)</p><p>字符串 <code>APPAPT</code> 中包含了两个单词 <code>PAT</code>，其中第一个 <code>PAT</code> 是第 2 位(<code>P</code>)，第 4 位(<code>A</code>)，第 6 位(<code>T</code>)；第二个 <code>PAT</code> 是第 3 位(<code>P</code>)，第 4 位(<code>A</code>)，第 6 位(<code>T</code>)。</p><p>现给定字符串，问一共可以形成多少个 <code>PAT</code>？</p><h3 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入只有一行，包含一个字符串，长度不超过105，只包含 <code>P</code>、<code>A</code>、<code>T</code> 三种字母。</p><h3 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出给定字符串中包含多少个 <code>PAT</code>。由于结果可能比较大，只输出对 1000000007 取余数的结果。</p><h3 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;APPAPT</span><br></pre></td></tr></table></figure><h3 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;2</span><br></pre></td></tr></table></figure></blockquote><p>对于字符串中每个A，左边P的个数与右边T的个数乘积</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX=<span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1000000007</span>; </span><br><span class="line"><span class="comment">//char str[MAX];</span></span><br><span class="line"><span class="keyword">int</span> leftNumP[MAX]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//gets(str);</span></span><br><span class="line"><span class="comment">//PTA不支持gets,无空格直接用string </span></span><br><span class="line"><span class="comment">//int x=0;</span></span><br><span class="line"><span class="comment">//while(scanf(&quot;%c&quot;,&amp;str[x])!=EOF)&#123;</span></span><br><span class="line"><span class="comment">//x++;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">leftNumP[i]=leftNumP[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;P&#x27;</span>)&#123;</span><br><span class="line">leftNumP[i]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,rightNumT=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=s.<span class="built_in">length</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;T&#x27;</span>)&#123;</span><br><span class="line">rightNumT++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">ans=(ans+rightNumT*leftNumP[i])%MOD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>随机选择算法</p><h2 id="第五章-入门篇（3）–数学问题"><a href="#第五章-入门篇（3）–数学问题" class="headerlink" title="第五章 入门篇（3）–数学问题"></a>第五章 入门篇（3）–数学问题</h2><h3 id="5-1简单数学"><a href="#5-1简单数学" class="headerlink" title="5.1简单数学"></a>5.1简单数学</h3><blockquote><p>1019 数字黑洞 (20 分)</p><p>给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 <code>6174</code>，这个神奇的数字也叫 Kaprekar 常数。</p><p>例如，我们从<code>6767</code>开始，将得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">7766 - 6677 &#x3D; 1089</span><br><span class="line">9810 - 0189 &#x3D; 9621</span><br><span class="line">9621 - 1269 &#x3D; 8352</span><br><span class="line">8532 - 2358 &#x3D; 6174</span><br><span class="line">7641 - 1467 &#x3D; 6174</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><p>现给定任意 4 位正整数，请编写程序演示到达黑洞的过程。</p><h3 id="输入格式：-3"><a href="#输入格式：-3" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入给出一个 (0,104) 区间内的正整数 <em>N</em>。</p><h3 id="输出格式：-3"><a href="#输出格式：-3" class="headerlink" title="输出格式："></a>输出格式：</h3><p>如果 <em>N</em> 的 4 位数字全相等，则在一行内输出 <code>N - N = 0000</code>；否则将计算的每一步在一行内输出，直到 <code>6174</code> 作为差出现，输出格式见样例。注意每个数字按 <code>4</code> 位数格式输出。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6767</span><br></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7766 - 6677 &#x3D; 1089</span><br><span class="line">9810 - 0189 &#x3D; 9621</span><br><span class="line">9621 - 1269 &#x3D; 8352</span><br><span class="line">8532 - 2358 &#x3D; 6174</span><br></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2222</span><br></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2222 - 2222 &#x3D; 0000</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_array</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> num[])</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">num[i]=n%<span class="number">10</span>;</span><br><span class="line">n/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">to_number</span><span class="params">(<span class="keyword">int</span> num[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">sum=sum*<span class="number">10</span>+num[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,min,max;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">to_array</span>(n,num);</span><br><span class="line"><span class="built_in">sort</span>(num,num+<span class="number">4</span>);</span><br><span class="line">min=<span class="built_in">to_number</span>(num);</span><br><span class="line"><span class="built_in">sort</span>(num,num+<span class="number">4</span>,cmp);</span><br><span class="line">max=<span class="built_in">to_number</span>(num);</span><br><span class="line">n=max-min;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%04d - %04d = %04d\n&quot;</span>,max,min,n);</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">6174</span>||n==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;                                                                                     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2最大公约数与最小公倍数"><a href="#5-2最大公约数与最小公倍数" class="headerlink" title="5.2最大公约数与最小公倍数"></a>5.2最大公约数与最小公倍数</h3><p>最大公约数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__gcd(a,b);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int gcd(int a,int b)&#123;</span><br><span class="line">if(b&#x3D;&#x3D;0) return a;</span><br><span class="line">else return gcd(b,a%b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最大公倍数 <code>a*b/__gcd(a,b)</code></p><p>避免a*b溢出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a&#x2F;__gcd(a,b))*b</span><br></pre></td></tr></table></figure><h3 id="5-3-分数的四则运算"><a href="#5-3-分数的四则运算" class="headerlink" title="5.3 分数的四则运算"></a>5.3 分数的四则运算</h3><p>表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">struct Fraction&#123;</span><br><span class="line">int up,down;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>化简</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Fraction reduction(Fraction result)&#123;</span><br><span class="line">if(result.down&lt;0)&#123;</span><br><span class="line">result.up&#x3D;-result.up;</span><br><span class="line">result.down&#x3D;-result.down;</span><br><span class="line">&#125;</span><br><span class="line">if(result.up&#x3D;&#x3D;0)&#123;</span><br><span class="line">result.down&#x3D;1;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">int d&#x3D;__gcd((abs(resulr.up),abs(result.down));</span><br><span class="line">result.up&#x2F;&#x3D;d;</span><br><span class="line">result.down&#x2F;&#x3D;d;</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四则运算</p><p>加法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Fraction add(Fraction a,Fraction b)&#123;</span><br><span class="line">Fraction result;</span><br><span class="line">result.up&#x3D;a.up*b.down+b.up*a.down;</span><br><span class="line">result.down&#x3D;a.down*b.down;</span><br><span class="line">return reduction(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>减法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Fraction add(Fraction a,Fraction b)&#123;</span><br><span class="line">Fraction result;</span><br><span class="line">result.up&#x3D;a.up*b.down-b.up*a.down;</span><br><span class="line">result.down&#x3D;a.down*b.down;</span><br><span class="line">return reduction(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乘法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Fraction add(Fraction a,Fraction b)&#123;</span><br><span class="line">Fraction result;</span><br><span class="line">result.up&#x3D;a.up*b.up;</span><br><span class="line">result.down&#x3D;a.down*b.down;</span><br><span class="line">return reduction(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Fraction add(Fraction a,Fraction b)&#123;</span><br><span class="line">Fraction result;</span><br><span class="line">result.up&#x3D;a.up*b.down;</span><br><span class="line">result.down&#x3D;a.down*b.up;</span><br><span class="line">return reduction(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void showResult(Fraction r)&#123;</span><br><span class="line">r&#x3D;reduction(r);</span><br><span class="line">if(r.down&#x3D;&#x3D;1)</span><br><span class="line">printf(&quot;ll%d&quot;,r.up);</span><br><span class="line">else if(abs(r.up)&gt;r.down)</span><br><span class="line">printf(&quot;%d %d&#x2F;%d&quot;,r.up&#x2F;r.down,r.up%r.down,r.down);</span><br><span class="line">else </span><br><span class="line">printf(&quot;%d&#x2F;%d&quot;,r.up,r.down);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4素数"><a href="#5-4素数" class="headerlink" title="5.4素数"></a>5.4素数</h3><ul><li>1不是素数</li><li>素数表长至少比n大1</li><li>i&lt;maxn</li></ul><p>素数判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bool isPrime(int n)&#123;</span><br><span class="line">if(n&lt;&#x3D;1) return false;</span><br><span class="line">&#x2F;&#x2F;int sqr&#x3D;(int)sqrt(1*0*n);</span><br><span class="line">&#x2F;&#x2F;for(int i&#x3D;2;i&lt;&#x3D;sqr;i++)&#123;</span><br><span class="line">for(int i&#x3D;2;i*i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">if(n%i&#x3D;&#x3D;0) return false;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>素数表获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for(int i&#x3D;1;i&lt;maxn;i++)&#123;</span><br><span class="line">if(isPrime(i)&#x3D;&#x3D;true)&#123;</span><br><span class="line">prime[pnum++]&#x3D;i;</span><br><span class="line">&#x2F;&#x2F;p[i]&#x3D;true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>超过10^5:</p><p>—&gt;埃氏筛</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bool pr[maxn]&#x3D;&#123;0&#125;&#x2F;&#x2F;?false</span><br><span class="line">for(int i&#x3D;2;i&lt;maxn;i++)&#123;</span><br><span class="line">if(pr[i]&#x3D;&#x3D;flase)&#123;</span><br><span class="line">prime[prnum++]&#x3D;i;</span><br><span class="line">for(int j&#x3D;i+1;j&lt;maxn;j+&#x3D;i)&#123;</span><br><span class="line">p[j]&#x3D;true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-质因子分解"><a href="#5-5-质因子分解" class="headerlink" title="5.5 质因子分解"></a>5.5 质因子分解</h3><p>先打印素数表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">struct factor&#123;</span><br><span class="line">int x,cnt;</span><br><span class="line">&#125;f[10];</span><br></pre></td></tr></table></figure><p>对一个正整数n来说,如果它存在1和本身之外的因子,那么一定是在sqrt(n)的左右成对出现。而这里把这个结论用在“质因子”上面,会得到一个强化结论:对一个正整数n来说,如果它存在[2,n]范围内的质因子,要么这些质因子全部小于等于sqrt(n),要么只存在一个大于sqrt(n)的质因子,而其余质因子全部小于等于sqrt(n)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if(n&#x3D;&#x3D;1)</span><br><span class="line">if(n%prime[i]&#x3D;&#x3D;0)&#123;</span><br><span class="line">f[num].x&#x3D;prime[i];</span><br><span class="line">f[num].cnt&#x3D;0;</span><br><span class="line">while(n%prime[i]&#x3D;&#x3D;0)&#123;</span><br><span class="line">f[num].cnt++;</span><br><span class="line">n&#x2F;&#x3D;prime[i];</span><br><span class="line">&#125;</span><br><span class="line">num++;</span><br><span class="line">&#125;</span><br><span class="line">if(n!&#x3D;1)&#123;</span><br><span class="line">f[num].x&#x3D;n;</span><br><span class="line">f[num++].cnt&#x3D;1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-大整数运算"><a href="#5-6-大整数运算" class="headerlink" title="5.6 大整数运算"></a>5.6 大整数运算</h3><p>存储</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">struct bign&#123;</span><br><span class="line">int d[1000];</span><br><span class="line">int len;</span><br><span class="line">bign()&#123;&#x2F;&#x2F;构造函数，每次定义结构体变量时，都会自动对该变量进行初始化</span><br><span class="line">memset(d,0,sizeof(d));</span><br><span class="line">len&#x3D;0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bign change(char str[])&#123;</span><br><span class="line">bign a;</span><br><span class="line">a.len&#x3D;strlen(str);</span><br><span class="line">for(int i&#x3D;0;i&lt;a.len;i++)&#123;</span><br><span class="line">a.d[i]&#x3D;str[a.len-i-1]-&#39;0&#39;;&#x2F;&#x2F;倒着赋值</span><br><span class="line">&#125;</span><br><span class="line">return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int compare(bign a,bign b)&#123;</span><br><span class="line">if(a.len&gt;b.len) return 1;</span><br><span class="line">else if(a,len&lt;b.len) return -1;</span><br><span class="line">else&#123;</span><br><span class="line">for(int i&#x3D;a.len-1;i&gt;&#x3D;0;i--)&#123;</span><br><span class="line">if(a.d[i]&gt;b.d[i]) return 1;</span><br><span class="line">else if(a.d[i]&lt;b.d[i]) return -1;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>四则运算</p><p>高精度加法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bign add(bign a,bign b)&#123;</span><br><span class="line">bign c;</span><br><span class="line">int carry&#x3D;0;</span><br><span class="line">for(int i&#x3D;0;i&lt;a.len||i&lt;b.len;i++)&#123;&#x2F;&#x2F;以较长的为界限</span><br><span class="line">int temp&#x3D;a.d[i]+b.d[i]+carry;</span><br><span class="line">c.d[c.len++]&#x3D;temp%10;</span><br><span class="line">carry&#x3D;temp&#x2F;10;</span><br><span class="line">&#125;</span><br><span class="line">if(carry!&#x3D;0)&#123;</span><br><span class="line">c.d[c.len++]&#x3D;carry;</span><br><span class="line">&#125;</span><br><span class="line">return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高精度减法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bign sub(bign a,bign b)&#123;</span><br><span class="line">bign c;</span><br><span class="line">for(int i&#x3D;0;i&lt;a.len||i&lt;b.len;i++)&#123;&#x2F;&#x2F;以较长的为界限</span><br><span class="line">if(a.d[i]&lt;b.d[i])&#123;</span><br><span class="line">a.d[i+1]--;</span><br><span class="line">a.d[i]+&#x3D;10;</span><br><span class="line">&#125;</span><br><span class="line">c.d[c.len++]&#x3D;a.d[i]-b.d[i];</span><br><span class="line">&#125;</span><br><span class="line">while(c.len-1&gt;&#x3D;1&amp;&amp;c.d[c.len-1]&#x3D;&#x3D;0)&#123;&#x2F;&#x2F;去除高位0，至少保留一个最低位</span><br><span class="line">c.len--;</span><br><span class="line">&#125;</span><br><span class="line">return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高精度与低精度乘法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bign multi(bign a,int b)&#123;</span><br><span class="line">bign c;</span><br><span class="line">int carry&#x3D;0;</span><br><span class="line">for(int i&#x3D;0;i&lt;a.len;i++)&#123;&#x2F;&#x2F;以较长的为界限</span><br><span class="line">int temp&#x3D;a.d[i]*b+carry;</span><br><span class="line">c.d[c.len++]&#x3D;temp%10;</span><br><span class="line">carry&#x3D;temp&#x2F;10;</span><br><span class="line">&#125;</span><br><span class="line">while(carry!&#x3D;0)&#123;</span><br><span class="line">c.d[c.len++]&#x3D;carry%10;</span><br><span class="line">carry&#x2F;&#x3D;10;</span><br><span class="line">&#125;</span><br><span class="line">return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>高精度与低精度除法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">bign divide(bign a,int b,int&amp; r)&#123;&#x2F;&#x2F;r?o</span><br><span class="line">bign c;</span><br><span class="line">c.len&#x3D;a.len;</span><br><span class="line">for(int i&#x3D;a.len-1;i&gt;&#x3D;0;i--)&#123;</span><br><span class="line">r&#x3D;r*10+a.d[i];&#x2F;&#x2F;余数</span><br><span class="line">if(r&lt;b) c.d[i]&#x3D;0;</span><br><span class="line">else&#123;</span><br><span class="line">c.d[i]&#x3D;r&#x2F;b;</span><br><span class="line">r&#x3D;r%b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">while(c.len-1&gt;&#x3D;1&amp;&amp;c.d[c.len-1]&#x3D;&#x3D;0)&#123;</span><br><span class="line">c.len--;</span><br><span class="line">&#125;</span><br><span class="line">return cbign add(bign a,bign b)&#123;</span><br><span class="line">bign c;</span><br><span class="line">int carry&#x3D;0;</span><br><span class="line">for(int i&#x3D;0;i&lt;a.len||i&lt;b.len;i++)&#123;&#x2F;&#x2F;以较长的为界限</span><br><span class="line">int temp&#x3D;a.d[i]+b.d[i]+carry;</span><br><span class="line">c.d[c.len++]&#x3D;temp%10;</span><br><span class="line">carry&#x3D;temp&#x2F;10;</span><br><span class="line">&#125;</span><br><span class="line">if(carry!&#x3D;0)&#123;e</span><br><span class="line">c.d[c.len++]&#x3D;carry;</span><br><span class="line">&#125;</span><br><span class="line">return c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-7-拓展欧几里得算法"><a href="#5-7-拓展欧几里得算法" class="headerlink" title="5.7 拓展欧几里得算法"></a>5.7 拓展欧几里得算法</h3><h3 id="5-8组合数"><a href="#5-8组合数" class="headerlink" title="5.8组合数"></a>5.8组合数</h3><p>n!有多少个质因子p</p><p>n!=(n/p+n/p^2…)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int cal(int n,int p)&#123;</span><br><span class="line">int ans&#x3D;0;</span><br><span class="line">while(n)&#123;&#x2F;&#x2F;向下取整</span><br><span class="line">ans+&#x3D;n&#x2F;p;</span><br><span class="line">n&#x2F;&#x3D;p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int cla(int n,int p)&#123;</span><br><span class="line">if(n&lt;p) return 0;</span><br><span class="line">return n&#x2F;p+cal(n&#x2F;p,p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公式：<br>$$<br>C_n^m=\frac{n!}{m!(n-m)!}<br>$$<br>递推公式：<br>$$<br>C_n^m=C_{n-1}^{m}+C_{n-1}^{m-1}<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">long long C(long long n,long long m)&#123;</span><br><span class="line">if(m&#x3D;&#x3D;0||m&#x3D;&#x3D;n) return 1;</span><br><span class="line">return C(n-1,m)+C(n-1,m-1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重复计算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">long long res[67][67]&#x3D;&#123;0&#125;;</span><br><span class="line">long long C(long long n,long long m)&#123;</span><br><span class="line">if(m&#x3D;&#x3D;0||m&#x3D;&#x3D;n) return 1;</span><br><span class="line">if(res[n][m]!&#x3D;0) return res[n][m];</span><br><span class="line">return res[n][m]&#x3D;C(n-1,m)+C(n-1,m-1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打表：</p><h6 id="⭐杨辉三角"><a href="#⭐杨辉三角" class="headerlink" title="⭐杨辉三角"></a>⭐杨辉三角</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const int n&#x3D;60;</span><br><span class="line">void calC()&#123;</span><br><span class="line">for(int i&#x3D;0;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">res[i][0]&#x3D;res[i][i]&#x3D;1;</span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;2;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">for(int j&#x3D;0;j&lt;&#x3D;i&#x2F;2;j++)&#123;</span><br><span class="line">res[i][j]&#x3D;res[i-1][j]+res[i-1][j-1];</span><br><span class="line">res[i][i-j]&#x3D;res[i][j];&#x2F;&#x2F;C(i,i-j)&#x3D;C(i,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>边乘边除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">long long C(long long n,long long m)&#123;</span><br><span class="line">long long ans&#x3D;1;</span><br><span class="line">for(long long i&#x3D;1;i&lt;&#x3D;m;i++)&#123;</span><br><span class="line">ans&#x3D;ans*(n-m+i)&#x2F;i;</span><br><span class="line">&#125;</span><br><span class="line">return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>。。。</p><h2 id="第六章-C-标准模板库（STL）介绍"><a href="#第六章-C-标准模板库（STL）介绍" class="headerlink" title="第六章 C++标准模板库（STL）介绍"></a>第六章 C++标准模板库（STL）介绍</h2><h3 id="6-7-stack-栈"><a href="#6-7-stack-栈" class="headerlink" title="6.7 stack 栈"></a>6.7 stack 栈</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stack&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">stack&lt;int&gt; st;</span><br><span class="line">for(int i&#x3D;1;i&lt;&#x3D;5;i++)&#123;</span><br><span class="line">st.push(i);&#x2F;&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d&quot;,st.top());&#x2F;&#x2F;获得栈顶元素</span><br><span class="line">st.pop();&#x2F;&#x2F;弹出栈</span><br><span class="line">if(st.empty()&#x3D;&#x3D;true)&#x2F;&#x2F;栈是空</span><br><span class="line">st.size();&#x2F;&#x2F;元素个数</span><br></pre></td></tr></table></figure><p>模拟递归？</p><h2 id="第七章-提高篇（1）——数据结构专题（1）"><a href="#第七章-提高篇（1）——数据结构专题（1）" class="headerlink" title="第七章 提高篇（1）——数据结构专题（1）"></a>第七章 提高篇（1）——数据结构专题（1）</h2><h3 id="7-1-栈的应用"><a href="#7-1-栈的应用" class="headerlink" title="7.1 栈的应用"></a>7.1 栈的应用</h3><p>中缀转后缀</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-2-队列的应用"><a href="#7-2-队列的应用" class="headerlink" title="7.2 队列的应用"></a>7.2 队列的应用</h3><h3 id="7-3-链表处理"><a href="#7-3-链表处理" class="headerlink" title="7.3 链表处理"></a>7.3 链表处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct node&#123;</span><br><span class="line">typename data;&#x2F;&#x2F;数据域?</span><br><span class="line">node* next;&#x2F;&#x2F;指针域</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>申请动态内存:</p><p>malloc函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">typename*p&#x3D;(typename*)malloc(sizeof(typename));</span><br><span class="line">int*p&#x3D;(int*)malloc(sizeof(int));</span><br></pre></td></tr></table></figure><p>new</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int*p&#x3D;new int;</span><br></pre></td></tr></table></figure><p>释放空间：</p><p>free函数，对应malloc，成对出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(p);&#x2F;&#x2F;p为指针变量</span><br></pre></td></tr></table></figure><p>delete运算符，对应new，成对出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete(p);</span><br></pre></td></tr></table></figure><p>创建链表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    node* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">node* <span class="title">creat</span><span class="params">(<span class="keyword">int</span> array[])</span></span>&#123;</span><br><span class="line">    node *p,*pre,*head;</span><br><span class="line">    head=<span class="keyword">new</span> node;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        p=<span class="keyword">new</span> node;</span><br><span class="line">        p-&gt;data=array[i];</span><br><span class="line">        p-&gt;next=NUll;</span><br><span class="line">        pre-&gt;next=p;</span><br><span class="line">        pre=p;</span><br><span class="line">    &#125;</span><br><span class="line">    retuen head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> array[<span class="number">5</span>]=&#123;<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    node* L=<span class="built_in">creat</span>(array);</span><br><span class="line">    L=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,L-&gt;data);</span><br><span class="line">        L=L-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int search(node* head,int x)&#123;</span><br><span class="line">int count&#x3D;0;</span><br><span class="line">node* p&#x3D;head-&gt;next;</span><br><span class="line">while(p!&#x3D;NULL)&#123;</span><br><span class="line">if(p-&gt;data&#x3D;&#x3D;x)</span><br><span class="line">count++;</span><br><span class="line">p&#x3D;p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void insert(node* head,int pose,int x)&#123;</span><br><span class="line">node* p&#x3D;head-&gt;next;</span><br><span class="line">node* pre&#x3D;head;&#x2F;&#x2F;p的前驱结点</span><br><span class="line">while(p!&#x3D;NULL)&#123;</span><br><span class="line">if(p-&gt;data&#x3D;&#x3D;x)&#123;</span><br><span class="line">pre-&gt;next&#x3D;p-&gt;next;</span><br><span class="line">delete(p);&#x2F;&#x2F;释放p</span><br><span class="line">p&#x3D;pre-&gt;next</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">pre&#x3D;p;</span><br><span class="line">p&#x3D;p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void del(node* head,int x)&#123;</span><br><span class="line">node* p&#x3D;head;</span><br><span class="line">    for(int i&#x3D;0;i&lt;pose-1;i++)&#123;</span><br><span class="line">    p&#x3D;p-&gt;next;&#x2F;&#x2F;到插入位置前一个结点</span><br><span class="line">    &#125;</span><br><span class="line">    node* q&#x3D;new node;</span><br><span class="line">    q-&gt;data&#x3D;x;</span><br><span class="line">    q-&gt;next&#x3D;p-&gt;next;&#x2F;&#x2F;新结点的下一个结点指向原来位置的结点（p的下一个结点）</span><br><span class="line">    p-&gt;next&#x3D;q;&#x2F;&#x2F;插入位置前一个结点指向q</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态链表</p><p>hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct node&#123;</span><br><span class="line">typename data;</span><br><span class="line">int next;</span><br><span class="line">&#125;node[size];</span><br></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第八章-提高篇（2）搜索专题"><a href="#第八章-提高篇（2）搜索专题" class="headerlink" title="第八章 提高篇（2）搜索专题"></a>第八章 提高篇（2）搜索专题</h2><h4 id="·-深度优先搜索（DFS）"><a href="#·-深度优先搜索（DFS）" class="headerlink" title="· 深度优先搜索（DFS）"></a>· 深度优先搜索（DFS）</h4><p>迷宫</p><p>背包问题</p><p>剪枝：</p><h4 id="·广度优先搜索-BFS"><a href="#·广度优先搜索-BFS" class="headerlink" title="·广度优先搜索(BFS)"></a>·广度优先搜索(BFS)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void BFS(int s)&#123;</span><br><span class="line">queue&lt;int&gt; q;</span><br><span class="line">q.push(s);</span><br><span class="line">while(!q.empty())&#123;&#x2F;&#x2F;不为空</span><br><span class="line">取出队首元素top</span><br><span class="line">访问队首元素top</span><br><span class="line">将队首元素出队</span><br><span class="line">将top下一层结点未入队的全部入队，并设置为已入队</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20210329211427751.png" alt="image-20210329211427751"></p><p>tips:设置两个增量数组，来表示四个方向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int X[]&#x3D;&#123;0,0,1,-1&#125;;</span><br><span class="line">int Y[]&#x3D;&#123;1,-1,0,0&#125;;</span><br></pre></td></tr></table></figure><p>使用for循环枚举四个方向</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(int i&#x3D;0;i&lt;4;i++)&#123;</span><br><span class="line">newX&#x3D;nowX+X[i];</span><br><span class="line">newY&#x3D;nowY+Y[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举每一个位置的元素，如果为0，跳过；如果为1，ans+1，BFS查询相邻四个位置，（不出界），相邻位置为1，继续查询该位置相邻，直到整个1块被查询完，所有相邻1入队。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> matrix[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> inq[maxn][maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> X[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=n||y&lt;=m||x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(matrix[x][y]==<span class="number">0</span>||inq[x][y]=<span class="literal">true</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    retuen <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    queue&lt;node&gt; q;<span class="comment">//</span></span><br><span class="line">    Node.x=x;</span><br><span class="line">    Node.y=y;</span><br><span class="line">    q.<span class="built_in">push</span>(Node);<span class="comment">//入队</span></span><br><span class="line">    inq[x][y]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        node top=q.<span class="built_in">front</span>();<span class="comment">//取出队首元素</span></span><br><span class="line">        q.<span class="built_in">pop</span>();<span class="comment">//队首元素出队</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> newX=nowX+X[i];</span><br><span class="line">            <span class="keyword">int</span> newY=nowY+Y[i];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">judge</span>(newX,newY))&#123;</span><br><span class="line">                Node.x=newX;</span><br><span class="line">                Node.y=newY;</span><br><span class="line">                q.<span class="built_in">push</span>(Node);</span><br><span class="line">                inq[newX][newY]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            cin&gt;&gt;matrix[x][y];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(matrix[i][j]==<span class="number">1</span>&amp;&amp;inq[j][j]==<span class="literal">false</span>)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="built_in">BFS</span>(i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    cout&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20210330154047853.png" alt="image-20210330154047853"></p><p><img src="C:\Users\1\AppData\Roaming\Typora\typora-user-images\image-20210330154201387.png" alt="image-20210330154201387"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">int</span> step;</span><br><span class="line">&#125;S,T,Node;<span class="comment">//S起点，T终点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> matrix[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> inq[maxn][maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> X[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Y[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=n||y&lt;=m||x&lt;<span class="number">0</span>||y&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(matrix[x][y]==<span class="string">&#x27;*&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(inq[x][y]=<span class="literal">true</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    retuen <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;node&gt; q;<span class="comment">//</span></span><br><span class="line">    q.<span class="built_in">push</span>(S);<span class="comment">//起点入队</span></span><br><span class="line">    inq[S.x][S.y]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        node top=q.<span class="built_in">front</span>();<span class="comment">//取出队首元素</span></span><br><span class="line">        q.<span class="built_in">pop</span>();<span class="comment">//队首元素出队</span></span><br><span class="line">        <span class="keyword">if</span>(top.x=T.x&amp;&amp;top.y==T.y) <span class="keyword">return</span> top.step;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> newX=nowX+X[i];</span><br><span class="line">            <span class="keyword">int</span> newY=nowY+Y[i];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">judge</span>(newX,newY))&#123;</span><br><span class="line">                Node.x=newX;</span><br><span class="line">                Node.y=newY;</span><br><span class="line">                Node.step=top.step+<span class="number">1</span>;<span class="comment">//</span></span><br><span class="line">                q.<span class="built_in">push</span>(Node);</span><br><span class="line">                inq[newX][newY]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">getchar</span>();<span class="comment">//过滤每行后的换行符？</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;         </span><br><span class="line">            matrix[x][y]=<span class="built_in">getchar</span>();<span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line">        maze[i][m+<span class="number">1</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;      </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>,&amp;S.x,&amp;S.y,&amp;T.x,&amp;T.y);</span><br><span class="line">    S.step=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">      </span><br><span class="line">    cout&lt;&lt; <span class="built_in">BFS</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第九章-提高篇（3）–树"><a href="#第九章-提高篇（3）–树" class="headerlink" title="第九章 提高篇（3）–树"></a>第九章 提高篇（3）–树</h2><h3 id="9-1-树与二叉树"><a href="#9-1-树与二叉树" class="headerlink" title="9.1 树与二叉树"></a>9.1 树与二叉树</h3><p>二叉链表定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct node&#123;</span><br><span class="line">typename data;</span><br><span class="line">node* lchild;</span><br><span class="line">node* rchild;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>建树前根结点不存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node* root&#x3D;NULL;</span><br></pre></td></tr></table></figure><p>新建结点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">node* newNode(int v)&#123;</span><br><span class="line">node* Node&#x3D;new node;</span><br><span class="line">Node-&gt;data&#x3D;v;</span><br><span class="line">Node-&gt;lchild&#x3D;NULL;</span><br><span class="line">Node-&gt;rchild&#x3D;NULL;</span><br><span class="line">return Node;&#x2F;&#x2F;返回新建结点地址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找、修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void search(node* root,int x,int newdata)&#123;</span><br><span class="line">if(root&#x3D;&#x3D;NULL) return;</span><br><span class="line">if(root-&gt;data&#x3D;&#x3D;x) root-&gt;data&#x3D;newdata;</span><br><span class="line">search(root-&gt;lchild,x,newdata);</span><br><span class="line">search(root-&gt;rchild,x,newdata);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入</p><h6 id="引用即在函数中修改root会直接修改原变量"><a href="#引用即在函数中修改root会直接修改原变量" class="headerlink" title="*引用即在函数中修改root会直接修改原变量"></a>*引用即在函数中修改root会直接修改原变量</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void insert(node* &amp;root,int x)&#123;&#x2F;&#x2F;?根结点要使用引用</span><br><span class="line">if(root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">root&#x3D;newNode(x);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if()&#123;</span><br><span class="line">insert(root-&gt;lchild,x);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">insert(root-&gt;rchild,x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉树创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">node* Greate(int data[],int n)&#123;</span><br><span class="line">node* root&#x3D;NULL;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">insert(root,data[i]);</span><br><span class="line">&#125;</span><br><span class="line">return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完全二叉树</p><p>任何一个结点x，左孩子2x,右孩子2x+1</p><p>数组存</p><ul><li>数组中元素存放顺序恰好为层序遍历序列</li><li>判断叶节点，该结点x左子结点编号2x&gt;结点总个数</li><li>空结点：x&gt;结点总个数</li></ul><h3 id="9-2-二叉树遍历"><a href="#9-2-二叉树遍历" class="headerlink" title="9.2 二叉树遍历"></a>9.2 二叉树遍历</h3><p>先序遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vvvoid preorder(node* root)&#123;</span><br><span class="line">if(root&#x3D;&#x3D;NULL) return;</span><br><span class="line">printf(&quot;%d\n&quot;,root-&gt;data);</span><br><span class="line">preorder(root-&gt;lchild);</span><br><span class="line">preorder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void inorder(node* root)&#123;</span><br><span class="line">if(root&#x3D;&#x3D;NULL) return;</span><br><span class="line">inorder(root-&gt;lchild);</span><br><span class="line">printf(&quot;%d\n&quot;,root-&gt;data);</span><br><span class="line">inorder(root-&gt;rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后序遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void postorder(node* root)&#123;</span><br><span class="line">if(root&#x3D;&#x3D;NULL) return;</span><br><span class="line">postorder(root-&gt;lchild);</span><br><span class="line">postorder(root-&gt;rchild);</span><br><span class="line">printf(&quot;%d\n&quot;,root-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>层序遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void layerorder(node* root)&#123;</span><br><span class="line">queue&lt;node*&gt; q;&#x2F;&#x2F;存地址</span><br><span class="line">root-&gt;layer&#x3D;1;</span><br><span class="line">q.push(root);</span><br><span class="line">while(!q.empty())&#123;</span><br><span class="line">node* now&#x3D;q.front();</span><br><span class="line">q.pop();</span><br><span class="line">printf(&quot;%d&quot;,now-&gt;data);</span><br><span class="line">if(now-&gt;lchild!&#x3D;NULL) &#123;</span><br><span class="line">now-&gt;lchild-&gt;layer&#x3D;now-&gt;layer+1;</span><br><span class="line">q.push(now-&gt;lchild);</span><br><span class="line">&#125;</span><br><span class="line">if(now-&gt;rchild!&#x3D;NULL) &#123;</span><br><span class="line">now-&gt;rchild-&gt;layer&#x3D;now-&gt;layer+1;</span><br><span class="line">q.push(now-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给定一棵二叉树先序和中序，重建这棵二叉树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">node* create(int preL,int preR,int inL,int inR)&#123;</span><br><span class="line">if(preL&gt;preR) return NULL;</span><br><span class="line">    node* root&#x3D;new node;</span><br><span class="line">    root-&gt;data&#x3D;pre[preL];</span><br><span class="line">    for(int k&#x3D;inL;k&lt;&#x3D;inR;k++)&#123;</span><br><span class="line">    if(in[k]&#x3D;&#x3D;pre[preL]) break;</span><br><span class="line">    &#125;</span><br><span class="line">    int numLeft&#x3D;k-inL;&#x2F;&#x2F;左子树结点个数</span><br><span class="line">    root-&gt;lchild&#x3D;create(preL+1,prel+numLeft,inL,k-1)</span><br><span class="line">    root-&gt;rchild&#x3D;create(preL+numLeft+1,preR,k+1,inR);</span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="未-A1020"><a href="#未-A1020" class="headerlink" title="(未)A1020"></a>(未)A1020</h6><h6 id="二叉树静态实现"><a href="#二叉树静态实现" class="headerlink" title="二叉树静态实现"></a>二叉树静态实现</h6><p>定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct node&#123;</span><br><span class="line">typename data;</span><br><span class="line">int lchild;</span><br><span class="line">int rchild;</span><br><span class="line">&#125;Node[maxn];</span><br></pre></td></tr></table></figure><p>结点生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int index&#x3D;0;</span><br><span class="line">int newNode(int v)&#123;</span><br><span class="line">Node[index].data&#x3D;v;</span><br><span class="line">Node[index].lchild&#x3D;-1;</span><br><span class="line">Node[index].rchild&#x3D;-1;</span><br><span class="line">return index++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找、修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void search(int root,int x,int newdata)&#123;</span><br><span class="line">if(root&#x3D;-1) return;</span><br><span class="line">if(Node[root].data&#x3D;&#x3D;x)&#123;</span><br><span class="line">Node[root].data&#x3D;newdata;</span><br><span class="line">&#125;</span><br><span class="line">search(Node[root].lchild,x,newdata);</span><br><span class="line">search(Node[root].rchild,x,newdata);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入，加引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void insert(int &amp;root,int x)&#123;</span><br><span class="line">if(root&#x3D;&#x3D;-1) return;</span><br><span class="line">if() insert(Node[root].lchild,x);</span><br><span class="line">else insert(Node[root].rchild,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int Creat(int data[],int n)&#123;</span><br><span class="line">int root&#x3D;-1;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">insert(root,data[i]);</span><br><span class="line">&#125;</span><br><span class="line">return root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先、中、后、层序遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void preorder(int root)&#123;</span><br><span class="line">if(root&#x3D;&#x3D;-1) return;</span><br><span class="line">printf(&quot;%d&quot;,root);</span><br><span class="line">preorder(Node[root].lchild);</span><br><span class="line">preorder(Node[root].rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-树的遍历"><a href="#9-3-树的遍历" class="headerlink" title="9.3 树的遍历"></a>9.3 树的遍历</h3><p>静态写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct node&#123;</span><br><span class="line">typename data;</span><br><span class="line">int child[maxn];&#x2F;&#x2F;vector child;?</span><br><span class="line">&#125;Node[maxn];</span><br></pre></td></tr></table></figure><p>只需要树的结构，图的邻接表在树中的应用：vector<int> child[maxn];</p><h6 id="未-A1053"><a href="#未-A1053" class="headerlink" title="(未)A1053"></a>(未)A1053</h6><h3 id="9-4-二叉查找树（BST"><a href="#9-4-二叉查找树（BST" class="headerlink" title="9.4 二叉查找树（BST)"></a>9.4 二叉查找树（BST)</h3><p>查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void search(node* root,int x)&#123;</span><br><span class="line">if(root&#x3D;&#x3D;NULL) return;</span><br><span class="line">if(x&#x3D;&#x3D;root-&gt;data)&#123;</span><br><span class="line">printf(&quot;%d&quot;,root-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line">else if(x&gt;root-&gt;data)&#123;</span><br><span class="line">search(root-&gt;rchild,x);</span><br><span class="line">&#125;</span><br><span class="line">else search(root-&gt;lchild,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void insert(node* root,int x)&#123;</span><br><span class="line">if(root&#x3D;&#x3D;NULL) &#123;</span><br><span class="line">root&#x3D;newNode(x);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">if(x&#x3D;&#x3D;root-&gt;data)&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">else if(x&gt;root-&gt;data)&#123;</span><br><span class="line">insert(root-&gt;rchild,x);</span><br><span class="line">&#125;</span><br><span class="line">else insert(root-&gt;lchild,x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-6-并查集"><a href="#9-6-并查集" class="headerlink" title="9.6 并查集"></a>9.6 并查集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int father[N]</span><br></pre></td></tr></table></figure><p>father[1]=2，1的父亲结点是2</p><p>查找</p><p>递推</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int findFather(int x)&#123;</span><br><span class="line">while(x!&#x3D;father[x])&#123;&#x2F;&#x2F;不是根结点</span><br><span class="line">x&#x3D;father[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路径压缩：只找根结点</p><p>好朋友</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第10章-提高篇（4）–图算法专题"><a href="#第10章-提高篇（4）–图算法专题" class="headerlink" title="第10章 提高篇（4）–图算法专题"></a>第10章 提高篇（4）–图算法专题</h2><h3 id="10-2-图的存储"><a href="#10-2-图的存储" class="headerlink" title="10.2 图的存储"></a>10.2 图的存储</h3><p>邻接矩阵</p><h2 id="第11章-提高篇（5）–动态规划专题"><a href="#第11章-提高篇（5）–动态规划专题" class="headerlink" title="第11章 提高篇（5）–动态规划专题"></a>第11章 提高篇（5）–动态规划专题</h2><p>记录<strong>重叠子问题</strong>的解</p><p>数塔问题</p><p>状态转移方程</p><p>递推写法，自底向上</p><p>递推写法从边界出发</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> f[maxn][maxn]，dp[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;f[i][j]);</span><br><span class="line">    <span class="comment">//边界</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;<span class="comment">//最下</span></span><br><span class="line">        dp[n][j]=f[n][j];</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">    <span class="comment">//状态转移方程</span></span><br><span class="line">            dp[i][j]=<span class="built_in">max</span>(dp[i+<span class="number">1</span>][j],dp[i+<span class="number">1</span>][j+<span class="number">1</span>])+f[i][j];</span><br><span class="line">&#125;</span><br><span class="line">    cout&lt;&lt;dp[<span class="number">1</span>][<span class="number">1</span>];        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-2-最大连续子序列和"><a href="#11-2-最大连续子序列和" class="headerlink" title="11.2  最大连续子序列和"></a>11.2  最大连续子序列和</h3><p>dp[i]表示以a[i]结尾的连续序列最大</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dp[<span class="number">0</span>]=a[<span class="number">0</span>];<span class="comment">//边界</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    dp[i]=<span class="built_in">max</span>(a[i],dp[i<span class="number">-1</span>]+a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[i]&gt;dp[k])</span><br><span class="line">        k=i;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[k];</span><br></pre></td></tr></table></figure><h3 id="11-3-最长不下降子序列"><a href="#11-3-最长不下降子序列" class="headerlink" title="11.3 最长不下降子序列"></a>11.3 最长不下降子序列</h3><p>dp[i]表示以a[i]结尾的最长不下降子序列长度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    dp[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=a[j]&amp;&amp;dp[j]+<span class="number">1</span>&gt;dp[i])&#123;<span class="comment">//dp[j]+1&gt;dp[i]：循环找到dp[i]最大</span></span><br><span class="line">            dp[i]=dp[j]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=<span class="built_in">max</span>(ans,dp[i]);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br></pre></td></tr></table></figure><h3 id="11-4-最长公共子序列"><a href="#11-4-最长公共子序列" class="headerlink" title="11.4 最长公共子序列"></a>11.4 最长公共子序列</h3><p>dp[i] [j]表示字符串A的 i 号位与字符串B的 j 号位之前 最长公共子序列的长度</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">gets</span>(A+<span class="number">1</span>);<span class="comment">//从下标为1开始读入</span></span><br><span class="line"><span class="keyword">int</span> lenA=<span class="built_in">strlen</span>(A+<span class="number">1</span>);</span><br><span class="line">B...</span><br><span class="line"><span class="comment">//边界</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lenA;i++)&#123;</span><br><span class="line">    dp[i][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=lenA;j++)&#123;</span><br><span class="line">    dp[<span class="number">0</span>][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lenA;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=lenB;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i]=B[j])&#123;</span><br><span class="line">            dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dp[lenA][lenB];</span><br></pre></td></tr></table></figure><h3 id="11-5-最长回文字串"><a href="#11-5-最长回文字串" class="headerlink" title="11.5 最长回文字串"></a>11.5 最长回文字串</h3><p>递推写法从边界出发</p><p>dp[i] [j]表示s[i]到s[j]是否是回文字符串</p><p>第一遍将长度为3的字串，第二遍长度为4的。。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">gets</span>(s);</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dp));</span><br><span class="line"><span class="comment">//边界</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(s);i++)&#123;</span><br><span class="line">    dp[i][i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;len<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[i+<span class="number">1</span>])&#123;</span><br><span class="line">            dp[i][i+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">            ans=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">3</span>;l&lt;=len;l++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+l<span class="number">-1</span>&lt;len;i++)&#123;<span class="comment">//左</span></span><br><span class="line">        <span class="keyword">int</span> j=i+l<span class="number">-1</span>;<span class="comment">//右端点</span></span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[j]&amp;&amp;dp[i+<span class="number">1</span>][j<span class="number">-1</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">            dp[i][j]=<span class="number">1</span>;</span><br><span class="line">            ans=L;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br></pre></td></tr></table></figure><h3 id="11-6-DAG（有向无环图）最长路"><a href="#11-6-DAG（有向无环图）最长路" class="headerlink" title="11.6 DAG（有向无环图）最长路"></a>11.6 DAG（有向无环图）最长路</h3><h6 id="不是很懂"><a href="#不是很懂" class="headerlink" title="不是很懂"></a>不是很懂</h6><p>不固定起点终点</p><p>dp[i]表示从i顶点出发能获得的最长路径长度</p><p>dp[i]=max{dp[j]+length[i-&gt;j]}</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[i]&gt;<span class="number">0</span>) <span class="keyword">return</span> dp[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(G[i][j]!=INF)<span class="comment">//如果有有向边</span></span><br><span class="line">            dp[i]=<span class="built_in">max</span>(dp[i],<span class="built_in">DP</span>(j)+G[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>求路径</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[i]&gt;<span class="number">0</span>) <span class="keyword">return</span> dp[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(G[i][j]!=INF)&#123;<span class="comment">//如果有有向边</span></span><br><span class="line">            <span class="keyword">int</span> temp=<span class="built_in">DP</span>(j)+G[i][j];</span><br><span class="line">            <span class="keyword">if</span>(temp&gt;dp[i])&#123;</span><br><span class="line">                dp[i]=temp;</span><br><span class="line">                choice[i]=j;</span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPath</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">    <span class="keyword">while</span>(choice[i]!=<span class="number">-1</span>)&#123;</span><br><span class="line">        i=choice[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-&gt;%d&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>固定终点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int DP(int i)&#123;</span><br><span class="line">    if(vis[i]) return dp[i];</span><br><span class="line">    vis[i]&#x3D;true;&#x2F;&#x2F;访问过了</span><br><span class="line">    for(int j&#x3D;0;j&lt;n;j++)&#123;</span><br><span class="line">        if(G[i][j]!&#x3D;INF)&#x2F;&#x2F;如果有有向边</span><br><span class="line">            dp[i]&#x3D;max(dp[i],DP(j)+G[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-7-背包问题"><a href="#11-7-背包问题" class="headerlink" title="11.7 背包问题"></a>11.7 背包问题</h3><p>01背包问题</p><p>dp[i] [v]表示前 <strong>i</strong> 件物品恰好装入容量为 <strong>v</strong> 的背包中 的最大价值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">for(int v&#x3D;w[i];v&lt;&#x3D;V;v++)&#123;</span><br><span class="line">dp[i][v]&#x3D;max(dp[i-1][v],dp[i-1][v-w[i]]+c[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完全背包问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123;</span><br><span class="line">for(int v&#x3D;w[i];v&lt;&#x3D;V;v++)&#123;</span><br><span class="line">dp[i][v]&#x3D;max(dp[i-1][v],dp[i][v-w[i]]+c[i]);&#x2F;&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>滚动数组？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;算法笔记学习&lt;/p&gt;</summary>
    
    
    
    <category term="C++" scheme="https://miaomiao7.github.io/categories/C/"/>
    
    <category term="算法" scheme="https://miaomiao7.github.io/categories/C/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Python基础语法</title>
    <link href="https://miaomiao7.github.io/2021/02/16/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://miaomiao7.github.io/2021/02/16/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2021-02-16T13:33:46.000Z</published>
    <updated>2021-04-21T08:11:51.158Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>列表、元组、字典 遍历输出</p></li><li><p>str 的 replace find split 等命令</p></li><li><p>re.serach re.findall 等正则命令</p></li><li><p>IO操作，即文件的读写操作</p></li><li><p>网络请求，使用requests 库进行GET请求</p></li></ol><span id="more"></span><h2 id="列表、元组、字典-遍历输出"><a href="#列表、元组、字典-遍历输出" class="headerlink" title="列表、元组、字典 遍历输出"></a>列表、元组、字典 遍历输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列表遍历</span></span><br><span class="line">list1= [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;white&#x27;</span>, <span class="string">&#x27;black&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list1)):</span><br><span class="line">    <span class="built_in">print</span>(list1[i])</span><br><span class="line"></span><br><span class="line"><span class="comment">#元组遍历</span></span><br><span class="line">tup1=(<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;white&#x27;</span>, <span class="string">&#x27;black&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tup1:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tup1)):</span><br><span class="line">    <span class="built_in">print</span>(tup1[i])</span><br><span class="line"></span><br><span class="line"><span class="comment">#字典遍历</span></span><br><span class="line"><span class="built_in">dict</span>=&#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">dict</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dict</span>[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">dict</span>.keys():</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">dict</span>[i])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">dict</span>.values():</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h2 id="str-的-replace-find-split-等命令"><a href="#str-的-replace-find-split-等命令" class="headerlink" title="str 的 replace find split 等命令"></a>str 的 replace find split 等命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">&#x27;世之万物,吾爱有三：一曰为日,一曰为月,一曰为汝.日出昼也,月升夜也,爱汝恒也&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.replace(<span class="string">&#x27;月&#x27;</span>, <span class="string">&#x27;月亮&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(s.replace(<span class="string">&#x27;月&#x27;</span>, <span class="string">&#x27;月亮&#x27;</span>, <span class="number">1</span>))<span class="comment"># 将字符串中1个&#x27;月&#x27;替换成&#x27;月亮&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&#x27;吾爱&#x27;</span>)) <span class="comment"># 查找s中&#x27;吾爱&#x27;出现位置,否则返回-1</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&#x27;吾爱&#x27;</span>, <span class="number">6</span>))<span class="comment"># 从6处开始查找&#x27;吾爱&#x27;的出现位置，返回-1</span></span><br><span class="line"><span class="built_in">print</span>(s.index(<span class="string">&#x27;吾爱&#x27;</span>))<span class="comment"># 查找s中&#x27;吾爱&#x27;出现位置，否则引发ValueError错误</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.split(<span class="string">&#x27;,&#x27;</span>))   <span class="comment"># 根据逗号分割</span></span><br><span class="line"><span class="built_in">print</span>(s.split(<span class="string">&#x27;,&#x27;</span>, <span class="number">2</span>))<span class="comment"># 根据逗号分割,只根据前2个“，”分割</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.startswith(<span class="string">&#x27;世之万物&#x27;</span>))<span class="comment"># 判断s是否以&#x27;世之万物&#x27;开头</span></span><br><span class="line"><span class="built_in">print</span>(s.endswith(<span class="string">&#x27;爱汝恒也&#x27;</span>))  <span class="comment"># 判断s是否以&#x27;爱汝恒也&#x27;结尾</span></span><br><span class="line"></span><br><span class="line">s_list = s.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(s_list)</span><br><span class="line"><span class="comment"># 使用&#x27;*&#x27;作为分隔符将列表连接成字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>.join(s_list))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27; the moon-&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.lstrip(<span class="string">&#x27; &#x27;</span>))<span class="comment"># 删除左边的空白</span></span><br><span class="line"><span class="built_in">print</span>(s.rstrip(<span class="string">&#x27;-&#x27;</span>))<span class="comment"># 删除右边的-</span></span><br><span class="line"><span class="built_in">print</span>(s.strip())<span class="comment"># 删除两边的空白</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;the moon&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.lstrip(<span class="string">&#x27;thon&#x27;</span>))<span class="comment"># 删除左边的t、h、o、n</span></span><br><span class="line"><span class="built_in">print</span>(s.rstrip(<span class="string">&#x27;thon&#x27;</span>))<span class="comment"># 删除右边的t、h、o、n</span></span><br><span class="line"><span class="built_in">print</span>(s.strip(<span class="string">&#x27;thon&#x27;</span>))<span class="comment"># 删除两边的t、h、o、n</span></span><br><span class="line"></span><br><span class="line">s= <span class="string">&#x27;The moon&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s.title())<span class="comment"># 每个单词首字母大写</span></span><br><span class="line"><span class="built_in">print</span>(s.lower())<span class="comment"># 每个单词首字母小写</span></span><br><span class="line"><span class="built_in">print</span>(s.upper())<span class="comment"># 每个字母大写</span></span><br></pre></td></tr></table></figure><h2 id="re-serach-re-findall-等正则命令"><a href="#re-serach-re-findall-等正则命令" class="headerlink" title="re.serach re.findall 等正则命令"></a>re.serach re.findall 等正则命令</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">s=<span class="string">&#x27;www.baidu.com,www.runoob.com,www.163.com&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">&#x27;com&#x27;</span>,s))<span class="comment">#扫描整个字符串并返回第一个成功的匹配</span></span><br><span class="line"><span class="built_in">print</span>(re.match(<span class="string">&#x27;com&#x27;</span>,s))<span class="comment">#从字符起始位置匹配</span></span><br><span class="line"><span class="built_in">print</span>(re.match(<span class="string">&#x27;www&#x27;</span>,s))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">&#x27;com&#x27;</span>,s))</span><br></pre></td></tr></table></figure><h2 id="IO操作，即文件的读写操作"><a href="#IO操作，即文件的读写操作" class="headerlink" title="IO操作，即文件的读写操作"></a>IO操作，即文件的读写操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#读文本文件用&#x27;r&#x27;，读二进制文件用&#x27;rb&#x27;，写文本文件用&#x27;w&#x27;，写二进制文件用&#x27;wb&#x27;，追加文件用&#x27;a&#x27;,第二个参数不写，默认为&#x27;r&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;little_king.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;UTF-8&#x27;</span>,, errors=<span class="string">&#x27;ignore&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">    <span class="built_in">print</span>(f.readline(<span class="number">10</span>))</span><br><span class="line">    <span class="built_in">print</span>(f.readlines())<span class="comment">#[&#x27;狐狸：如果你驯养我，那我的生命就充满阳光，\n&#x27;, &#x27;你的脚步声会变得跟其他人的不一样。\n&#x27;, &#x27;其他人的脚步声会让我迅速躲到地底下，\n&#x27;, &#x27;而你的脚步声则会像音乐一样，把我 召唤出洞穴。\n&#x27;, &#x27;\n&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x27;w&#x27;把原文件内容清空再写入,&#x27;a&#x27;接后</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;little_king.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> fi:</span><br><span class="line">    fi.write(<span class="string">&quot;\n只有用心灵才能看得清事物本质，真正重要的东西是肉眼无法看见的。&quot;</span>)</span><br><span class="line">    fi.writelines([<span class="string">&quot;1\n&quot;</span>, <span class="string">&quot;2\n&quot;</span>, <span class="string">&quot;3\n&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="网络请求，使用requests-库进行GET请求"><a href="#网络请求，使用requests-库进行GET请求" class="headerlink" title="网络请求，使用requests 库进行GET请求"></a>网络请求，使用requests 库进行GET请求</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r=requests.get(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)<span class="comment">#检测请求状态码，200表示请求成功</span></span><br><span class="line"><span class="built_in">print</span>(r.text)<span class="comment">#页面源码</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;列表、元组、字典 遍历输出&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;str 的 replace find split 等命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;re.serach re.findall 等正则命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IO操作，即文件的读写操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;网络请求，使用requests 库进行GET请求&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="python" scheme="https://miaomiao7.github.io/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>C++STL</title>
    <link href="https://miaomiao7.github.io/2021/02/15/C++STL/"/>
    <id>https://miaomiao7.github.io/2021/02/15/C++STL/</id>
    <published>2021-02-15T13:33:46.000Z</published>
    <updated>2021-04-22T12:05:14.433Z</updated>
    
    <content type="html"><![CDATA[<ul><li>vector：动态数组</li><li>map：字典</li><li>qunue：队列</li><li>set：去重且自动有序</li><li>string</li></ul><span id="more"></span><h2 id="vector：动态数组"><a href="#vector：动态数组" class="headerlink" title="vector：动态数组"></a>vector：动态数组</h2><ul><li>通过下标访问,或迭代器</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        v.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">        v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    v.<span class="built_in">pop_back</span>();</span><br><span class="line">    v.<span class="built_in">insert</span>(v.<span class="built_in">begin</span>()+<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">sort</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());<span class="comment">//左闭右开 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        cout&lt;&lt;v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二维数组：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//vector&lt;int&gt; a[10];//一维长度固定</span></span><br><span class="line">    vector&lt;vector&lt;string&gt; &gt;s;<span class="comment">//&gt; &gt;空格 </span></span><br><span class="line">    s.<span class="built_in">push_back</span>(vector&lt;string&gt;());<span class="comment">//向后追加一行</span></span><br><span class="line">    t[<span class="number">0</span>].<span class="built_in">push_back</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">cout&lt;&lt;t[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除和迭代器访问：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v.<span class="built_in">erase</span>(v.begin+n);<span class="comment">//删除下标为n的元素</span></span><br><span class="line">v.<span class="built_in">erase</span>(v.begin+<span class="number">1</span>,v.begin+<span class="number">3</span>);<span class="comment">//删除区间内的元素</span></span><br><span class="line"><span class="keyword">for</span>(vector&lt;<span class="keyword">typename</span>&gt;::iterator it=T.<span class="built_in">begin</span>();it!=T.<span class="built_in">end</span>();it++)</span><br><span class="line">v.<span class="built_in">erase</span>(it);<span class="comment">//删除迭代器指定元素</span></span><br><span class="line">v.<span class="built_in">clear</span>();</span><br></pre></td></tr></table></figure><h2 id="map：字典"><a href="#map：字典" class="headerlink" title="map：字典"></a>map：字典</h2><ul><li>键值对：a[“xiaoming”]=1;  键key为xiaoming，值value为1</li><li>下标或迭代器访问</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string,<span class="keyword">int</span>&gt; m;<span class="comment">//键自动排序 </span></span><br><span class="line"><span class="keyword">for</span>(map&lt;string,<span class="keyword">int</span>&gt;::vector it=m.<span class="built_in">begin</span>();it!=m.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">it-&gt;first<span class="comment">//访问键</span></span><br><span class="line">it-&gt;second<span class="comment">//访问值</span></span><br><span class="line">&#125;</span><br><span class="line">map&lt;string,<span class="keyword">int</span>&gt;::vector it=m.<span class="built_in">find</span>( key ) ;</span><br><span class="line">m.<span class="built_in">size</span>();</span><br><span class="line">m.<span class="built_in">clear</span>();</span><br><span class="line">m.<span class="built_in">erase</span>(it) ;</span><br><span class="line">m.<span class="built_in">erase</span>(key);</span><br><span class="line">m.<span class="built_in">erase</span>(it,m.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><h2 id="qunue：队列"><a href="#qunue：队列" class="headerlink" title="qunue：队列"></a>qunue：队列</h2><ul><li>使用pop和front前，必须使用empty判断队列是否为空</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">q.<span class="built_in">push</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">q.<span class="built_in">front</span>()<span class="comment">//访问队头</span></span><br><span class="line">q.<span class="built_in">back</span>()<span class="comment">//访问队尾</span></span><br><span class="line"><span class="keyword">if</span>(q.<span class="built_in">empty</span>()==<span class="literal">true</span>)</span><br><span class="line">`cout&lt;&lt;<span class="string">&quot;Empty&quot;</span>;</span><br><span class="line">q.<span class="built_in">size</span>()</span><br></pre></td></tr></table></figure><h2 id="set：去重且自动有序"><a href="#set：去重且自动有序" class="headerlink" title="set：去重且自动有序"></a>set：去重且自动有序</h2><ul><li>只能通过迭代器访问</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">1</span>); </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(set&lt;<span class="keyword">int</span>&gt;::iterator it=s.<span class="built_in">begin</span>();it !=s.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*it);</span><br><span class="line">&#125; </span><br><span class="line">s.<span class="built_in">erase</span>(s.<span class="built_in">find</span>(<span class="number">12</span>));</span><br><span class="line">s.<span class="built_in">erase</span>(it,s.<span class="built_in">end</span>());</span><br><span class="line">set&lt;<span class="keyword">int</span>&gt;::iterator it=s.<span class="built_in">find</span>(<span class="number">40</span>);<span class="comment">//返回迭代器，验证元素有没有</span></span><br><span class="line">s.<span class="built_in">size</span>();</span><br><span class="line">s.<span class="built_in">clear</span>();</span><br></pre></td></tr></table></figure><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">string str;</span><br><span class="line">cin&gt;&gt;str;<span class="comment">//只能用cin</span></span><br><span class="line">cout&lt;&lt;str;</span><br><span class="line">str+=str;</span><br><span class="line">&gt;<span class="comment">//字典序比较 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.<span class="built_in">length</span>()<span class="number">-3</span>;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,str[i]);<span class="comment">//像字符数组访问</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,str.<span class="built_in">c_str</span>());</span><br><span class="line">str.<span class="built_in">erase</span>(str.<span class="built_in">begin</span>()+<span class="number">2</span>); </span><br><span class="line">str.<span class="built_in">erase</span>(str.<span class="built_in">begin</span>()+<span class="number">2</span>,str.end<span class="number">-1</span>); </span><br><span class="line">str.<span class="built_in">erase</span>(pos,len); <span class="comment">//</span></span><br><span class="line">str.<span class="built_in">insert</span>(<span class="number">2</span>,<span class="string">&quot;obq&quot;</span>)</span><br><span class="line">str.<span class="built_in">insert</span>(str.<span class="built_in">begin</span>()+<span class="number">2</span>,str1.<span class="built_in">begin</span>(),str1.<span class="built_in">end</span>())<span class="comment">//str：被插入的字符串，str1：插入的字符串</span></span><br><span class="line">T.<span class="built_in">substr</span>(<span class="number">1</span>,<span class="number">5</span>) ;<span class="comment">//返回从1位开始，长度为5的字符串</span></span><br><span class="line">T.<span class="built_in">find</span>(_str):返回_str第一次出现的位置,否则返回 string::nops</span><br><span class="line">T.<span class="built_in">replace</span>(pos,len,str_2) </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;vector：动态数组&lt;/li&gt;
&lt;li&gt;map：字典&lt;/li&gt;
&lt;li&gt;qunue：队列&lt;/li&gt;
&lt;li&gt;set：去重且自动有序&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="C++" scheme="https://miaomiao7.github.io/categories/C/"/>
    
    
  </entry>
  
</feed>
